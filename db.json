{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/superman.ico","path":"superman.ico","modified":1,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/superman.jpg","path":"images/superman.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"abc2f4b2e13d440b252deac008cc1e110683464e","modified":1534084482152},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1501249996000},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1501249996000},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1501249996000},{"_id":"themes/next/.gitignore","hash":"b935cc0e5b099ebd343ca1766e02f65138c13dd0","modified":1501249996000},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1501249996000},{"_id":"themes/next/.javascript_ignore","hash":"74b54cf920cbbf4038a68e54b7138af8b8f45588","modified":1501249996000},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1501249996000},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1501249996000},{"_id":"themes/next/.travis.yml","hash":"360f38044910e74bf628b0799e19db90718b2cbe","modified":1501249996000},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1501249996000},{"_id":"themes/next/README.en.md","hash":"953873fe2ee79bfc567b16dcdf8f91c1410444f8","modified":1501249996000},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1501249996000},{"_id":"themes/next/_config.yml","hash":"cf3bd947660703307f60539f0ec6c372b4b75554","modified":1501300966000},{"_id":"themes/next/bower.json","hash":"936b9aed1934471bb74cdaacc3fb8031eb01fe23","modified":1501249996000},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1501249996000},{"_id":"themes/next/package.json","hash":"55305ae40690c059cb9140900eb20f9e7f3a7707","modified":1501249996000},{"_id":"themes/next/superman.ico","hash":"097374f239d99292dadaeb11218307592251d85b","modified":1501254214000},{"_id":"source/_posts/CSS动画知多少.md","hash":"10e511bf81d17d2c25fe456e730502f2cf4c97e5","modified":1517621666000},{"_id":"source/_posts/ES6入门-Array.md","hash":"d6a7c5b26c84ef2ed65298be8db0d11dda6acc1e","modified":1511662282000},{"_id":"source/_posts/ES6入门-Class.md","hash":"36795c66b6706a327e8b643cad7a81b0e83d7359","modified":1512744682000},{"_id":"source/_posts/ES6入门-Module.md","hash":"c851f18cebb83e8c39bd5c6911ce12fa491c989e","modified":1510969340000},{"_id":"source/_posts/ES6入门-Promise.md","hash":"d4fdbec544de55ad3eb95d0b1cd0cb69e93fa074","modified":1513346152000},{"_id":"source/_posts/ES6入门-Proxy.md","hash":"4b5f68d3cd34cf4891bf00e26d0c124133b1f872","modified":1517232332000},{"_id":"source/_posts/ES6入门-Reflect.md","hash":"6a59ba7d9c7e366839528fb9d451edfc914152b7","modified":1517022504000},{"_id":"source/_posts/H5底部输入框兼容手机虚拟键盘.md","hash":"31b5bd7eba8d8c99405e0373b6fb86df1329df10","modified":1526698938000},{"_id":"source/_posts/JavaScript必会算法-排序.md","hash":"0e7d301c1673437fd19bb35bebffdfe675102ff8","modified":1515505126000},{"_id":"source/_posts/JavaScript高级程序设计读书笔记-第1章.md","hash":"317c7bbb5e4d4ed8487724b5b03145275816db67","modified":1501402368000},{"_id":"source/_posts/JavaScript高级程序设计读书笔记-第2章.md","hash":"f95650f12060c807c7dafbc3041e5be3e712eeb9","modified":1503411756000},{"_id":"source/_posts/JavaScript高级程序设计读书笔记-第3章.md","hash":"317312d51f084f238381701a37b4d300ee3c33bc","modified":1503412154000},{"_id":"source/_posts/JavaScript高级程序设计读书笔记-第4章.md","hash":"875b8bfb68a9208ada5cdede6a6e4f168c00e845","modified":1504192860000},{"_id":"source/_posts/JavaScript高级程序设计读书笔记-第5章.md","hash":"7b9c69cabe4f3568246cd81d2069c0265666b0cc","modified":1506611052000},{"_id":"source/_posts/JavaScript高级程序设计读书笔记-第6章.md","hash":"c5c4dca61b11badac5b92111b535d7f01bdc5224","modified":1522590354000},{"_id":"source/_posts/Maven配置环境变量出现的问题.md","hash":"75ebd728b297f09e9dfe5a79f363485051cd5d1a","modified":1501336314000},{"_id":"source/_posts/Mybatis学习中遇到的异常(1).md","hash":"d6cac921d02b31fd6cadea969a6a48ed1b14f359","modified":1501311782000},{"_id":"source/_posts/Mybatis学习中遇到的异常(2).md","hash":"1f40a3d134a4e7749948c6b6d97cdd0cf70ffb08","modified":1501311814000},{"_id":"source/_posts/Mybatis学习中遇到的异常(3).md","hash":"9a85154077f10da13acf727ef470c7a689d7e9be","modified":1501311864000},{"_id":"source/_posts/Prettier完全使用指北.md","hash":"f5108de5fe1248201411f7a29ada018d65f06c0e","modified":1523802370000},{"_id":"source/_posts/SSH做项目时经验总结-1.md","hash":"8306ec815e3d779538e93700d33e43d04b764fc0","modified":1501336094000},{"_id":"source/_posts/SSH做项目时经验总结-2.md","hash":"acd746980f99b1b98641066a64b2d0a58a788bc8","modified":1501336082000},{"_id":"source/_posts/SSH做项目时经验总结-3.md","hash":"894ba345d66d30f16a78269bfb3231d157ce1c20","modified":1501336116000},{"_id":"source/_posts/Struts2框架的工作流程总结.md","hash":"ca7682b504b7fecd48669c9a340ed1ea4e91072f","modified":1501336464000},{"_id":"source/_posts/css常见问题总结.md","hash":"4b3f4b368047815ec3adfb2acad8678496293eed","modified":1509981346000},{"_id":"source/_posts/前端实现图片懒加载的几种方式.md","hash":"ab3d1a62377a6dfd8fc919ff24643091f453e830","modified":1503493140000},{"_id":"source/_posts/如何将Cmder集成到Atom中.md","hash":"18570ba7f06c94907a145c758736c1ccc89c6676","modified":1523975368000},{"_id":"source/_posts/工作填坑杂谈(1).md","hash":"bd01f072db300b35e0942a98a187ac9d35aeb761","modified":1503932770000},{"_id":"source/_posts/工作填坑杂谈(2).md","hash":"995b3310b808e55459bbf3f73babe8ec009d1f7c","modified":1507820092000},{"_id":"source/_posts/工作填坑杂谈(3).md","hash":"87a905c6cc364cc53ad5fd3ee86888222d4638a0","modified":1519306964000},{"_id":"source/_posts/打造自己的Websocket组件.md","hash":"ac19a2aba2328523c7d0f11610eb555234224cfe","modified":1534084807590},{"_id":"source/_posts/深入理解this关键字.md","hash":"a6fc54e02b84e886dd36d66caf631166d3339df6","modified":1520383038000},{"_id":"source/_posts/玩转JS函数节流和函数防抖.md","hash":"43ea685529937202c1c0c2e8287f666e22519c1d","modified":1531663400000},{"_id":"source/_posts/移动端滚动入门.md","hash":"370bbb1d314a79c01917eb8a4038404bdc55bad9","modified":1529421476000},{"_id":"source/_posts/移动端滚动进阶.md","hash":"fd03d82fe88ca6eda4d1e9365ad4cc851c1685a7","modified":1529422752000},{"_id":"source/_posts/程序员必会算法系列--基本排序7个.md","hash":"6442b48fa8a695cb4eeb316a02a67ce4c636cf4a","modified":1501310094000},{"_id":"source/_posts/解决this-getHibernateTemplate-的空指针异常的问题.md","hash":"997de5e1417d2daede534158508de53dfacdabbd","modified":1501336224000},{"_id":"source/_posts/详解圣杯和双飞翼布局.md","hash":"5e829c669609e505ae4fb7b246e220f067f20868","modified":1513950464000},{"_id":"source/_posts/面试准备.md","hash":"4b845f7850aaeb6683e75bdd81b9d3e70c5c4bc1","modified":1509893232000},{"_id":"source/_posts/面试算法题系列(1).md","hash":"7dd9664f2bd29d1cb84c17a265b9764098bb9ab8","modified":1501308744000},{"_id":"source/categories/index.md","hash":"f1d9bd801e05b4f84cd294036c9029a5cdad8985","modified":1501311298000},{"_id":"source/tags/index.md","hash":"81a25bb81479808fa4d7d03def0965afe61672de","modified":1501311326000},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1501249996000},{"_id":"themes/next/.git/config","hash":"4f94cb26d3406bb52f35806c75544b9aa1faab62","modified":1501249996000},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1501249982000},{"_id":"themes/next/.git/index","hash":"78788678062f02e6a4e09176ec1fdfd96f913d59","modified":1534087044526},{"_id":"themes/next/.git/packed-refs","hash":"f7fccddcfb56647909fa346641f3cef236575729","modified":1501249996000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1501249996000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"3178cadcec94bfad651bdf320d83946b4e0ac932","modified":1501249996000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"55091b1aab0b472d3f3e239c8d93306c751e4c1c","modified":1501249996000},{"_id":"themes/next/languages/de.yml","hash":"4be3e7d296d5592e0d111dfa6cbbff02602c972d","modified":1501249996000},{"_id":"themes/next/languages/default.yml","hash":"d912814caac150da1611c96843371a87714e52f9","modified":1501249996000},{"_id":"themes/next/languages/en.yml","hash":"b3ee45143bc014578db6b8ac0573f7c7b143a743","modified":1501249996000},{"_id":"themes/next/languages/fr-FR.yml","hash":"0d5bd8bbbeafb72506124ed35e7509debc753612","modified":1501249996000},{"_id":"themes/next/languages/id.yml","hash":"c0848e93bf33a1333ff232905b6b392b1e056dd1","modified":1501249996000},{"_id":"themes/next/languages/ja.yml","hash":"1a608dc799c0f9c36b626bac6fe3404acb45b86d","modified":1501249996000},{"_id":"themes/next/languages/ko.yml","hash":"5c811514aef401317a9ec38b95679d6d2ef0ad42","modified":1501249996000},{"_id":"themes/next/languages/pt-BR.yml","hash":"cc8b5a67ec87b0d5aec6e253bab67ec3cfe3069c","modified":1501249996000},{"_id":"themes/next/languages/pt.yml","hash":"943475a7d681f37ede579cd62da9c50568ca0f8d","modified":1501249996000},{"_id":"themes/next/languages/ru.yml","hash":"84d41a111e497236b2c1fa16e9b91668a1f37037","modified":1501249996000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"3111ce4cc5f30868b3628f9f805d2aef3b75d1c1","modified":1501249996000},{"_id":"themes/next/languages/zh-hk.yml","hash":"b58c0d85daa4d62b0c9753a59de0739aa0120735","modified":1501249996000},{"_id":"themes/next/languages/zh-tw.yml","hash":"8ce0a32411de111ae39d08e4bc936767dacdeb08","modified":1501249996000},{"_id":"themes/next/layout/_layout.swig","hash":"b88585f9e1b7071f6670b20b77b656edd087ccc9","modified":1501249996000},{"_id":"themes/next/layout/archive.swig","hash":"a1d1e91013baaaeb7deaf35c6d3975971ce38e02","modified":1501249996000},{"_id":"themes/next/layout/index.swig","hash":"4bf29f44ca9519a005671f2f2a79a48a148b435b","modified":1501249996000},{"_id":"themes/next/layout/category.swig","hash":"f315f12651de8065fdad73b003da4335ef177173","modified":1501249996000},{"_id":"themes/next/layout/post.swig","hash":"182a99b1f6db0350106c6bb480fede0bbdb7e40f","modified":1501249996000},{"_id":"themes/next/layout/page.swig","hash":"22ba721a9688d490fc66f360e5a319288b63b05a","modified":1501249996000},{"_id":"themes/next/layout/tag.swig","hash":"cc9878932580c890f8f3e569225e29bb37e25b49","modified":1501249996000},{"_id":"themes/next/layout/schedule.swig","hash":"8086f1163b10460258ecbbbe48b057b22bb2f02e","modified":1501249996000},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1501249996000},{"_id":"themes/next/scripts/merge-configs.js","hash":"3ce1be32bb77ee19da25e8dae7dc04e2afc46ca1","modified":1501249996000},{"_id":"themes/next/source/superman.ico","hash":"097374f239d99292dadaeb11218307592251d85b","modified":1501254214000},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1501249996000},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1501249996000},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1501249996000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501249996000},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1501249982000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1501249982000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1501249982000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1501249982000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1501249982000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1501249982000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1501249982000},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1501249982000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1501249982000},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1501249982000},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1501249982000},{"_id":"themes/next/.git/logs/HEAD","hash":"69854f3c4095ff2557a4240c404f1e4a83aff37c","modified":1501249996000},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1501249996000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1501249996000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1501249996000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"506feb56e9b1091187d2014742f63a17758df933","modified":1501249996000},{"_id":"themes/next/layout/_macro/post.swig","hash":"dc3792e703d10daacdb86a9f8d03e846d5b4da83","modified":1501249996000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1501249996000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"0cab451f1df8bba76ee8c81ab345d4de7ad0e15b","modified":1501249996000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"c5cc0070ca7c9a8dbd4b09e0398db536c3cdbe8a","modified":1501249996000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"7a229b569743555215a4f2561997ad496d81e938","modified":1501249996000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"683616f4a80796051e2346d80acf838a589450b0","modified":1501249996000},{"_id":"themes/next/layout/_partials/head.swig","hash":"09b110f77c415c5b71ebd886771a10bc84b95633","modified":1501249996000},{"_id":"themes/next/layout/_partials/header.swig","hash":"d6bf1d1554d91eaf1bfc40ba8905ae81673e5f45","modified":1501249996000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1501249996000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1501249996000},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1501249996000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1501249996000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1501249996000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"53c894e6f3573c662dc4e4f7b5a6f1a32f1a8c94","modified":1501249996000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1501249996000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1501249996000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1501249996000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1501249996000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1501249996000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1501249996000},{"_id":"themes/next/scripts/tags/button.js","hash":"aaf71be6b483fca7a65cd6296c2cf1c2271c26a6","modified":1501249996000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1501249996000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1501249996000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1501249996000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1501249996000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1501249996000},{"_id":"themes/next/scripts/tags/note.js","hash":"fc4958427ca7bdb47a7d830077f432ed824973e4","modified":1501249996000},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1501249996000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1501249996000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1501249996000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1501249996000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1501249996000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1501249996000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1501249996000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1501249996000},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1501249996000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1501249996000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1501249996000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1501249996000},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1501249996000},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1501249996000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1501249996000},{"_id":"themes/next/source/images/superman.jpg","hash":"097374f239d99292dadaeb11218307592251d85b","modified":1501254214000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501249996000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501249996000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501249996000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501249996000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501249996000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501249996000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501249996000},{"_id":"themes/next/.git/refs/heads/master","hash":"06c9547e18b0ab78bd0769782d797d19a960b837","modified":1501249996000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1501249996000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1501249996000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1501249996000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1501249996000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1501249996000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1501249996000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1501249996000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1501249996000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1501249996000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1501249996000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1501249996000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1501249996000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1501249996000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1501249996000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"be2aaeb8f05979e2ba501248480d5294256d61f2","modified":1501249996000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1501249996000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1501249996000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1501249996000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1501249996000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1501249996000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1501249996000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1501249996000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1501249996000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1501249996000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"441f1a1b4e2f652d3b975995bd9d44ff4866f057","modified":1501249996000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1501249996000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1501249996000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1501249996000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1501249996000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1501249996000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1501249996000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1501249996000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1501249996000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1501298148000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1501249996000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1501249996000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1501249996000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"09534b68bd1a708729b3cfffe17737e3af457757","modified":1501249996000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"dacede1cc110c762e7a5468dc0e34ae1a962d5aa","modified":1501249996000},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1501249996000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1501249996000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0ad83d5e453501f7c16785662d8803792aacd22a","modified":1501249996000},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1501249996000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1501249996000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1501249996000},{"_id":"themes/next/source/js/src/motion.js","hash":"dda8c76fce91d7f140c06de2583ba806810f12c2","modified":1501249996000},{"_id":"themes/next/source/js/src/post-details.js","hash":"50fa390554f0fb467d8eb84ac8eff2cffb13fe67","modified":1501249996000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1501249996000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1501249996000},{"_id":"themes/next/source/js/src/utils.js","hash":"e7465a22b536ed15006a5f5556d9a4e633f6bd71","modified":1501249996000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1501249996000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1501249996000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"82fee688910efc644d3d1c3305c6ae28ba3f38f9","modified":1501249996000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1501249996000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1501249996000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1501249996000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1501249996000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1501249996000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1501249996000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1501249996000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1501249996000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1501249996000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1501249996000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1501249996000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1501249996000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1501249996000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1501249996000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1501249996000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1501249996000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1501249996000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1501249996000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1501249996000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1501249996000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1501249996000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1501249996000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1501249996000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1501249996000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1501249996000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1501249996000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1501249996000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1501249996000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1501249996000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1501249996000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1501249996000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1501249996000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1501249996000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1501249996000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1501249996000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1501249996000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1501249996000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1501249996000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1501249996000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1501249996000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1501249996000},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"69854f3c4095ff2557a4240c404f1e4a83aff37c","modified":1501249996000},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1501249996000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1501249996000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1501249996000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"d68bdfcdb9d9e0bf60ed9a2df88e0b55cbfcc1e6","modified":1501249996000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1501249996000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1501249996000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1501249996000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1501249996000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1501249996000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1501249996000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1501249996000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"eec22651977ea25b5e65e8cb1b4906eef69ec588","modified":1501249996000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1501249996000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1501249996000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1501249996000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1501249996000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1501249996000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1501249996000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"f23ac53ab901c48859dd29eee6e386b60ff956ba","modified":1501249996000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1501249996000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1501249996000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1501249996000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1501249996000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1501249996000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1501249996000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"ce272226a1570f5f7c70243b751a5b0fe1671a88","modified":1501249996000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1501249996000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1501249996000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1501249996000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1501249996000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1501249996000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1501249996000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"c48d4a561d047b3705924949b3ab7b57bee94ecd","modified":1501249996000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1501249996000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"c4358416f0a116d7f4037542fa3b385947e80908","modified":1501249996000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1501249996000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1501249996000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1501249996000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1501249996000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1501249996000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1501249996000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1501249996000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1501249996000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1501249996000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1501249996000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1501249996000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1501249996000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1501249996000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1501249996000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1501249996000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1501249996000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1501249996000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1501249996000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1501249996000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1501249996000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1501249996000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1501249996000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1501249996000},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"69854f3c4095ff2557a4240c404f1e4a83aff37c","modified":1501249996000},{"_id":"themes/next/.git/objects/pack/pack-d8f02a876e55085e04a36abed6958b51b6145b55.idx","hash":"bd0e2a2d990bfbf7f4cfd90d7d861a63c1bc725a","modified":1501249996000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1501249996000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1501249996000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"b3b783511bbd94af7e941abf8ff411885db7395b","modified":1501249996000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1501249996000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1501249996000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1501249996000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1501249996000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1501249996000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1501249996000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1501249996000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1501249996000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1501249996000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1501249996000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1501249996000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"4783f85872bc7e218c1522a5c1c68cd27a5922db","modified":1501249996000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1501249996000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1501249996000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1501249996000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"58f9e6aba94733244a87d2ba5966c5a009486509","modified":1501249996000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1501249996000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1501249996000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"658accf8e196721f295003da66941e6d1f7b81b0","modified":1501249996000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1501249996000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1501249996000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1501249996000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1501249996000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"2cb09973d29a8e34e2a3425ac6e0938296970d8e","modified":1501249996000},{"_id":"themes/next/source/css/_common/components/post/post-wordcount.styl","hash":"268c9704481fdb0b4d1e646196386143990fe235","modified":1501249996000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"bc08cfb2ef2ff44ba3fc7dffdb2deb01a9d17d15","modified":1501249996000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1501249996000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1501249996000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"ac060861b27b764bc4012fc362a25a332df4045a","modified":1501249996000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1501249996000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1501249996000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1501249996000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"28a8737c090fbffd188d73a00b42e90b9ee57df2","modified":1501249996000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"8e00d9a0bdf35ffc0a7fa387fa294b953c2d28fc","modified":1501249996000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1501249996000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1501249996000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1501249996000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1501249996000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"3159b55f35c40bd08e55b00148c523760a708c51","modified":1501249996000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1501249996000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"74019008ba973ab30f0f4a6b3c2cd33c66d3a4b4","modified":1501249996000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"e3ad37f2da35e330616a044621ffa50565a20c88","modified":1501249996000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1501249996000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1501249996000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1501249996000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1501249996000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1501249996000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1501249996000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1501249996000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"37e406ec42b7a53c72395bdbaa434270019e7179","modified":1501249996000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1501249996000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1501249996000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1501249996000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1501249996000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1501249996000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1501249996000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1501249996000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1501249996000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1501249996000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1501249996000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1501249996000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1501249996000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1501249996000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1501249996000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1501249996000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1501249996000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1501249996000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1501249996000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1501249996000},{"_id":"themes/next/.git/objects/pack/pack-d8f02a876e55085e04a36abed6958b51b6145b55.pack","hash":"e0ba350f697218b7722b8a12fbcff19bb465ae83","modified":1501249996000}],"Category":[{"name":"ES6入门","_id":"cjksf3cvy0003h8ef49v6ucq2"},{"name":"css","_id":"cjksf3cw30008h8ef7djhn2y8"},{"name":"JS实战","_id":"cjksf3cwc000kh8ef25d8r8a1"},{"name":"算法","_id":"cjksf3cwg000th8efitbmx2jw"},{"name":"JS高程笔记","_id":"cjksf3cwk0012h8ef8y68i7cg"},{"name":"遇到的坑","_id":"cjksf3cx30022h8ef5nnw7myc"},{"name":"团队规范构建","_id":"cjksf3cxf002xh8efxl74bhfo"},{"name":"struts2框架","_id":"cjksf3cxr003uh8efe6kgmvo0"},{"name":"面试","_id":"cjksf3cxt0046h8eff2khu01g"},{"name":"面试算法题","_id":"cjksf3cxu004dh8efiy22onfr"}],"Data":[],"Page":[{"title":"分类","date":"2017-07-29T04:36:21.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2017-07-29 12:36:21\ntype: \"categories\"\ncomments: false\n---\n","updated":"2017-07-29T06:54:58.000Z","path":"categories/index.html","layout":"page","_id":"cjksf3cvv0001h8ef1auq1aua","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2017-07-29T04:36:21.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2017-07-29 12:36:21\ntype: \"tags\"\ncomments: false\n---\n","updated":"2017-07-29T06:55:26.000Z","path":"tags/index.html","layout":"page","_id":"cjksf3d1v005lh8efatmi0bp9","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"ES6入门-Array","date":"2017-11-25T01:48:34.000Z","description":"ES6入门-Array","_content":"# 扩展运算符\n## 含义:\n1.扩展运算符(...)将一个数组转为 **用逗号分隔的** 参数序列。例如：\n```\nconsole.log(...[1, 2, 3]);\n```\n\n2.扩展运算符主要用于函数调用。例如：\n```\nfunction push(arr, ...items) {\n    arr.push(...items);\n}\n\nfunction add(x, y) {\n    return x + y;\n}\n\nconst arr = [4, 30];\nadd(...arr); // 34\n```\n\n3.扩展运算符与正常函数参数相结合使用。例如：\n```\nfunction f(v, w, x, y, z) {}\nconst args = [0, 1];\nf(-1, ...args, 2, ...[3]);\n```\n\n4.扩展运算符后可以使用表达式。例如：\n```\nconst arr1 = [\n    ...(x > 0 ? ['a'] : []),\n    'b'\n];\n```\n\n5.如果扩展运算符后是一个空数组，则不产生任何效果。例如：\n```\n[...[], 1]; // [1]\n```\n\n##扩展运算符替代数组的apply方法\n```\n// es5写法\nfunction f(x, y, z) {}\n\nvar args1 = [0, 1, 2];\nf.apply(null, args1);\n\n// es6写法\nfunction f(x, y, z) {}\nlet args2 = [0, 1, 2];\nf(...args2);\n\n// 示例\nMath.max(...[14, 3, 77]);\nlet arr2 = [0, 1, 2];\nlet arr3 = [3, 4, 5];\narr2.push(...arr3);\nnew Date(...[2015, 1, 1]);\n```\n\n##扩展运算符的应用\n1.复制数组\n```\nconst a1 = [1, 2];\nconst a2 = [...a1]; // a2是a1的克隆\n```\n\n2.合并数组\n```\nvar arr4 = ['a', 'b'];\nvar arr5 = ['c', 'd'];\nvar arr6 = ['f'];\n[...arr4, ...arr5, ...arr6];\n```\n\n3.与解构赋值结合(扩展运算符用于赋值只能放到参数的最后一位，否则会报错)\n```\nconst [a, ...result] = [1, 2, 3, 4, 5];\nconsole.log(a); // 1\nconsole.log(result); // [2,3,4,5]\n\nconst [b, ...result1] = [\"foo\"];\nconsole.log(b); //foo\nconsole.log(result1); // []\n```\n\n4.字符串(将字符串转化为真正的数组)\n```\n[...\"hello\"]; // ['h','e','l','l','o']\nfunction length(str) {\n    return [...str].length;\n}\n```\n\n5.实现了Iterator接口的对象\n```\nlet nodeList = document.querySelectorAll('div');\n// querySelectorAll返回一个nodeList对象，它是一个类数组的对象，并且实现了Iterator接口，所有可以转化为数组\nlet array = [...nodeList];\n```\n\n6.Map和Set结构，Generator函数\n扩展运算符内部调用的是数据结构Iterator接口，因此只要具有Iterator接口的对象，都可以使用扩展运算符，比如Map和Set。\n```\nlet map = new Map([\n    [1, 'one'],\n    [2, 'two'],\n    [3, 'three'],\n]);\nlet arr7 = [...map.keys()];\n```\n\n# Array.from方法\n## 含义：\n1.Array.from方法将两类对象转换为真正的数组对象：类数组对象和可遍历对象。\n任何具有length属性的对象都可以通过Array.from方法转换为数组。例如：\n```\nlet arrayLike = {\n    '0': 'a',\n    '1': 'b',\n    '2': 'c',\n    length: 3\n};\n// es5的写法\nvar arr = [].slice.call(arrayLike); // ['a','b','c']\n\n// es6的写法\nvar arr = Array.from(arrayLike); // ['a','b','c']\n```\n\n2.将Dom操作返回的NodeList集合转换为数组。例如：\n```\nlet ps = document.querySelectorAll('p');\nArray.from(ps).forEach(function(p) {\n    console.log(p);\n});\n```\n\n3.将部署了Iterator接口的数据结构转换为数组。例如：\n```\nArray.from('hello');\n\nlet namesSet = new Set(['a', 'b']);\nArray.from(namesSet);\n```\n\n4.Array.from方法还接受第二个参数，作用类似于数组的map方法，对每个元素进行处理，将处理后的值放入返回的数组。例如：\n```\nArray.from([1,2,3], x=>x*2);\n```\n\n## Array.from方法的应用\n1.取出Dom节点的文本内容。\n```\nlet spans = document.querySelectorAll('span.name');\n    let names = Array.from(spans, dom=>dom.textContent);\n```\n\n2.返回数据类型\n```\nfunction typesOf (){\n        return Array.from(arguments, value => typeOf value);\n    }\n    typesOf(null, [], NaN); // ['object', 'object', 'number']\n```\n\n3.返回字符串的长度，避免JavaScript将大于\\uFFFF的Unicode字符，算作两个字符的bug。\n```\nfunction stringLength (str){\n        return Array.from(str).length;\n}\n```\n\n# Array.of方法\n## 含义：\n1.Array.of用于将一组值转换为数组。例如：\n```\nArray.of(3, 11, 8);\nArray.of(3);\nArray.of(3).length;\n```\n\n2.Array.of是弥补数组构造函数Array()的不足，因为给构造函数传入一个参数的话是设置数组的length值。\n\n3.Array.of总是返回参数值组成的数组，如果没有参数则返回空数组。\n\n# 数组实例的copyWithin()\n## 含义：\n1.数组实例的copyWithin()方法，在当前数组内部，将指定位置的成员复制到其他位置(会覆盖原有成员)，然后返回当前数组，会修改当前数组。例如：\n```\nArray.prototype.copyWithin(target, start = 0, end = length);\n```\n2.这个方法接受三个参数：\n  1.target(必需)：从该位置替换数组，指定要替换的位置。\n  2.start(可选)：从该位置开始读取数据，默认为0，如果为负数，则表示倒数。\n  3.end(可选)：到该位置停止读取数据，默认为数组长度，如果为负，表示倒数。\n\n  > 注：start和end两个参数是用来指定要复制的内容的。 \n\n例如：\n```\n[1,2,3,4,5].copyWithin(0, 3); // \"[4,5,3,5,4]\"\n[1,2,3,4,5].copyWithin(0, 3, 4); // \"[4,2,3,4,5]\"\nlet arr = [1,2,3,4,5];\narr.copyWithin(0, 3, 4); // \"[4,2,3,4,5]\"\n```\n\n# 数组实例的find()和findIndex()\n## 含义：\n1.数组find()方法，用于找出第一个符合条件的数组成员，它的参数是一个回调函数，所有成员依次执行该回调函数，直到找到第一个返回值为true的成员，并返回，如果没有，则返回undefined。例如：\n```\n[1,2,3,-1,5].find((n) => n < 0); // \"-1\"\n```\n\n2.该回调函数可以传入三个参数，依次为当前值，当前索引，原数组。例如：\n```\n[1,2,3,4,5].find(function(value, index, arr){\n    return value > 4;\n}); // \"5\"\n```\n\n3.数组findIndex()方法和index()方法非常类似，返回第一个符合条件成员的索引位置，如果没有则返回-1。例如：\n```\n[1,2,3,4,5].findIndex(function(value, index, arr){\n    return value > 4;\n}); // 4\n```\n\n> 注：这两个函数都可以接受第二个参数，用来绑定回调函数的this对象。另外这两个方法都可以发现NaN，弥补了indexOf方法的不足。 \n\n```\n[NaN].findIndex( y => Object.is(NaN, y)); // 0\n```\n\n# 数组实例的fill()\n## 含义：\n\n1.fill方法使用给定值，填充一个数组。示例：\n```\n['a','b','c'].fill(7); // [7,7,7]\n```\n\n2.该方法还接受第二和第三个参数，用于指定填充的起始位置和结束位置。示例：\n```\n['a','b','c'].fill(7, 0, 1); // [7,'b','c']\n```\n\n> 注：该方法用于空数组初始化非常方便，数组中已有的元素会全部被抹去。 \n\n# 数组实例的entries()，keys()和values()\n## 含义：\n1.这三个方法都返回一个iterator对象，可以用for...of来遍历，keys()是遍历键，values()是遍历值，entries()是遍历键值对。例如：\n```\nfor(let key of ['a', 'b'].keys()){\n    console.log(key);\n}\n// 0\n// 1\n\nfor(let value of ['a', 'b'].values()){\n    console.log(value)\n}\n// 'a'\n// 'b'\n\nfor(let [key, value] of ['a', 'b'].entries()){\n    console.log(key, value);\n}\n  // 0 'a'\n  // 1 'b'\n```\n\n# 数组实例的includes()\n## 含义：\n1.Array.prototype.includes方法返回一个布尔值，表示某个数组是否包含给定的值，与字符串includes方法类似。例如：\n```\n[1,2,3].includes(3); // true\n[1,2,NaN].includes(NaN); //true\n```\n\n2.该方法的第二个参数表示搜索的起始位置，默认为0，如果第二个参数为负数，则表示倒数位置。例如：\n```\n[1,2,3].includes(2, 2); // false\n```\n\n> 注：includes()方法需要与Map和Set的has()方法进行区分。 \n\n# 数组的空位\n## 含义：\n1.数组的空位指数组的某一个位置上没有任何值，注意，空位不是undefined。\n\n2.ES6明确了将空位转换成undefined，但Array.from会将空位转换成undefined。例如：\n```\nArray.from([1,,2]); // [1, undefined, 2]\n```\n\n3.扩展运算符(...)也会将空位转换成undefined。例如：\n```\n[...[1,,2]] // [1, undefined, 2]\n```\n\n4.  copyWithin()会连空位一起拷贝，fill()会将空位视为正常的数组位置，for...of循环也会遍历空位。\n\n> 注：由于空位处理的规则不统一，所以要避免出现空位。 \n","source":"_posts/ES6入门-Array.md","raw":"---\ntitle: ES6入门-Array\ndate: 2017-11-25 09:48:34\ncategories: ES6入门\ntags:\n     - 笔记\n     - JavaScript\n     - ECMAScript 2015\ndescription: ES6入门-Array\n---\n# 扩展运算符\n## 含义:\n1.扩展运算符(...)将一个数组转为 **用逗号分隔的** 参数序列。例如：\n```\nconsole.log(...[1, 2, 3]);\n```\n\n2.扩展运算符主要用于函数调用。例如：\n```\nfunction push(arr, ...items) {\n    arr.push(...items);\n}\n\nfunction add(x, y) {\n    return x + y;\n}\n\nconst arr = [4, 30];\nadd(...arr); // 34\n```\n\n3.扩展运算符与正常函数参数相结合使用。例如：\n```\nfunction f(v, w, x, y, z) {}\nconst args = [0, 1];\nf(-1, ...args, 2, ...[3]);\n```\n\n4.扩展运算符后可以使用表达式。例如：\n```\nconst arr1 = [\n    ...(x > 0 ? ['a'] : []),\n    'b'\n];\n```\n\n5.如果扩展运算符后是一个空数组，则不产生任何效果。例如：\n```\n[...[], 1]; // [1]\n```\n\n##扩展运算符替代数组的apply方法\n```\n// es5写法\nfunction f(x, y, z) {}\n\nvar args1 = [0, 1, 2];\nf.apply(null, args1);\n\n// es6写法\nfunction f(x, y, z) {}\nlet args2 = [0, 1, 2];\nf(...args2);\n\n// 示例\nMath.max(...[14, 3, 77]);\nlet arr2 = [0, 1, 2];\nlet arr3 = [3, 4, 5];\narr2.push(...arr3);\nnew Date(...[2015, 1, 1]);\n```\n\n##扩展运算符的应用\n1.复制数组\n```\nconst a1 = [1, 2];\nconst a2 = [...a1]; // a2是a1的克隆\n```\n\n2.合并数组\n```\nvar arr4 = ['a', 'b'];\nvar arr5 = ['c', 'd'];\nvar arr6 = ['f'];\n[...arr4, ...arr5, ...arr6];\n```\n\n3.与解构赋值结合(扩展运算符用于赋值只能放到参数的最后一位，否则会报错)\n```\nconst [a, ...result] = [1, 2, 3, 4, 5];\nconsole.log(a); // 1\nconsole.log(result); // [2,3,4,5]\n\nconst [b, ...result1] = [\"foo\"];\nconsole.log(b); //foo\nconsole.log(result1); // []\n```\n\n4.字符串(将字符串转化为真正的数组)\n```\n[...\"hello\"]; // ['h','e','l','l','o']\nfunction length(str) {\n    return [...str].length;\n}\n```\n\n5.实现了Iterator接口的对象\n```\nlet nodeList = document.querySelectorAll('div');\n// querySelectorAll返回一个nodeList对象，它是一个类数组的对象，并且实现了Iterator接口，所有可以转化为数组\nlet array = [...nodeList];\n```\n\n6.Map和Set结构，Generator函数\n扩展运算符内部调用的是数据结构Iterator接口，因此只要具有Iterator接口的对象，都可以使用扩展运算符，比如Map和Set。\n```\nlet map = new Map([\n    [1, 'one'],\n    [2, 'two'],\n    [3, 'three'],\n]);\nlet arr7 = [...map.keys()];\n```\n\n# Array.from方法\n## 含义：\n1.Array.from方法将两类对象转换为真正的数组对象：类数组对象和可遍历对象。\n任何具有length属性的对象都可以通过Array.from方法转换为数组。例如：\n```\nlet arrayLike = {\n    '0': 'a',\n    '1': 'b',\n    '2': 'c',\n    length: 3\n};\n// es5的写法\nvar arr = [].slice.call(arrayLike); // ['a','b','c']\n\n// es6的写法\nvar arr = Array.from(arrayLike); // ['a','b','c']\n```\n\n2.将Dom操作返回的NodeList集合转换为数组。例如：\n```\nlet ps = document.querySelectorAll('p');\nArray.from(ps).forEach(function(p) {\n    console.log(p);\n});\n```\n\n3.将部署了Iterator接口的数据结构转换为数组。例如：\n```\nArray.from('hello');\n\nlet namesSet = new Set(['a', 'b']);\nArray.from(namesSet);\n```\n\n4.Array.from方法还接受第二个参数，作用类似于数组的map方法，对每个元素进行处理，将处理后的值放入返回的数组。例如：\n```\nArray.from([1,2,3], x=>x*2);\n```\n\n## Array.from方法的应用\n1.取出Dom节点的文本内容。\n```\nlet spans = document.querySelectorAll('span.name');\n    let names = Array.from(spans, dom=>dom.textContent);\n```\n\n2.返回数据类型\n```\nfunction typesOf (){\n        return Array.from(arguments, value => typeOf value);\n    }\n    typesOf(null, [], NaN); // ['object', 'object', 'number']\n```\n\n3.返回字符串的长度，避免JavaScript将大于\\uFFFF的Unicode字符，算作两个字符的bug。\n```\nfunction stringLength (str){\n        return Array.from(str).length;\n}\n```\n\n# Array.of方法\n## 含义：\n1.Array.of用于将一组值转换为数组。例如：\n```\nArray.of(3, 11, 8);\nArray.of(3);\nArray.of(3).length;\n```\n\n2.Array.of是弥补数组构造函数Array()的不足，因为给构造函数传入一个参数的话是设置数组的length值。\n\n3.Array.of总是返回参数值组成的数组，如果没有参数则返回空数组。\n\n# 数组实例的copyWithin()\n## 含义：\n1.数组实例的copyWithin()方法，在当前数组内部，将指定位置的成员复制到其他位置(会覆盖原有成员)，然后返回当前数组，会修改当前数组。例如：\n```\nArray.prototype.copyWithin(target, start = 0, end = length);\n```\n2.这个方法接受三个参数：\n  1.target(必需)：从该位置替换数组，指定要替换的位置。\n  2.start(可选)：从该位置开始读取数据，默认为0，如果为负数，则表示倒数。\n  3.end(可选)：到该位置停止读取数据，默认为数组长度，如果为负，表示倒数。\n\n  > 注：start和end两个参数是用来指定要复制的内容的。 \n\n例如：\n```\n[1,2,3,4,5].copyWithin(0, 3); // \"[4,5,3,5,4]\"\n[1,2,3,4,5].copyWithin(0, 3, 4); // \"[4,2,3,4,5]\"\nlet arr = [1,2,3,4,5];\narr.copyWithin(0, 3, 4); // \"[4,2,3,4,5]\"\n```\n\n# 数组实例的find()和findIndex()\n## 含义：\n1.数组find()方法，用于找出第一个符合条件的数组成员，它的参数是一个回调函数，所有成员依次执行该回调函数，直到找到第一个返回值为true的成员，并返回，如果没有，则返回undefined。例如：\n```\n[1,2,3,-1,5].find((n) => n < 0); // \"-1\"\n```\n\n2.该回调函数可以传入三个参数，依次为当前值，当前索引，原数组。例如：\n```\n[1,2,3,4,5].find(function(value, index, arr){\n    return value > 4;\n}); // \"5\"\n```\n\n3.数组findIndex()方法和index()方法非常类似，返回第一个符合条件成员的索引位置，如果没有则返回-1。例如：\n```\n[1,2,3,4,5].findIndex(function(value, index, arr){\n    return value > 4;\n}); // 4\n```\n\n> 注：这两个函数都可以接受第二个参数，用来绑定回调函数的this对象。另外这两个方法都可以发现NaN，弥补了indexOf方法的不足。 \n\n```\n[NaN].findIndex( y => Object.is(NaN, y)); // 0\n```\n\n# 数组实例的fill()\n## 含义：\n\n1.fill方法使用给定值，填充一个数组。示例：\n```\n['a','b','c'].fill(7); // [7,7,7]\n```\n\n2.该方法还接受第二和第三个参数，用于指定填充的起始位置和结束位置。示例：\n```\n['a','b','c'].fill(7, 0, 1); // [7,'b','c']\n```\n\n> 注：该方法用于空数组初始化非常方便，数组中已有的元素会全部被抹去。 \n\n# 数组实例的entries()，keys()和values()\n## 含义：\n1.这三个方法都返回一个iterator对象，可以用for...of来遍历，keys()是遍历键，values()是遍历值，entries()是遍历键值对。例如：\n```\nfor(let key of ['a', 'b'].keys()){\n    console.log(key);\n}\n// 0\n// 1\n\nfor(let value of ['a', 'b'].values()){\n    console.log(value)\n}\n// 'a'\n// 'b'\n\nfor(let [key, value] of ['a', 'b'].entries()){\n    console.log(key, value);\n}\n  // 0 'a'\n  // 1 'b'\n```\n\n# 数组实例的includes()\n## 含义：\n1.Array.prototype.includes方法返回一个布尔值，表示某个数组是否包含给定的值，与字符串includes方法类似。例如：\n```\n[1,2,3].includes(3); // true\n[1,2,NaN].includes(NaN); //true\n```\n\n2.该方法的第二个参数表示搜索的起始位置，默认为0，如果第二个参数为负数，则表示倒数位置。例如：\n```\n[1,2,3].includes(2, 2); // false\n```\n\n> 注：includes()方法需要与Map和Set的has()方法进行区分。 \n\n# 数组的空位\n## 含义：\n1.数组的空位指数组的某一个位置上没有任何值，注意，空位不是undefined。\n\n2.ES6明确了将空位转换成undefined，但Array.from会将空位转换成undefined。例如：\n```\nArray.from([1,,2]); // [1, undefined, 2]\n```\n\n3.扩展运算符(...)也会将空位转换成undefined。例如：\n```\n[...[1,,2]] // [1, undefined, 2]\n```\n\n4.  copyWithin()会连空位一起拷贝，fill()会将空位视为正常的数组位置，for...of循环也会遍历空位。\n\n> 注：由于空位处理的规则不统一，所以要避免出现空位。 \n","slug":"ES6入门-Array","published":1,"updated":"2017-11-26T02:11:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjksf3cvs0000h8efivqmfwy7","content":"<h1 id=\"扩展运算符\"><a href=\"#扩展运算符\" class=\"headerlink\" title=\"扩展运算符\"></a>扩展运算符</h1><h2 id=\"含义\"><a href=\"#含义\" class=\"headerlink\" title=\"含义:\"></a>含义:</h2><p>1.扩展运算符(…)将一个数组转为 <strong>用逗号分隔的</strong> 参数序列。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(...[1, 2, 3]);</span><br></pre></td></tr></table></figure></p>\n<p>2.扩展运算符主要用于函数调用。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function push(arr, ...items) &#123;</span><br><span class=\"line\">    arr.push(...items);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function add(x, y) &#123;</span><br><span class=\"line\">    return x + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const arr = [4, 30];</span><br><span class=\"line\">add(...arr); // 34</span><br></pre></td></tr></table></figure></p>\n<p>3.扩展运算符与正常函数参数相结合使用。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function f(v, w, x, y, z) &#123;&#125;</span><br><span class=\"line\">const args = [0, 1];</span><br><span class=\"line\">f(-1, ...args, 2, ...[3]);</span><br></pre></td></tr></table></figure></p>\n<p>4.扩展运算符后可以使用表达式。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const arr1 = [</span><br><span class=\"line\">    ...(x &gt; 0 ? [&apos;a&apos;] : []),</span><br><span class=\"line\">    &apos;b&apos;</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure></p>\n<p>5.如果扩展运算符后是一个空数组，则不产生任何效果。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[...[], 1]; // [1]</span><br></pre></td></tr></table></figure></p>\n<p>##扩展运算符替代数组的apply方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// es5写法</span><br><span class=\"line\">function f(x, y, z) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var args1 = [0, 1, 2];</span><br><span class=\"line\">f.apply(null, args1);</span><br><span class=\"line\"></span><br><span class=\"line\">// es6写法</span><br><span class=\"line\">function f(x, y, z) &#123;&#125;</span><br><span class=\"line\">let args2 = [0, 1, 2];</span><br><span class=\"line\">f(...args2);</span><br><span class=\"line\"></span><br><span class=\"line\">// 示例</span><br><span class=\"line\">Math.max(...[14, 3, 77]);</span><br><span class=\"line\">let arr2 = [0, 1, 2];</span><br><span class=\"line\">let arr3 = [3, 4, 5];</span><br><span class=\"line\">arr2.push(...arr3);</span><br><span class=\"line\">new Date(...[2015, 1, 1]);</span><br></pre></td></tr></table></figure></p>\n<p>##扩展运算符的应用<br>1.复制数组<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const a1 = [1, 2];</span><br><span class=\"line\">const a2 = [...a1]; // a2是a1的克隆</span><br></pre></td></tr></table></figure></p>\n<p>2.合并数组<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr4 = [&apos;a&apos;, &apos;b&apos;];</span><br><span class=\"line\">var arr5 = [&apos;c&apos;, &apos;d&apos;];</span><br><span class=\"line\">var arr6 = [&apos;f&apos;];</span><br><span class=\"line\">[...arr4, ...arr5, ...arr6];</span><br></pre></td></tr></table></figure></p>\n<p>3.与解构赋值结合(扩展运算符用于赋值只能放到参数的最后一位，否则会报错)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const [a, ...result] = [1, 2, 3, 4, 5];</span><br><span class=\"line\">console.log(a); // 1</span><br><span class=\"line\">console.log(result); // [2,3,4,5]</span><br><span class=\"line\"></span><br><span class=\"line\">const [b, ...result1] = [&quot;foo&quot;];</span><br><span class=\"line\">console.log(b); //foo</span><br><span class=\"line\">console.log(result1); // []</span><br></pre></td></tr></table></figure></p>\n<p>4.字符串(将字符串转化为真正的数组)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[...&quot;hello&quot;]; // [&apos;h&apos;,&apos;e&apos;,&apos;l&apos;,&apos;l&apos;,&apos;o&apos;]</span><br><span class=\"line\">function length(str) &#123;</span><br><span class=\"line\">    return [...str].length;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>5.实现了Iterator接口的对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let nodeList = document.querySelectorAll(&apos;div&apos;);</span><br><span class=\"line\">// querySelectorAll返回一个nodeList对象，它是一个类数组的对象，并且实现了Iterator接口，所有可以转化为数组</span><br><span class=\"line\">let array = [...nodeList];</span><br></pre></td></tr></table></figure></p>\n<p>6.Map和Set结构，Generator函数<br>扩展运算符内部调用的是数据结构Iterator接口，因此只要具有Iterator接口的对象，都可以使用扩展运算符，比如Map和Set。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let map = new Map([</span><br><span class=\"line\">    [1, &apos;one&apos;],</span><br><span class=\"line\">    [2, &apos;two&apos;],</span><br><span class=\"line\">    [3, &apos;three&apos;],</span><br><span class=\"line\">]);</span><br><span class=\"line\">let arr7 = [...map.keys()];</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"Array-from方法\"><a href=\"#Array-from方法\" class=\"headerlink\" title=\"Array.from方法\"></a>Array.from方法</h1><h2 id=\"含义：\"><a href=\"#含义：\" class=\"headerlink\" title=\"含义：\"></a>含义：</h2><p>1.Array.from方法将两类对象转换为真正的数组对象：类数组对象和可遍历对象。<br>任何具有length属性的对象都可以通过Array.from方法转换为数组。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arrayLike = &#123;</span><br><span class=\"line\">    &apos;0&apos;: &apos;a&apos;,</span><br><span class=\"line\">    &apos;1&apos;: &apos;b&apos;,</span><br><span class=\"line\">    &apos;2&apos;: &apos;c&apos;,</span><br><span class=\"line\">    length: 3</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">// es5的写法</span><br><span class=\"line\">var arr = [].slice.call(arrayLike); // [&apos;a&apos;,&apos;b&apos;,&apos;c&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\">// es6的写法</span><br><span class=\"line\">var arr = Array.from(arrayLike); // [&apos;a&apos;,&apos;b&apos;,&apos;c&apos;]</span><br></pre></td></tr></table></figure></p>\n<p>2.将Dom操作返回的NodeList集合转换为数组。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let ps = document.querySelectorAll(&apos;p&apos;);</span><br><span class=\"line\">Array.from(ps).forEach(function(p) &#123;</span><br><span class=\"line\">    console.log(p);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>3.将部署了Iterator接口的数据结构转换为数组。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Array.from(&apos;hello&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">let namesSet = new Set([&apos;a&apos;, &apos;b&apos;]);</span><br><span class=\"line\">Array.from(namesSet);</span><br></pre></td></tr></table></figure></p>\n<p>4.Array.from方法还接受第二个参数，作用类似于数组的map方法，对每个元素进行处理，将处理后的值放入返回的数组。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Array.from([1,2,3], x=&gt;x*2);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Array-from方法的应用\"><a href=\"#Array-from方法的应用\" class=\"headerlink\" title=\"Array.from方法的应用\"></a>Array.from方法的应用</h2><p>1.取出Dom节点的文本内容。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let spans = document.querySelectorAll(&apos;span.name&apos;);</span><br><span class=\"line\">    let names = Array.from(spans, dom=&gt;dom.textContent);</span><br></pre></td></tr></table></figure></p>\n<p>2.返回数据类型<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function typesOf ()&#123;</span><br><span class=\"line\">        return Array.from(arguments, value =&gt; typeOf value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    typesOf(null, [], NaN); // [&apos;object&apos;, &apos;object&apos;, &apos;number&apos;]</span><br></pre></td></tr></table></figure></p>\n<p>3.返回字符串的长度，避免JavaScript将大于\\uFFFF的Unicode字符，算作两个字符的bug。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function stringLength (str)&#123;</span><br><span class=\"line\">        return Array.from(str).length;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"Array-of方法\"><a href=\"#Array-of方法\" class=\"headerlink\" title=\"Array.of方法\"></a>Array.of方法</h1><h2 id=\"含义：-1\"><a href=\"#含义：-1\" class=\"headerlink\" title=\"含义：\"></a>含义：</h2><p>1.Array.of用于将一组值转换为数组。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Array.of(3, 11, 8);</span><br><span class=\"line\">Array.of(3);</span><br><span class=\"line\">Array.of(3).length;</span><br></pre></td></tr></table></figure></p>\n<p>2.Array.of是弥补数组构造函数Array()的不足，因为给构造函数传入一个参数的话是设置数组的length值。</p>\n<p>3.Array.of总是返回参数值组成的数组，如果没有参数则返回空数组。</p>\n<h1 id=\"数组实例的copyWithin\"><a href=\"#数组实例的copyWithin\" class=\"headerlink\" title=\"数组实例的copyWithin()\"></a>数组实例的copyWithin()</h1><h2 id=\"含义：-2\"><a href=\"#含义：-2\" class=\"headerlink\" title=\"含义：\"></a>含义：</h2><p>1.数组实例的copyWithin()方法，在当前数组内部，将指定位置的成员复制到其他位置(会覆盖原有成员)，然后返回当前数组，会修改当前数组。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Array.prototype.copyWithin(target, start = 0, end = length);</span><br></pre></td></tr></table></figure></p>\n<p>2.这个方法接受三个参数：<br>  1.target(必需)：从该位置替换数组，指定要替换的位置。<br>  2.start(可选)：从该位置开始读取数据，默认为0，如果为负数，则表示倒数。<br>  3.end(可选)：到该位置停止读取数据，默认为数组长度，如果为负，表示倒数。</p>\n<blockquote>\n<p>注：start和end两个参数是用来指定要复制的内容的。 </p>\n</blockquote>\n<p>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1,2,3,4,5].copyWithin(0, 3); // &quot;[4,5,3,5,4]&quot;</span><br><span class=\"line\">[1,2,3,4,5].copyWithin(0, 3, 4); // &quot;[4,2,3,4,5]&quot;</span><br><span class=\"line\">let arr = [1,2,3,4,5];</span><br><span class=\"line\">arr.copyWithin(0, 3, 4); // &quot;[4,2,3,4,5]&quot;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"数组实例的find-和findIndex\"><a href=\"#数组实例的find-和findIndex\" class=\"headerlink\" title=\"数组实例的find()和findIndex()\"></a>数组实例的find()和findIndex()</h1><h2 id=\"含义：-3\"><a href=\"#含义：-3\" class=\"headerlink\" title=\"含义：\"></a>含义：</h2><p>1.数组find()方法，用于找出第一个符合条件的数组成员，它的参数是一个回调函数，所有成员依次执行该回调函数，直到找到第一个返回值为true的成员，并返回，如果没有，则返回undefined。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1,2,3,-1,5].find((n) =&gt; n &lt; 0); // &quot;-1&quot;</span><br></pre></td></tr></table></figure></p>\n<p>2.该回调函数可以传入三个参数，依次为当前值，当前索引，原数组。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1,2,3,4,5].find(function(value, index, arr)&#123;</span><br><span class=\"line\">    return value &gt; 4;</span><br><span class=\"line\">&#125;); // &quot;5&quot;</span><br></pre></td></tr></table></figure></p>\n<p>3.数组findIndex()方法和index()方法非常类似，返回第一个符合条件成员的索引位置，如果没有则返回-1。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1,2,3,4,5].findIndex(function(value, index, arr)&#123;</span><br><span class=\"line\">    return value &gt; 4;</span><br><span class=\"line\">&#125;); // 4</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注：这两个函数都可以接受第二个参数，用来绑定回调函数的this对象。另外这两个方法都可以发现NaN，弥补了indexOf方法的不足。 </p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[NaN].findIndex( y =&gt; Object.is(NaN, y)); // 0</span><br></pre></td></tr></table></figure>\n<h1 id=\"数组实例的fill\"><a href=\"#数组实例的fill\" class=\"headerlink\" title=\"数组实例的fill()\"></a>数组实例的fill()</h1><h2 id=\"含义：-4\"><a href=\"#含义：-4\" class=\"headerlink\" title=\"含义：\"></a>含义：</h2><p>1.fill方法使用给定值，填充一个数组。示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;].fill(7); // [7,7,7]</span><br></pre></td></tr></table></figure></p>\n<p>2.该方法还接受第二和第三个参数，用于指定填充的起始位置和结束位置。示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;].fill(7, 0, 1); // [7,&apos;b&apos;,&apos;c&apos;]</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注：该方法用于空数组初始化非常方便，数组中已有的元素会全部被抹去。 </p>\n</blockquote>\n<h1 id=\"数组实例的entries-，keys-和values\"><a href=\"#数组实例的entries-，keys-和values\" class=\"headerlink\" title=\"数组实例的entries()，keys()和values()\"></a>数组实例的entries()，keys()和values()</h1><h2 id=\"含义：-5\"><a href=\"#含义：-5\" class=\"headerlink\" title=\"含义：\"></a>含义：</h2><p>1.这三个方法都返回一个iterator对象，可以用for…of来遍历，keys()是遍历键，values()是遍历值，entries()是遍历键值对。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for(let key of [&apos;a&apos;, &apos;b&apos;].keys())&#123;</span><br><span class=\"line\">    console.log(key);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 0</span><br><span class=\"line\">// 1</span><br><span class=\"line\"></span><br><span class=\"line\">for(let value of [&apos;a&apos;, &apos;b&apos;].values())&#123;</span><br><span class=\"line\">    console.log(value)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// &apos;a&apos;</span><br><span class=\"line\">// &apos;b&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">for(let [key, value] of [&apos;a&apos;, &apos;b&apos;].entries())&#123;</span><br><span class=\"line\">    console.log(key, value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  // 0 &apos;a&apos;</span><br><span class=\"line\">  // 1 &apos;b&apos;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"数组实例的includes\"><a href=\"#数组实例的includes\" class=\"headerlink\" title=\"数组实例的includes()\"></a>数组实例的includes()</h1><h2 id=\"含义：-6\"><a href=\"#含义：-6\" class=\"headerlink\" title=\"含义：\"></a>含义：</h2><p>1.Array.prototype.includes方法返回一个布尔值，表示某个数组是否包含给定的值，与字符串includes方法类似。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1,2,3].includes(3); // true</span><br><span class=\"line\">[1,2,NaN].includes(NaN); //true</span><br></pre></td></tr></table></figure></p>\n<p>2.该方法的第二个参数表示搜索的起始位置，默认为0，如果第二个参数为负数，则表示倒数位置。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1,2,3].includes(2, 2); // false</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注：includes()方法需要与Map和Set的has()方法进行区分。 </p>\n</blockquote>\n<h1 id=\"数组的空位\"><a href=\"#数组的空位\" class=\"headerlink\" title=\"数组的空位\"></a>数组的空位</h1><h2 id=\"含义：-7\"><a href=\"#含义：-7\" class=\"headerlink\" title=\"含义：\"></a>含义：</h2><p>1.数组的空位指数组的某一个位置上没有任何值，注意，空位不是undefined。</p>\n<p>2.ES6明确了将空位转换成undefined，但Array.from会将空位转换成undefined。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Array.from([1,,2]); // [1, undefined, 2]</span><br></pre></td></tr></table></figure></p>\n<p>3.扩展运算符(…)也会将空位转换成undefined。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[...[1,,2]] // [1, undefined, 2]</span><br></pre></td></tr></table></figure></p>\n<ol start=\"4\">\n<li>copyWithin()会连空位一起拷贝，fill()会将空位视为正常的数组位置，for…of循环也会遍历空位。</li>\n</ol>\n<blockquote>\n<p>注：由于空位处理的规则不统一，所以要避免出现空位。 </p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"扩展运算符\"><a href=\"#扩展运算符\" class=\"headerlink\" title=\"扩展运算符\"></a>扩展运算符</h1><h2 id=\"含义\"><a href=\"#含义\" class=\"headerlink\" title=\"含义:\"></a>含义:</h2><p>1.扩展运算符(…)将一个数组转为 <strong>用逗号分隔的</strong> 参数序列。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(...[1, 2, 3]);</span><br></pre></td></tr></table></figure></p>\n<p>2.扩展运算符主要用于函数调用。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function push(arr, ...items) &#123;</span><br><span class=\"line\">    arr.push(...items);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function add(x, y) &#123;</span><br><span class=\"line\">    return x + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const arr = [4, 30];</span><br><span class=\"line\">add(...arr); // 34</span><br></pre></td></tr></table></figure></p>\n<p>3.扩展运算符与正常函数参数相结合使用。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function f(v, w, x, y, z) &#123;&#125;</span><br><span class=\"line\">const args = [0, 1];</span><br><span class=\"line\">f(-1, ...args, 2, ...[3]);</span><br></pre></td></tr></table></figure></p>\n<p>4.扩展运算符后可以使用表达式。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const arr1 = [</span><br><span class=\"line\">    ...(x &gt; 0 ? [&apos;a&apos;] : []),</span><br><span class=\"line\">    &apos;b&apos;</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure></p>\n<p>5.如果扩展运算符后是一个空数组，则不产生任何效果。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[...[], 1]; // [1]</span><br></pre></td></tr></table></figure></p>\n<p>##扩展运算符替代数组的apply方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// es5写法</span><br><span class=\"line\">function f(x, y, z) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var args1 = [0, 1, 2];</span><br><span class=\"line\">f.apply(null, args1);</span><br><span class=\"line\"></span><br><span class=\"line\">// es6写法</span><br><span class=\"line\">function f(x, y, z) &#123;&#125;</span><br><span class=\"line\">let args2 = [0, 1, 2];</span><br><span class=\"line\">f(...args2);</span><br><span class=\"line\"></span><br><span class=\"line\">// 示例</span><br><span class=\"line\">Math.max(...[14, 3, 77]);</span><br><span class=\"line\">let arr2 = [0, 1, 2];</span><br><span class=\"line\">let arr3 = [3, 4, 5];</span><br><span class=\"line\">arr2.push(...arr3);</span><br><span class=\"line\">new Date(...[2015, 1, 1]);</span><br></pre></td></tr></table></figure></p>\n<p>##扩展运算符的应用<br>1.复制数组<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const a1 = [1, 2];</span><br><span class=\"line\">const a2 = [...a1]; // a2是a1的克隆</span><br></pre></td></tr></table></figure></p>\n<p>2.合并数组<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr4 = [&apos;a&apos;, &apos;b&apos;];</span><br><span class=\"line\">var arr5 = [&apos;c&apos;, &apos;d&apos;];</span><br><span class=\"line\">var arr6 = [&apos;f&apos;];</span><br><span class=\"line\">[...arr4, ...arr5, ...arr6];</span><br></pre></td></tr></table></figure></p>\n<p>3.与解构赋值结合(扩展运算符用于赋值只能放到参数的最后一位，否则会报错)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const [a, ...result] = [1, 2, 3, 4, 5];</span><br><span class=\"line\">console.log(a); // 1</span><br><span class=\"line\">console.log(result); // [2,3,4,5]</span><br><span class=\"line\"></span><br><span class=\"line\">const [b, ...result1] = [&quot;foo&quot;];</span><br><span class=\"line\">console.log(b); //foo</span><br><span class=\"line\">console.log(result1); // []</span><br></pre></td></tr></table></figure></p>\n<p>4.字符串(将字符串转化为真正的数组)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[...&quot;hello&quot;]; // [&apos;h&apos;,&apos;e&apos;,&apos;l&apos;,&apos;l&apos;,&apos;o&apos;]</span><br><span class=\"line\">function length(str) &#123;</span><br><span class=\"line\">    return [...str].length;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>5.实现了Iterator接口的对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let nodeList = document.querySelectorAll(&apos;div&apos;);</span><br><span class=\"line\">// querySelectorAll返回一个nodeList对象，它是一个类数组的对象，并且实现了Iterator接口，所有可以转化为数组</span><br><span class=\"line\">let array = [...nodeList];</span><br></pre></td></tr></table></figure></p>\n<p>6.Map和Set结构，Generator函数<br>扩展运算符内部调用的是数据结构Iterator接口，因此只要具有Iterator接口的对象，都可以使用扩展运算符，比如Map和Set。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let map = new Map([</span><br><span class=\"line\">    [1, &apos;one&apos;],</span><br><span class=\"line\">    [2, &apos;two&apos;],</span><br><span class=\"line\">    [3, &apos;three&apos;],</span><br><span class=\"line\">]);</span><br><span class=\"line\">let arr7 = [...map.keys()];</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"Array-from方法\"><a href=\"#Array-from方法\" class=\"headerlink\" title=\"Array.from方法\"></a>Array.from方法</h1><h2 id=\"含义：\"><a href=\"#含义：\" class=\"headerlink\" title=\"含义：\"></a>含义：</h2><p>1.Array.from方法将两类对象转换为真正的数组对象：类数组对象和可遍历对象。<br>任何具有length属性的对象都可以通过Array.from方法转换为数组。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arrayLike = &#123;</span><br><span class=\"line\">    &apos;0&apos;: &apos;a&apos;,</span><br><span class=\"line\">    &apos;1&apos;: &apos;b&apos;,</span><br><span class=\"line\">    &apos;2&apos;: &apos;c&apos;,</span><br><span class=\"line\">    length: 3</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">// es5的写法</span><br><span class=\"line\">var arr = [].slice.call(arrayLike); // [&apos;a&apos;,&apos;b&apos;,&apos;c&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\">// es6的写法</span><br><span class=\"line\">var arr = Array.from(arrayLike); // [&apos;a&apos;,&apos;b&apos;,&apos;c&apos;]</span><br></pre></td></tr></table></figure></p>\n<p>2.将Dom操作返回的NodeList集合转换为数组。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let ps = document.querySelectorAll(&apos;p&apos;);</span><br><span class=\"line\">Array.from(ps).forEach(function(p) &#123;</span><br><span class=\"line\">    console.log(p);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>3.将部署了Iterator接口的数据结构转换为数组。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Array.from(&apos;hello&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">let namesSet = new Set([&apos;a&apos;, &apos;b&apos;]);</span><br><span class=\"line\">Array.from(namesSet);</span><br></pre></td></tr></table></figure></p>\n<p>4.Array.from方法还接受第二个参数，作用类似于数组的map方法，对每个元素进行处理，将处理后的值放入返回的数组。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Array.from([1,2,3], x=&gt;x*2);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Array-from方法的应用\"><a href=\"#Array-from方法的应用\" class=\"headerlink\" title=\"Array.from方法的应用\"></a>Array.from方法的应用</h2><p>1.取出Dom节点的文本内容。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let spans = document.querySelectorAll(&apos;span.name&apos;);</span><br><span class=\"line\">    let names = Array.from(spans, dom=&gt;dom.textContent);</span><br></pre></td></tr></table></figure></p>\n<p>2.返回数据类型<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function typesOf ()&#123;</span><br><span class=\"line\">        return Array.from(arguments, value =&gt; typeOf value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    typesOf(null, [], NaN); // [&apos;object&apos;, &apos;object&apos;, &apos;number&apos;]</span><br></pre></td></tr></table></figure></p>\n<p>3.返回字符串的长度，避免JavaScript将大于\\uFFFF的Unicode字符，算作两个字符的bug。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function stringLength (str)&#123;</span><br><span class=\"line\">        return Array.from(str).length;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"Array-of方法\"><a href=\"#Array-of方法\" class=\"headerlink\" title=\"Array.of方法\"></a>Array.of方法</h1><h2 id=\"含义：-1\"><a href=\"#含义：-1\" class=\"headerlink\" title=\"含义：\"></a>含义：</h2><p>1.Array.of用于将一组值转换为数组。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Array.of(3, 11, 8);</span><br><span class=\"line\">Array.of(3);</span><br><span class=\"line\">Array.of(3).length;</span><br></pre></td></tr></table></figure></p>\n<p>2.Array.of是弥补数组构造函数Array()的不足，因为给构造函数传入一个参数的话是设置数组的length值。</p>\n<p>3.Array.of总是返回参数值组成的数组，如果没有参数则返回空数组。</p>\n<h1 id=\"数组实例的copyWithin\"><a href=\"#数组实例的copyWithin\" class=\"headerlink\" title=\"数组实例的copyWithin()\"></a>数组实例的copyWithin()</h1><h2 id=\"含义：-2\"><a href=\"#含义：-2\" class=\"headerlink\" title=\"含义：\"></a>含义：</h2><p>1.数组实例的copyWithin()方法，在当前数组内部，将指定位置的成员复制到其他位置(会覆盖原有成员)，然后返回当前数组，会修改当前数组。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Array.prototype.copyWithin(target, start = 0, end = length);</span><br></pre></td></tr></table></figure></p>\n<p>2.这个方法接受三个参数：<br>  1.target(必需)：从该位置替换数组，指定要替换的位置。<br>  2.start(可选)：从该位置开始读取数据，默认为0，如果为负数，则表示倒数。<br>  3.end(可选)：到该位置停止读取数据，默认为数组长度，如果为负，表示倒数。</p>\n<blockquote>\n<p>注：start和end两个参数是用来指定要复制的内容的。 </p>\n</blockquote>\n<p>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1,2,3,4,5].copyWithin(0, 3); // &quot;[4,5,3,5,4]&quot;</span><br><span class=\"line\">[1,2,3,4,5].copyWithin(0, 3, 4); // &quot;[4,2,3,4,5]&quot;</span><br><span class=\"line\">let arr = [1,2,3,4,5];</span><br><span class=\"line\">arr.copyWithin(0, 3, 4); // &quot;[4,2,3,4,5]&quot;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"数组实例的find-和findIndex\"><a href=\"#数组实例的find-和findIndex\" class=\"headerlink\" title=\"数组实例的find()和findIndex()\"></a>数组实例的find()和findIndex()</h1><h2 id=\"含义：-3\"><a href=\"#含义：-3\" class=\"headerlink\" title=\"含义：\"></a>含义：</h2><p>1.数组find()方法，用于找出第一个符合条件的数组成员，它的参数是一个回调函数，所有成员依次执行该回调函数，直到找到第一个返回值为true的成员，并返回，如果没有，则返回undefined。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1,2,3,-1,5].find((n) =&gt; n &lt; 0); // &quot;-1&quot;</span><br></pre></td></tr></table></figure></p>\n<p>2.该回调函数可以传入三个参数，依次为当前值，当前索引，原数组。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1,2,3,4,5].find(function(value, index, arr)&#123;</span><br><span class=\"line\">    return value &gt; 4;</span><br><span class=\"line\">&#125;); // &quot;5&quot;</span><br></pre></td></tr></table></figure></p>\n<p>3.数组findIndex()方法和index()方法非常类似，返回第一个符合条件成员的索引位置，如果没有则返回-1。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1,2,3,4,5].findIndex(function(value, index, arr)&#123;</span><br><span class=\"line\">    return value &gt; 4;</span><br><span class=\"line\">&#125;); // 4</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注：这两个函数都可以接受第二个参数，用来绑定回调函数的this对象。另外这两个方法都可以发现NaN，弥补了indexOf方法的不足。 </p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[NaN].findIndex( y =&gt; Object.is(NaN, y)); // 0</span><br></pre></td></tr></table></figure>\n<h1 id=\"数组实例的fill\"><a href=\"#数组实例的fill\" class=\"headerlink\" title=\"数组实例的fill()\"></a>数组实例的fill()</h1><h2 id=\"含义：-4\"><a href=\"#含义：-4\" class=\"headerlink\" title=\"含义：\"></a>含义：</h2><p>1.fill方法使用给定值，填充一个数组。示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;].fill(7); // [7,7,7]</span><br></pre></td></tr></table></figure></p>\n<p>2.该方法还接受第二和第三个参数，用于指定填充的起始位置和结束位置。示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;].fill(7, 0, 1); // [7,&apos;b&apos;,&apos;c&apos;]</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注：该方法用于空数组初始化非常方便，数组中已有的元素会全部被抹去。 </p>\n</blockquote>\n<h1 id=\"数组实例的entries-，keys-和values\"><a href=\"#数组实例的entries-，keys-和values\" class=\"headerlink\" title=\"数组实例的entries()，keys()和values()\"></a>数组实例的entries()，keys()和values()</h1><h2 id=\"含义：-5\"><a href=\"#含义：-5\" class=\"headerlink\" title=\"含义：\"></a>含义：</h2><p>1.这三个方法都返回一个iterator对象，可以用for…of来遍历，keys()是遍历键，values()是遍历值，entries()是遍历键值对。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for(let key of [&apos;a&apos;, &apos;b&apos;].keys())&#123;</span><br><span class=\"line\">    console.log(key);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 0</span><br><span class=\"line\">// 1</span><br><span class=\"line\"></span><br><span class=\"line\">for(let value of [&apos;a&apos;, &apos;b&apos;].values())&#123;</span><br><span class=\"line\">    console.log(value)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// &apos;a&apos;</span><br><span class=\"line\">// &apos;b&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">for(let [key, value] of [&apos;a&apos;, &apos;b&apos;].entries())&#123;</span><br><span class=\"line\">    console.log(key, value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  // 0 &apos;a&apos;</span><br><span class=\"line\">  // 1 &apos;b&apos;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"数组实例的includes\"><a href=\"#数组实例的includes\" class=\"headerlink\" title=\"数组实例的includes()\"></a>数组实例的includes()</h1><h2 id=\"含义：-6\"><a href=\"#含义：-6\" class=\"headerlink\" title=\"含义：\"></a>含义：</h2><p>1.Array.prototype.includes方法返回一个布尔值，表示某个数组是否包含给定的值，与字符串includes方法类似。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1,2,3].includes(3); // true</span><br><span class=\"line\">[1,2,NaN].includes(NaN); //true</span><br></pre></td></tr></table></figure></p>\n<p>2.该方法的第二个参数表示搜索的起始位置，默认为0，如果第二个参数为负数，则表示倒数位置。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1,2,3].includes(2, 2); // false</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注：includes()方法需要与Map和Set的has()方法进行区分。 </p>\n</blockquote>\n<h1 id=\"数组的空位\"><a href=\"#数组的空位\" class=\"headerlink\" title=\"数组的空位\"></a>数组的空位</h1><h2 id=\"含义：-7\"><a href=\"#含义：-7\" class=\"headerlink\" title=\"含义：\"></a>含义：</h2><p>1.数组的空位指数组的某一个位置上没有任何值，注意，空位不是undefined。</p>\n<p>2.ES6明确了将空位转换成undefined，但Array.from会将空位转换成undefined。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Array.from([1,,2]); // [1, undefined, 2]</span><br></pre></td></tr></table></figure></p>\n<p>3.扩展运算符(…)也会将空位转换成undefined。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[...[1,,2]] // [1, undefined, 2]</span><br></pre></td></tr></table></figure></p>\n<ol start=\"4\">\n<li>copyWithin()会连空位一起拷贝，fill()会将空位视为正常的数组位置，for…of循环也会遍历空位。</li>\n</ol>\n<blockquote>\n<p>注：由于空位处理的规则不统一，所以要避免出现空位。 </p>\n</blockquote>\n"},{"title":"CSS动画知多少","date":"2018-02-02T15:15:52.000Z","description":"CSS动画入门","_content":"# CSS3动画\n\n### CSS3动画的优势：\n\n\t- 运行效果流畅，浏览器会去性能优化\n\t- 不借助js就能实现动画\n\n### CSS3动画的劣势：\n\n\t- 兼容性不足\n\t- 范围应用不足\n\n## Transition\n---\n过渡动画，在引入Transition属性之前，CSS是没有时间轴概念的，所有的状态都是瞬时完成。\n\n### Transition属性\n\n1. transition-property：\n\t\n\t用来声明transition中会被用到的属性，例如：`transition-property: width;`，如果想设置所有属性可以写all。\n\n2. transition-duration：\n\n\t用来声明动画的持续时间，可以是秒s也可以是毫秒ms。例如：\n\n\t```css\n\tdiv {\n\t    trasition-duration: 1s;\n\t}\n\t\n\tdiv {\n\t    trasition-duration: 100ms;\n\t}\n\t```\n\n3. transition-timing-function:\n\t\n\t该属性声明了动画的缓动类型，默认值为ease，慢慢加速，到中间减速，最后缓慢到达终点。比较常用的属性有：linear匀速，cubic-bezier贝塞尔曲线\n\n4. transition-delay:\n\n\t声明了动画开始的延时时间，例如：\n\n\t```css\n\tdiv {\n\t    trasition-delay: 1s;\n\t}\n\t```\n\n5. transition简写：\n\n\t使用transition属性可以将上述属性值合并到一起，例如：\n\n\t```css\n\tdiv {\n\t    transition-property: all;\n\t    trasition-duration: 1s;\n\t    transition-timing-function: linear;\n\t    trasition-delay: 1s;\n\t}\n\t\n\tdiv {\n\t    transition: all 1s linear 1s\n\t}\n\t```\n\n## Animation\n---\n\n由于transition需要触发，并且只能执行一次，并不能定义中间状态。于是CSS3又引入了Animation属性。\n\n### Animation属性\n\n1. 定义keyframes:\n\t\n\tkeyframes是定义的动画名称，里面是动画要产生的效果。例如：\n\n\t```css\n\t@keyframes show {\n\t    0% {\n\t        color: red;\n\t    }\n\t    50% {\n\t        color: yellow;\n\t    }\n\t    100% {\n\t        color: green;\n\t    }\n\t}\n\t```\n\n2. animation-name：\n\n\t指定动画的名称，也就是keyframes定义的名字。例如：\n\n\t```css\n\tdiv {\n\t    animation-name: show;\n\t}\n\t```\n\n3. animation-duration:\n\n\t动画执行时间，与transition使用方法一样。\n\n4. animation-timing-function:\n\n\t动画缓动类型，与transition使用方法一样。\n\n5. animation-delay:\n\n\t动画延迟时间，与transition使用方法一样。\n\n6. animation-iteration-count:\n\t\n\t指定动画的循环次数，例如：无限循环`animation-iteration-count: infinite`\n\n7. animation-direction:\n\n\t定义动画的执行顺序，该属性有如下属性值：\n\n\t\t- normal：默认值，从0%到100%。\n\t\t- reverse：从100%到0%。\n\t\t- alternate：动画在0%到100%反复执行。\n\t\t- alternate-reverse: 动画在100%到0%反复执行。\n\n## Transform\n---\n\ntransform属性应用于元素 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。\n\n### Transform属性值\n\n1. translate3d：\n\n\t该值可以将元素在x-y-z平面内做平移，且不会影响到其他元素，还会开启硬件加速。例如：\n\n\t```css\n\tdiv {\n\t    transform: translate3d(10px 10px 10px);\n\t}\n\t```\n\n2. rotate：\n\n\t该属性值可以将元素进行旋转，参数为0deg到360deg，可以将deg理解为旋转多少度。\n\n3. skew： \n\n\t该属性值可以将元素进行扭曲，需要指定x轴和y轴的扭曲角度。\n\n4. matrix：\n\n\t该值是所有2d效果的方法总和。\n\n\n","source":"_posts/CSS动画知多少.md","raw":"---\ntitle: CSS动画知多少\ndate: 2018-02-02 23:15:52\ncategories: css\ntags:\n     - css\ndescription: CSS动画入门\n---\n# CSS3动画\n\n### CSS3动画的优势：\n\n\t- 运行效果流畅，浏览器会去性能优化\n\t- 不借助js就能实现动画\n\n### CSS3动画的劣势：\n\n\t- 兼容性不足\n\t- 范围应用不足\n\n## Transition\n---\n过渡动画，在引入Transition属性之前，CSS是没有时间轴概念的，所有的状态都是瞬时完成。\n\n### Transition属性\n\n1. transition-property：\n\t\n\t用来声明transition中会被用到的属性，例如：`transition-property: width;`，如果想设置所有属性可以写all。\n\n2. transition-duration：\n\n\t用来声明动画的持续时间，可以是秒s也可以是毫秒ms。例如：\n\n\t```css\n\tdiv {\n\t    trasition-duration: 1s;\n\t}\n\t\n\tdiv {\n\t    trasition-duration: 100ms;\n\t}\n\t```\n\n3. transition-timing-function:\n\t\n\t该属性声明了动画的缓动类型，默认值为ease，慢慢加速，到中间减速，最后缓慢到达终点。比较常用的属性有：linear匀速，cubic-bezier贝塞尔曲线\n\n4. transition-delay:\n\n\t声明了动画开始的延时时间，例如：\n\n\t```css\n\tdiv {\n\t    trasition-delay: 1s;\n\t}\n\t```\n\n5. transition简写：\n\n\t使用transition属性可以将上述属性值合并到一起，例如：\n\n\t```css\n\tdiv {\n\t    transition-property: all;\n\t    trasition-duration: 1s;\n\t    transition-timing-function: linear;\n\t    trasition-delay: 1s;\n\t}\n\t\n\tdiv {\n\t    transition: all 1s linear 1s\n\t}\n\t```\n\n## Animation\n---\n\n由于transition需要触发，并且只能执行一次，并不能定义中间状态。于是CSS3又引入了Animation属性。\n\n### Animation属性\n\n1. 定义keyframes:\n\t\n\tkeyframes是定义的动画名称，里面是动画要产生的效果。例如：\n\n\t```css\n\t@keyframes show {\n\t    0% {\n\t        color: red;\n\t    }\n\t    50% {\n\t        color: yellow;\n\t    }\n\t    100% {\n\t        color: green;\n\t    }\n\t}\n\t```\n\n2. animation-name：\n\n\t指定动画的名称，也就是keyframes定义的名字。例如：\n\n\t```css\n\tdiv {\n\t    animation-name: show;\n\t}\n\t```\n\n3. animation-duration:\n\n\t动画执行时间，与transition使用方法一样。\n\n4. animation-timing-function:\n\n\t动画缓动类型，与transition使用方法一样。\n\n5. animation-delay:\n\n\t动画延迟时间，与transition使用方法一样。\n\n6. animation-iteration-count:\n\t\n\t指定动画的循环次数，例如：无限循环`animation-iteration-count: infinite`\n\n7. animation-direction:\n\n\t定义动画的执行顺序，该属性有如下属性值：\n\n\t\t- normal：默认值，从0%到100%。\n\t\t- reverse：从100%到0%。\n\t\t- alternate：动画在0%到100%反复执行。\n\t\t- alternate-reverse: 动画在100%到0%反复执行。\n\n## Transform\n---\n\ntransform属性应用于元素 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。\n\n### Transform属性值\n\n1. translate3d：\n\n\t该值可以将元素在x-y-z平面内做平移，且不会影响到其他元素，还会开启硬件加速。例如：\n\n\t```css\n\tdiv {\n\t    transform: translate3d(10px 10px 10px);\n\t}\n\t```\n\n2. rotate：\n\n\t该属性值可以将元素进行旋转，参数为0deg到360deg，可以将deg理解为旋转多少度。\n\n3. skew： \n\n\t该属性值可以将元素进行扭曲，需要指定x轴和y轴的扭曲角度。\n\n4. matrix：\n\n\t该值是所有2d效果的方法总和。\n\n\n","slug":"CSS动画知多少","published":1,"updated":"2018-02-03T01:34:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjksf3cvw0002h8ef812vnra8","content":"<h1 id=\"CSS3动画\"><a href=\"#CSS3动画\" class=\"headerlink\" title=\"CSS3动画\"></a>CSS3动画</h1><h3 id=\"CSS3动画的优势：\"><a href=\"#CSS3动画的优势：\" class=\"headerlink\" title=\"CSS3动画的优势：\"></a>CSS3动画的优势：</h3><pre><code>- 运行效果流畅，浏览器会去性能优化\n- 不借助js就能实现动画\n</code></pre><h3 id=\"CSS3动画的劣势：\"><a href=\"#CSS3动画的劣势：\" class=\"headerlink\" title=\"CSS3动画的劣势：\"></a>CSS3动画的劣势：</h3><pre><code>- 兼容性不足\n- 范围应用不足\n</code></pre><h2 id=\"Transition\"><a href=\"#Transition\" class=\"headerlink\" title=\"Transition\"></a>Transition</h2><hr>\n<p>过渡动画，在引入Transition属性之前，CSS是没有时间轴概念的，所有的状态都是瞬时完成。</p>\n<h3 id=\"Transition属性\"><a href=\"#Transition属性\" class=\"headerlink\" title=\"Transition属性\"></a>Transition属性</h3><ol>\n<li><p>transition-property：</p>\n<p> 用来声明transition中会被用到的属性，例如：<code>transition-property: width;</code>，如果想设置所有属性可以写all。</p>\n</li>\n<li><p>transition-duration：</p>\n<p> 用来声明动画的持续时间，可以是秒s也可以是毫秒ms。例如：</p>\n <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">trasition-duration</span>: <span class=\"number\">1s</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">trasition-duration</span>: <span class=\"number\">100ms</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>transition-timing-function:</p>\n<p> 该属性声明了动画的缓动类型，默认值为ease，慢慢加速，到中间减速，最后缓慢到达终点。比较常用的属性有：linear匀速，cubic-bezier贝塞尔曲线</p>\n</li>\n<li><p>transition-delay:</p>\n<p> 声明了动画开始的延时时间，例如：</p>\n <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">trasition-delay</span>: <span class=\"number\">1s</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>transition简写：</p>\n<p> 使用transition属性可以将上述属性值合并到一起，例如：</p>\n <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">transition-property</span>: all;</span><br><span class=\"line\">    <span class=\"attribute\">trasition-duration</span>: <span class=\"number\">1s</span>;</span><br><span class=\"line\">    <span class=\"attribute\">transition-timing-function</span>: linear;</span><br><span class=\"line\">    <span class=\"attribute\">trasition-delay</span>: <span class=\"number\">1s</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">transition</span>: all <span class=\"number\">1s</span> linear <span class=\"number\">1s</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"Animation\"><a href=\"#Animation\" class=\"headerlink\" title=\"Animation\"></a>Animation</h2><hr>\n<p>由于transition需要触发，并且只能执行一次，并不能定义中间状态。于是CSS3又引入了Animation属性。</p>\n<h3 id=\"Animation属性\"><a href=\"#Animation属性\" class=\"headerlink\" title=\"Animation属性\"></a>Animation属性</h3><ol>\n<li><p>定义keyframes:</p>\n<p> keyframes是定义的动画名称，里面是动画要产生的效果。例如：</p>\n <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">keyframes</span> show &#123;</span><br><span class=\"line\">    0% &#123;</span><br><span class=\"line\">        <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    50% &#123;</span><br><span class=\"line\">        <span class=\"attribute\">color</span>: yellow;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    100% &#123;</span><br><span class=\"line\">        <span class=\"attribute\">color</span>: green;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>animation-name：</p>\n<p> 指定动画的名称，也就是keyframes定义的名字。例如：</p>\n <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">animation-name</span>: show;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>animation-duration:</p>\n<p> 动画执行时间，与transition使用方法一样。</p>\n</li>\n<li><p>animation-timing-function:</p>\n<p> 动画缓动类型，与transition使用方法一样。</p>\n</li>\n<li><p>animation-delay:</p>\n<p> 动画延迟时间，与transition使用方法一样。</p>\n</li>\n<li><p>animation-iteration-count:</p>\n<p> 指定动画的循环次数，例如：无限循环<code>animation-iteration-count: infinite</code></p>\n</li>\n<li><p>animation-direction:</p>\n<p> 定义动画的执行顺序，该属性有如下属性值：</p>\n<pre><code>- normal：默认值，从0%到100%。\n- reverse：从100%到0%。\n- alternate：动画在0%到100%反复执行。\n- alternate-reverse: 动画在100%到0%反复执行。\n</code></pre></li>\n</ol>\n<h2 id=\"Transform\"><a href=\"#Transform\" class=\"headerlink\" title=\"Transform\"></a>Transform</h2><hr>\n<p>transform属性应用于元素 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。</p>\n<h3 id=\"Transform属性值\"><a href=\"#Transform属性值\" class=\"headerlink\" title=\"Transform属性值\"></a>Transform属性值</h3><ol>\n<li><p>translate3d：</p>\n<p> 该值可以将元素在x-y-z平面内做平移，且不会影响到其他元素，还会开启硬件加速。例如：</p>\n <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate3d</span>(10px 10px 10px);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>rotate：</p>\n<p> 该属性值可以将元素进行旋转，参数为0deg到360deg，可以将deg理解为旋转多少度。</p>\n</li>\n<li><p>skew： </p>\n<p> 该属性值可以将元素进行扭曲，需要指定x轴和y轴的扭曲角度。</p>\n</li>\n<li><p>matrix：</p>\n<p> 该值是所有2d效果的方法总和。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"CSS3动画\"><a href=\"#CSS3动画\" class=\"headerlink\" title=\"CSS3动画\"></a>CSS3动画</h1><h3 id=\"CSS3动画的优势：\"><a href=\"#CSS3动画的优势：\" class=\"headerlink\" title=\"CSS3动画的优势：\"></a>CSS3动画的优势：</h3><pre><code>- 运行效果流畅，浏览器会去性能优化\n- 不借助js就能实现动画\n</code></pre><h3 id=\"CSS3动画的劣势：\"><a href=\"#CSS3动画的劣势：\" class=\"headerlink\" title=\"CSS3动画的劣势：\"></a>CSS3动画的劣势：</h3><pre><code>- 兼容性不足\n- 范围应用不足\n</code></pre><h2 id=\"Transition\"><a href=\"#Transition\" class=\"headerlink\" title=\"Transition\"></a>Transition</h2><hr>\n<p>过渡动画，在引入Transition属性之前，CSS是没有时间轴概念的，所有的状态都是瞬时完成。</p>\n<h3 id=\"Transition属性\"><a href=\"#Transition属性\" class=\"headerlink\" title=\"Transition属性\"></a>Transition属性</h3><ol>\n<li><p>transition-property：</p>\n<p> 用来声明transition中会被用到的属性，例如：<code>transition-property: width;</code>，如果想设置所有属性可以写all。</p>\n</li>\n<li><p>transition-duration：</p>\n<p> 用来声明动画的持续时间，可以是秒s也可以是毫秒ms。例如：</p>\n <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">trasition-duration</span>: <span class=\"number\">1s</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">trasition-duration</span>: <span class=\"number\">100ms</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>transition-timing-function:</p>\n<p> 该属性声明了动画的缓动类型，默认值为ease，慢慢加速，到中间减速，最后缓慢到达终点。比较常用的属性有：linear匀速，cubic-bezier贝塞尔曲线</p>\n</li>\n<li><p>transition-delay:</p>\n<p> 声明了动画开始的延时时间，例如：</p>\n <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">trasition-delay</span>: <span class=\"number\">1s</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>transition简写：</p>\n<p> 使用transition属性可以将上述属性值合并到一起，例如：</p>\n <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">transition-property</span>: all;</span><br><span class=\"line\">    <span class=\"attribute\">trasition-duration</span>: <span class=\"number\">1s</span>;</span><br><span class=\"line\">    <span class=\"attribute\">transition-timing-function</span>: linear;</span><br><span class=\"line\">    <span class=\"attribute\">trasition-delay</span>: <span class=\"number\">1s</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">transition</span>: all <span class=\"number\">1s</span> linear <span class=\"number\">1s</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"Animation\"><a href=\"#Animation\" class=\"headerlink\" title=\"Animation\"></a>Animation</h2><hr>\n<p>由于transition需要触发，并且只能执行一次，并不能定义中间状态。于是CSS3又引入了Animation属性。</p>\n<h3 id=\"Animation属性\"><a href=\"#Animation属性\" class=\"headerlink\" title=\"Animation属性\"></a>Animation属性</h3><ol>\n<li><p>定义keyframes:</p>\n<p> keyframes是定义的动画名称，里面是动画要产生的效果。例如：</p>\n <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">keyframes</span> show &#123;</span><br><span class=\"line\">    0% &#123;</span><br><span class=\"line\">        <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    50% &#123;</span><br><span class=\"line\">        <span class=\"attribute\">color</span>: yellow;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    100% &#123;</span><br><span class=\"line\">        <span class=\"attribute\">color</span>: green;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>animation-name：</p>\n<p> 指定动画的名称，也就是keyframes定义的名字。例如：</p>\n <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">animation-name</span>: show;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>animation-duration:</p>\n<p> 动画执行时间，与transition使用方法一样。</p>\n</li>\n<li><p>animation-timing-function:</p>\n<p> 动画缓动类型，与transition使用方法一样。</p>\n</li>\n<li><p>animation-delay:</p>\n<p> 动画延迟时间，与transition使用方法一样。</p>\n</li>\n<li><p>animation-iteration-count:</p>\n<p> 指定动画的循环次数，例如：无限循环<code>animation-iteration-count: infinite</code></p>\n</li>\n<li><p>animation-direction:</p>\n<p> 定义动画的执行顺序，该属性有如下属性值：</p>\n<pre><code>- normal：默认值，从0%到100%。\n- reverse：从100%到0%。\n- alternate：动画在0%到100%反复执行。\n- alternate-reverse: 动画在100%到0%反复执行。\n</code></pre></li>\n</ol>\n<h2 id=\"Transform\"><a href=\"#Transform\" class=\"headerlink\" title=\"Transform\"></a>Transform</h2><hr>\n<p>transform属性应用于元素 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。</p>\n<h3 id=\"Transform属性值\"><a href=\"#Transform属性值\" class=\"headerlink\" title=\"Transform属性值\"></a>Transform属性值</h3><ol>\n<li><p>translate3d：</p>\n<p> 该值可以将元素在x-y-z平面内做平移，且不会影响到其他元素，还会开启硬件加速。例如：</p>\n <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate3d</span>(10px 10px 10px);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>rotate：</p>\n<p> 该属性值可以将元素进行旋转，参数为0deg到360deg，可以将deg理解为旋转多少度。</p>\n</li>\n<li><p>skew： </p>\n<p> 该属性值可以将元素进行扭曲，需要指定x轴和y轴的扭曲角度。</p>\n</li>\n<li><p>matrix：</p>\n<p> 该值是所有2d效果的方法总和。</p>\n</li>\n</ol>\n"},{"title":"ES6入门-Class","date":"2017-12-08T13:52:56.000Z","description":"ES6入门--Module","_content":"# 一、Class简介\n\n## 简介\n\n1.ES6的class可以看作是一个语法糖，只是让对象原型的写法更清晰，更像面向对象编程的语法而已。例如：\n```\nclass Point {\n\n    // 构造方法\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    // 方法之间不需要加逗号\n    toString() {\n        return '(' + this.x + ', ' + this.y + ')';\n    }\n}\n```\n\n2.ES6的类，完全可以看作是构造函数的另一种写法，例如：\n```\nclass Point {\n\n}\n\n// true\nPoint === Point.prototype.constructor\n```\n\n3.ES6类的所有方法都定义在类的prototype属性上面，例如：\n```\nclass Point {\n    // 定义在类的prototype属性上，也就是在原型上\n    constructor() {}\n\n    // 定义在类的prototype属性上，也就是在原型上\n    toString() {}\n}\n```\n\n4.使用Object.assign可以一次向类添加多个方法，例如：\n```\nObject.assign(Point.prototype, {\n    a() {},\n    b() {},\n    c() {}\n});\n```\n\n5.ES6定义的类内部所有定义的方法都是不可枚举的，也就是说不能使用Object.keys()遍历。但ES5中可以被枚举，这点要注意！\n\n6.类和模块的内部，默认就是严格模式。\n\n7.ES6中定义的类，必须使用new调用，否则会报错。ES5中定义的构造函数不用new也可以使用。\n\n8.ES6中的类不存在变量提升，这一点与ES5不同。\n\n# 二、constructor方法\n\n## 简介\n\n1.constructor方法是类的默认方法，通过new命令生成对象实例时，自动调用该方法。\n\n2.一个类必须有constructor方法，如果没有显式定义，JavaScript引擎则默认添加一个空的constructor方法。例如：\n```\nclass Point {\n\n}\n\n// 等同于\nclass Point {\n    constructor() {}\n}\n```\n\n3.constructor方法默认返回实例对象this，也可以指定返回另外一个对象。例如：\n```\nclass Foo {\n  constructor() {\n    return Object.create(null);\n  }\n}\n```\n\n# 三、类的实例对象\n\n## 简介\n\n1.与ES5一样，实例的属性除非显式定义在其本身（即定义在this对象上），否则都定义在原型上。例如：\n```\nclass Point {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  },\n  toString() {\n    return '(' + this.x + ', ' + this.y + ')';\n  }\n}\n\nvar point = new Point(2, 3);\n\n// 显式定义在其本身，返回true\npoint.hasOwnProperty('x');\npoint.hasOwnProperty('y');\n\n// 默认定义在原型上，返回false\npoint.hasOwnProperty('toString');\n\n// true\npoint.__proto__.hasOwnProperty('toString');\n```\n\n2.与ES5一样，类的所有实例共享一个原型对象，例如：\n```\nlet p1 = new Point(2, 3);\nlet p2 = new Point(3, 5);\n\np1.__proto__ === p2.__proto__;\n```\n\n3.我们可以通过实例的__proto__来获得原型对象，但是不建议在生产环境中使用该属性。推荐使用Object.getPrototypeOf()来获得实例的原型对象，再为原型添加属性和方法。\n\n# 四、class表达式\n\n## 简介\n\n1.与函数一样，类也可以使用表达式的形式定义，例如：\n```\n// 类的名字是MyClass，而不是Me，Me只在内部可用，指代当前类\nconst MyClass = class Me {\n  getClassName() {\n    return Me.name;\n  }\n}\n```\n\n2.采用Class表达式，可以写出立即执行的Class。例如：\n```\nlet person = new class {\n  constructor(name) {\n    this.name = name;\n  }\n\n  sayName() {\n    console.log(this.name);\n  }\n}('jack');\n\n// jack\nperson.sayName();\n```\n\n# 五、私有方法与私有属性\n\n## 简介\n\n1.ES6不提供私有方法，只能通过变通方法模拟实现，方法有三种：\n(1)命名上加以区别，这种做法是不保险的，在类的外部还是可以访问到。例如：\n```\nclass Widget {\n  foo(baz) {\n    this._bar(baz);\n  }\n\n  // 私有方法\n  _bar(baz) {\n    return this.snaf = baz;\n  }\n}\n```\n\n(2)将私有方法移出模块。例如：\n```\nclass Widget {\n  foo(baz) {\n    bar.call(this, baz);\n  }\n}\n\nfunction bar(baz) {\n  return this.snaf = baz;\n}\n```\n\n(3)利用Symbol的唯一性。例如：\n```\nconst bar = Symbol('bar');\nconst snaf = Symbol('snaf');\n\nexport default class myClass {\n  foo(baz) {\n    this[bar](baz);\n  }\n\n  [bar](baz) {\n    return this[snaf] = baz;\n  }\n};\n```\n\n2.与私有方法一样，ES6不支持私有属性，但是有一个提案，方法是在属性名前加#，表示私有属性。例如：\n```\nclass Point {\n  #x;\n}\n```\n\n3.私有属性可以有初始值，在构造函数执行时进行初始化。例如：\n```\nclass Point {\n  #x = 0;\n  constructor {\n    #x; // 0\n  }\n}\n```\n\n# 六、this的指向\n\n## 简介\n\n1.类的方法内部如果含有this，它默认指向类的实例。但是要非常小心，一旦单独使用该方法，有可能会报错。例如：\n```\nclass Logger {\n  printName(name = 'there') {\n    this.print(`Hello ${name}`);\n  }\n\n  print(text) {\n    console.log(text);\n  }\n}\n\nconst logger = new Logger();\nprintName(); // 报错\n```\n\n2.解决上述问题的方法有三种，绑定this，使用箭头函数和使用Proxy。\n\n# 七、class的getter与setter\n\n## 简介\n与ES5一样，在'类'的内部可以使用get和set关键字，对某个属性设置存值函数和取值函数，拦截该属性的存取行为，例如：\n```\nclass CustomHTMLElement {\n  constructor(element) {\n    this.element = element;\n  }\n\n  get html() {\n    return this.element.innerHTML;\n  }\n\n  set html(val) {\n    this.element.innerHTML = val;\n  }\n}\n```\n\n# 八、class的静态方法\n\n## 简介\n\n1.class的静态方法，使用static关键字来命名的，可以直接通过类来调用，例如：\n```\nclass Foo {\n  static classMethod() {\n    return 'hello';\n  }\n}\nFoo.classMethod();\n```\n\n2.如果静态方法中有this关键字，这个this指的是类，而不是类的实例。\n\n3.父类的静态方法可以被子类继承。例如：\n```\nclass Foo {\n  static classMethod() {\n    return 'hello';\n  }\n}\nclass Bar extends Foo {}\nBar.classMethdo(); // 'hello'\n```\n\n4.静态方法可以从super对象上调用。例如：\n```\nclass Foo {\n  static classMethod() {\n    return 'hello';\n  }\n}\nclass Bar extends Foo {\n  static classMethod() {\n    return super.classMethod + ', too';\n  }\n}\nBar.classMethod(); // hello too\n```\n\n# 九、class的静态属性和实例属性\n\n## 介绍\n\n1.静态属性指的是Class本身的属性，即Class.proName，而不是定义在实例对象this上的属性。例如：\n\n```\nclass Foo {}\nFoo.prop = 1;\n\n// 1\nFoo.prop\n```\n\n2.ES6明确规定，Class **内部** 只有静态方法，没有静态属性。例如：\n\n```\nclass Foo {\n  prop: 2\n  static prop: 2\n}\n\n// undefined\nFoo.prop\n```\n\n## 新的提案\n\n目前有一个新的提案，对实例属性和静态属性规定了新的写法。 \n\n1.类的实例属性\n\n```\nclass MyClass {\n  myProp = 2;\n  constructor() {\n    // 2\n    console.log(this.myProp);\n  }\n}\n```\n\n2.类的静态属性 类的静态属性，需要在实例实例属性的写法前面加上static关键字。例如：\n\n```\nclass MyClass {\n  static prop = 1;\n  constructor() {\n    // 1\n    console.log(MyClass.prop);\n  }\n}\n```\n\n> 新的提案解决了老写法容易忽略静态属性的问题，采用显式声明，语义更加优秀。\n\n# 十、new.target属性\n\n## 介绍\n\n1.ES6为new命令引入了一个new.target属性，该属性一般用在构造函数之中，返回new命令作用于的那个构造函数。如果构造函数不是通过new命令调用的我，new.target会返回undefined。例如：\n\n```\nfunction Person(name) {\n  if (new.target !== undefined) {\n    this.name = name;\n  } else {\n    throw new Error('必须使用new命令生成实例！');\n  }\n}\n\n// 正确\nvar person = new Person('jack');\n// Error\nvar person = Person.call(person, 'jack');\n```\n\n2.Class内部调用new.target，会返回当前Class。例如：\n\n```\nclass Person {\n  constructor(name) {\n    console.log(new.target === Person);\n    this.name = name;\n  }\n}\n// true\nvar person = new Person();\n```\n\n3.子类继承父类时，new.target会返回子类。例如：\n\n```\nclass Person {\n  constructor(name) {\n    console.log(new.target === Person);\n    this.name = name;\n  }\n}\n\nclass Child extends Person{\n  constructor(name) {\n    super(name);\n  }\n}\n\n// false\nvar person = new Child('jack');\n```\n\n4.利用new.target的特点可以实现抽象类，只能被继承的类。例如：\n\n```\nclass Person {\n  constructor() {\n    if (new.target === Person) {\n      throw new Error('本类不能实例化');\n    }\n  }\n}\n\nclass Child extends Person {\n  constructor(name) {\n    super();\n    this.name = name\n  }\n}\n\nvar a = new Child();\n\n// 报错\nvar b = new Person();\n```\n","source":"_posts/ES6入门-Class.md","raw":"---\ntitle: ES6入门-Class\ndate: 2017-12-08 21:52:56\ncategories: ES6入门\ntags:\n     - 笔记\n     - JavaScript\n     - ECMAScript 2015\ndescription: ES6入门--Module\n---\n# 一、Class简介\n\n## 简介\n\n1.ES6的class可以看作是一个语法糖，只是让对象原型的写法更清晰，更像面向对象编程的语法而已。例如：\n```\nclass Point {\n\n    // 构造方法\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    // 方法之间不需要加逗号\n    toString() {\n        return '(' + this.x + ', ' + this.y + ')';\n    }\n}\n```\n\n2.ES6的类，完全可以看作是构造函数的另一种写法，例如：\n```\nclass Point {\n\n}\n\n// true\nPoint === Point.prototype.constructor\n```\n\n3.ES6类的所有方法都定义在类的prototype属性上面，例如：\n```\nclass Point {\n    // 定义在类的prototype属性上，也就是在原型上\n    constructor() {}\n\n    // 定义在类的prototype属性上，也就是在原型上\n    toString() {}\n}\n```\n\n4.使用Object.assign可以一次向类添加多个方法，例如：\n```\nObject.assign(Point.prototype, {\n    a() {},\n    b() {},\n    c() {}\n});\n```\n\n5.ES6定义的类内部所有定义的方法都是不可枚举的，也就是说不能使用Object.keys()遍历。但ES5中可以被枚举，这点要注意！\n\n6.类和模块的内部，默认就是严格模式。\n\n7.ES6中定义的类，必须使用new调用，否则会报错。ES5中定义的构造函数不用new也可以使用。\n\n8.ES6中的类不存在变量提升，这一点与ES5不同。\n\n# 二、constructor方法\n\n## 简介\n\n1.constructor方法是类的默认方法，通过new命令生成对象实例时，自动调用该方法。\n\n2.一个类必须有constructor方法，如果没有显式定义，JavaScript引擎则默认添加一个空的constructor方法。例如：\n```\nclass Point {\n\n}\n\n// 等同于\nclass Point {\n    constructor() {}\n}\n```\n\n3.constructor方法默认返回实例对象this，也可以指定返回另外一个对象。例如：\n```\nclass Foo {\n  constructor() {\n    return Object.create(null);\n  }\n}\n```\n\n# 三、类的实例对象\n\n## 简介\n\n1.与ES5一样，实例的属性除非显式定义在其本身（即定义在this对象上），否则都定义在原型上。例如：\n```\nclass Point {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  },\n  toString() {\n    return '(' + this.x + ', ' + this.y + ')';\n  }\n}\n\nvar point = new Point(2, 3);\n\n// 显式定义在其本身，返回true\npoint.hasOwnProperty('x');\npoint.hasOwnProperty('y');\n\n// 默认定义在原型上，返回false\npoint.hasOwnProperty('toString');\n\n// true\npoint.__proto__.hasOwnProperty('toString');\n```\n\n2.与ES5一样，类的所有实例共享一个原型对象，例如：\n```\nlet p1 = new Point(2, 3);\nlet p2 = new Point(3, 5);\n\np1.__proto__ === p2.__proto__;\n```\n\n3.我们可以通过实例的__proto__来获得原型对象，但是不建议在生产环境中使用该属性。推荐使用Object.getPrototypeOf()来获得实例的原型对象，再为原型添加属性和方法。\n\n# 四、class表达式\n\n## 简介\n\n1.与函数一样，类也可以使用表达式的形式定义，例如：\n```\n// 类的名字是MyClass，而不是Me，Me只在内部可用，指代当前类\nconst MyClass = class Me {\n  getClassName() {\n    return Me.name;\n  }\n}\n```\n\n2.采用Class表达式，可以写出立即执行的Class。例如：\n```\nlet person = new class {\n  constructor(name) {\n    this.name = name;\n  }\n\n  sayName() {\n    console.log(this.name);\n  }\n}('jack');\n\n// jack\nperson.sayName();\n```\n\n# 五、私有方法与私有属性\n\n## 简介\n\n1.ES6不提供私有方法，只能通过变通方法模拟实现，方法有三种：\n(1)命名上加以区别，这种做法是不保险的，在类的外部还是可以访问到。例如：\n```\nclass Widget {\n  foo(baz) {\n    this._bar(baz);\n  }\n\n  // 私有方法\n  _bar(baz) {\n    return this.snaf = baz;\n  }\n}\n```\n\n(2)将私有方法移出模块。例如：\n```\nclass Widget {\n  foo(baz) {\n    bar.call(this, baz);\n  }\n}\n\nfunction bar(baz) {\n  return this.snaf = baz;\n}\n```\n\n(3)利用Symbol的唯一性。例如：\n```\nconst bar = Symbol('bar');\nconst snaf = Symbol('snaf');\n\nexport default class myClass {\n  foo(baz) {\n    this[bar](baz);\n  }\n\n  [bar](baz) {\n    return this[snaf] = baz;\n  }\n};\n```\n\n2.与私有方法一样，ES6不支持私有属性，但是有一个提案，方法是在属性名前加#，表示私有属性。例如：\n```\nclass Point {\n  #x;\n}\n```\n\n3.私有属性可以有初始值，在构造函数执行时进行初始化。例如：\n```\nclass Point {\n  #x = 0;\n  constructor {\n    #x; // 0\n  }\n}\n```\n\n# 六、this的指向\n\n## 简介\n\n1.类的方法内部如果含有this，它默认指向类的实例。但是要非常小心，一旦单独使用该方法，有可能会报错。例如：\n```\nclass Logger {\n  printName(name = 'there') {\n    this.print(`Hello ${name}`);\n  }\n\n  print(text) {\n    console.log(text);\n  }\n}\n\nconst logger = new Logger();\nprintName(); // 报错\n```\n\n2.解决上述问题的方法有三种，绑定this，使用箭头函数和使用Proxy。\n\n# 七、class的getter与setter\n\n## 简介\n与ES5一样，在'类'的内部可以使用get和set关键字，对某个属性设置存值函数和取值函数，拦截该属性的存取行为，例如：\n```\nclass CustomHTMLElement {\n  constructor(element) {\n    this.element = element;\n  }\n\n  get html() {\n    return this.element.innerHTML;\n  }\n\n  set html(val) {\n    this.element.innerHTML = val;\n  }\n}\n```\n\n# 八、class的静态方法\n\n## 简介\n\n1.class的静态方法，使用static关键字来命名的，可以直接通过类来调用，例如：\n```\nclass Foo {\n  static classMethod() {\n    return 'hello';\n  }\n}\nFoo.classMethod();\n```\n\n2.如果静态方法中有this关键字，这个this指的是类，而不是类的实例。\n\n3.父类的静态方法可以被子类继承。例如：\n```\nclass Foo {\n  static classMethod() {\n    return 'hello';\n  }\n}\nclass Bar extends Foo {}\nBar.classMethdo(); // 'hello'\n```\n\n4.静态方法可以从super对象上调用。例如：\n```\nclass Foo {\n  static classMethod() {\n    return 'hello';\n  }\n}\nclass Bar extends Foo {\n  static classMethod() {\n    return super.classMethod + ', too';\n  }\n}\nBar.classMethod(); // hello too\n```\n\n# 九、class的静态属性和实例属性\n\n## 介绍\n\n1.静态属性指的是Class本身的属性，即Class.proName，而不是定义在实例对象this上的属性。例如：\n\n```\nclass Foo {}\nFoo.prop = 1;\n\n// 1\nFoo.prop\n```\n\n2.ES6明确规定，Class **内部** 只有静态方法，没有静态属性。例如：\n\n```\nclass Foo {\n  prop: 2\n  static prop: 2\n}\n\n// undefined\nFoo.prop\n```\n\n## 新的提案\n\n目前有一个新的提案，对实例属性和静态属性规定了新的写法。 \n\n1.类的实例属性\n\n```\nclass MyClass {\n  myProp = 2;\n  constructor() {\n    // 2\n    console.log(this.myProp);\n  }\n}\n```\n\n2.类的静态属性 类的静态属性，需要在实例实例属性的写法前面加上static关键字。例如：\n\n```\nclass MyClass {\n  static prop = 1;\n  constructor() {\n    // 1\n    console.log(MyClass.prop);\n  }\n}\n```\n\n> 新的提案解决了老写法容易忽略静态属性的问题，采用显式声明，语义更加优秀。\n\n# 十、new.target属性\n\n## 介绍\n\n1.ES6为new命令引入了一个new.target属性，该属性一般用在构造函数之中，返回new命令作用于的那个构造函数。如果构造函数不是通过new命令调用的我，new.target会返回undefined。例如：\n\n```\nfunction Person(name) {\n  if (new.target !== undefined) {\n    this.name = name;\n  } else {\n    throw new Error('必须使用new命令生成实例！');\n  }\n}\n\n// 正确\nvar person = new Person('jack');\n// Error\nvar person = Person.call(person, 'jack');\n```\n\n2.Class内部调用new.target，会返回当前Class。例如：\n\n```\nclass Person {\n  constructor(name) {\n    console.log(new.target === Person);\n    this.name = name;\n  }\n}\n// true\nvar person = new Person();\n```\n\n3.子类继承父类时，new.target会返回子类。例如：\n\n```\nclass Person {\n  constructor(name) {\n    console.log(new.target === Person);\n    this.name = name;\n  }\n}\n\nclass Child extends Person{\n  constructor(name) {\n    super(name);\n  }\n}\n\n// false\nvar person = new Child('jack');\n```\n\n4.利用new.target的特点可以实现抽象类，只能被继承的类。例如：\n\n```\nclass Person {\n  constructor() {\n    if (new.target === Person) {\n      throw new Error('本类不能实例化');\n    }\n  }\n}\n\nclass Child extends Person {\n  constructor(name) {\n    super();\n    this.name = name\n  }\n}\n\nvar a = new Child();\n\n// 报错\nvar b = new Person();\n```\n","slug":"ES6入门-Class","published":1,"updated":"2017-12-08T14:51:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjksf3cw00005h8ef6203eag4","content":"<h1 id=\"一、Class简介\"><a href=\"#一、Class简介\" class=\"headerlink\" title=\"一、Class简介\"></a>一、Class简介</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>1.ES6的class可以看作是一个语法糖，只是让对象原型的写法更清晰，更像面向对象编程的语法而已。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Point &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 构造方法</span><br><span class=\"line\">    constructor(x, y) &#123;</span><br><span class=\"line\">        this.x = x;</span><br><span class=\"line\">        this.y = y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 方法之间不需要加逗号</span><br><span class=\"line\">    toString() &#123;</span><br><span class=\"line\">        return &apos;(&apos; + this.x + &apos;, &apos; + this.y + &apos;)&apos;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>2.ES6的类，完全可以看作是构造函数的另一种写法，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Point &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// true</span><br><span class=\"line\">Point === Point.prototype.constructor</span><br></pre></td></tr></table></figure></p>\n<p>3.ES6类的所有方法都定义在类的prototype属性上面，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Point &#123;</span><br><span class=\"line\">    // 定义在类的prototype属性上，也就是在原型上</span><br><span class=\"line\">    constructor() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 定义在类的prototype属性上，也就是在原型上</span><br><span class=\"line\">    toString() &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>4.使用Object.assign可以一次向类添加多个方法，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object.assign(Point.prototype, &#123;</span><br><span class=\"line\">    a() &#123;&#125;,</span><br><span class=\"line\">    b() &#123;&#125;,</span><br><span class=\"line\">    c() &#123;&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>5.ES6定义的类内部所有定义的方法都是不可枚举的，也就是说不能使用Object.keys()遍历。但ES5中可以被枚举，这点要注意！</p>\n<p>6.类和模块的内部，默认就是严格模式。</p>\n<p>7.ES6中定义的类，必须使用new调用，否则会报错。ES5中定义的构造函数不用new也可以使用。</p>\n<p>8.ES6中的类不存在变量提升，这一点与ES5不同。</p>\n<h1 id=\"二、constructor方法\"><a href=\"#二、constructor方法\" class=\"headerlink\" title=\"二、constructor方法\"></a>二、constructor方法</h1><h2 id=\"简介-1\"><a href=\"#简介-1\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>1.constructor方法是类的默认方法，通过new命令生成对象实例时，自动调用该方法。</p>\n<p>2.一个类必须有constructor方法，如果没有显式定义，JavaScript引擎则默认添加一个空的constructor方法。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Point &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 等同于</span><br><span class=\"line\">class Point &#123;</span><br><span class=\"line\">    constructor() &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>3.constructor方法默认返回实例对象this，也可以指定返回另外一个对象。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Foo &#123;</span><br><span class=\"line\">  constructor() &#123;</span><br><span class=\"line\">    return Object.create(null);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"三、类的实例对象\"><a href=\"#三、类的实例对象\" class=\"headerlink\" title=\"三、类的实例对象\"></a>三、类的实例对象</h1><h2 id=\"简介-2\"><a href=\"#简介-2\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>1.与ES5一样，实例的属性除非显式定义在其本身（即定义在this对象上），否则都定义在原型上。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Point &#123;</span><br><span class=\"line\">  constructor(x, y) &#123;</span><br><span class=\"line\">    this.x = x;</span><br><span class=\"line\">    this.y = y;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  toString() &#123;</span><br><span class=\"line\">    return &apos;(&apos; + this.x + &apos;, &apos; + this.y + &apos;)&apos;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var point = new Point(2, 3);</span><br><span class=\"line\"></span><br><span class=\"line\">// 显式定义在其本身，返回true</span><br><span class=\"line\">point.hasOwnProperty(&apos;x&apos;);</span><br><span class=\"line\">point.hasOwnProperty(&apos;y&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 默认定义在原型上，返回false</span><br><span class=\"line\">point.hasOwnProperty(&apos;toString&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">// true</span><br><span class=\"line\">point.__proto__.hasOwnProperty(&apos;toString&apos;);</span><br></pre></td></tr></table></figure></p>\n<p>2.与ES5一样，类的所有实例共享一个原型对象，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let p1 = new Point(2, 3);</span><br><span class=\"line\">let p2 = new Point(3, 5);</span><br><span class=\"line\"></span><br><span class=\"line\">p1.__proto__ === p2.__proto__;</span><br></pre></td></tr></table></figure></p>\n<p>3.我们可以通过实例的<strong>proto</strong>来获得原型对象，但是不建议在生产环境中使用该属性。推荐使用Object.getPrototypeOf()来获得实例的原型对象，再为原型添加属性和方法。</p>\n<h1 id=\"四、class表达式\"><a href=\"#四、class表达式\" class=\"headerlink\" title=\"四、class表达式\"></a>四、class表达式</h1><h2 id=\"简介-3\"><a href=\"#简介-3\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>1.与函数一样，类也可以使用表达式的形式定义，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 类的名字是MyClass，而不是Me，Me只在内部可用，指代当前类</span><br><span class=\"line\">const MyClass = class Me &#123;</span><br><span class=\"line\">  getClassName() &#123;</span><br><span class=\"line\">    return Me.name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>2.采用Class表达式，可以写出立即执行的Class。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let person = new class &#123;</span><br><span class=\"line\">  constructor(name) &#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  sayName() &#123;</span><br><span class=\"line\">    console.log(this.name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;(&apos;jack&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">// jack</span><br><span class=\"line\">person.sayName();</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"五、私有方法与私有属性\"><a href=\"#五、私有方法与私有属性\" class=\"headerlink\" title=\"五、私有方法与私有属性\"></a>五、私有方法与私有属性</h1><h2 id=\"简介-4\"><a href=\"#简介-4\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>1.ES6不提供私有方法，只能通过变通方法模拟实现，方法有三种：<br>(1)命名上加以区别，这种做法是不保险的，在类的外部还是可以访问到。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Widget &#123;</span><br><span class=\"line\">  foo(baz) &#123;</span><br><span class=\"line\">    this._bar(baz);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // 私有方法</span><br><span class=\"line\">  _bar(baz) &#123;</span><br><span class=\"line\">    return this.snaf = baz;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>(2)将私有方法移出模块。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Widget &#123;</span><br><span class=\"line\">  foo(baz) &#123;</span><br><span class=\"line\">    bar.call(this, baz);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function bar(baz) &#123;</span><br><span class=\"line\">  return this.snaf = baz;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>(3)利用Symbol的唯一性。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const bar = Symbol(&apos;bar&apos;);</span><br><span class=\"line\">const snaf = Symbol(&apos;snaf&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">export default class myClass &#123;</span><br><span class=\"line\">  foo(baz) &#123;</span><br><span class=\"line\">    this[bar](baz);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  [bar](baz) &#123;</span><br><span class=\"line\">    return this[snaf] = baz;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>2.与私有方法一样，ES6不支持私有属性，但是有一个提案，方法是在属性名前加#，表示私有属性。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Point &#123;</span><br><span class=\"line\">  #x;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>3.私有属性可以有初始值，在构造函数执行时进行初始化。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Point &#123;</span><br><span class=\"line\">  #x = 0;</span><br><span class=\"line\">  constructor &#123;</span><br><span class=\"line\">    #x; // 0</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"六、this的指向\"><a href=\"#六、this的指向\" class=\"headerlink\" title=\"六、this的指向\"></a>六、this的指向</h1><h2 id=\"简介-5\"><a href=\"#简介-5\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>1.类的方法内部如果含有this，它默认指向类的实例。但是要非常小心，一旦单独使用该方法，有可能会报错。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Logger &#123;</span><br><span class=\"line\">  printName(name = &apos;there&apos;) &#123;</span><br><span class=\"line\">    this.print(`Hello $&#123;name&#125;`);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  print(text) &#123;</span><br><span class=\"line\">    console.log(text);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const logger = new Logger();</span><br><span class=\"line\">printName(); // 报错</span><br></pre></td></tr></table></figure></p>\n<p>2.解决上述问题的方法有三种，绑定this，使用箭头函数和使用Proxy。</p>\n<h1 id=\"七、class的getter与setter\"><a href=\"#七、class的getter与setter\" class=\"headerlink\" title=\"七、class的getter与setter\"></a>七、class的getter与setter</h1><h2 id=\"简介-6\"><a href=\"#简介-6\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>与ES5一样，在’类’的内部可以使用get和set关键字，对某个属性设置存值函数和取值函数，拦截该属性的存取行为，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class CustomHTMLElement &#123;</span><br><span class=\"line\">  constructor(element) &#123;</span><br><span class=\"line\">    this.element = element;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  get html() &#123;</span><br><span class=\"line\">    return this.element.innerHTML;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  set html(val) &#123;</span><br><span class=\"line\">    this.element.innerHTML = val;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"八、class的静态方法\"><a href=\"#八、class的静态方法\" class=\"headerlink\" title=\"八、class的静态方法\"></a>八、class的静态方法</h1><h2 id=\"简介-7\"><a href=\"#简介-7\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>1.class的静态方法，使用static关键字来命名的，可以直接通过类来调用，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Foo &#123;</span><br><span class=\"line\">  static classMethod() &#123;</span><br><span class=\"line\">    return &apos;hello&apos;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Foo.classMethod();</span><br></pre></td></tr></table></figure></p>\n<p>2.如果静态方法中有this关键字，这个this指的是类，而不是类的实例。</p>\n<p>3.父类的静态方法可以被子类继承。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Foo &#123;</span><br><span class=\"line\">  static classMethod() &#123;</span><br><span class=\"line\">    return &apos;hello&apos;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Bar extends Foo &#123;&#125;</span><br><span class=\"line\">Bar.classMethdo(); // &apos;hello&apos;</span><br></pre></td></tr></table></figure></p>\n<p>4.静态方法可以从super对象上调用。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Foo &#123;</span><br><span class=\"line\">  static classMethod() &#123;</span><br><span class=\"line\">    return &apos;hello&apos;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Bar extends Foo &#123;</span><br><span class=\"line\">  static classMethod() &#123;</span><br><span class=\"line\">    return super.classMethod + &apos;, too&apos;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Bar.classMethod(); // hello too</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"九、class的静态属性和实例属性\"><a href=\"#九、class的静态属性和实例属性\" class=\"headerlink\" title=\"九、class的静态属性和实例属性\"></a>九、class的静态属性和实例属性</h1><h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>1.静态属性指的是Class本身的属性，即Class.proName，而不是定义在实例对象this上的属性。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Foo &#123;&#125;</span><br><span class=\"line\">Foo.prop = 1;</span><br><span class=\"line\"></span><br><span class=\"line\">// 1</span><br><span class=\"line\">Foo.prop</span><br></pre></td></tr></table></figure>\n<p>2.ES6明确规定，Class <strong>内部</strong> 只有静态方法，没有静态属性。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Foo &#123;</span><br><span class=\"line\">  prop: 2</span><br><span class=\"line\">  static prop: 2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// undefined</span><br><span class=\"line\">Foo.prop</span><br></pre></td></tr></table></figure>\n<h2 id=\"新的提案\"><a href=\"#新的提案\" class=\"headerlink\" title=\"新的提案\"></a>新的提案</h2><p>目前有一个新的提案，对实例属性和静态属性规定了新的写法。 </p>\n<p>1.类的实例属性</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class MyClass &#123;</span><br><span class=\"line\">  myProp = 2;</span><br><span class=\"line\">  constructor() &#123;</span><br><span class=\"line\">    // 2</span><br><span class=\"line\">    console.log(this.myProp);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.类的静态属性 类的静态属性，需要在实例实例属性的写法前面加上static关键字。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class MyClass &#123;</span><br><span class=\"line\">  static prop = 1;</span><br><span class=\"line\">  constructor() &#123;</span><br><span class=\"line\">    // 1</span><br><span class=\"line\">    console.log(MyClass.prop);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>新的提案解决了老写法容易忽略静态属性的问题，采用显式声明，语义更加优秀。</p>\n</blockquote>\n<h1 id=\"十、new-target属性\"><a href=\"#十、new-target属性\" class=\"headerlink\" title=\"十、new.target属性\"></a>十、new.target属性</h1><h2 id=\"介绍-1\"><a href=\"#介绍-1\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>1.ES6为new命令引入了一个new.target属性，该属性一般用在构造函数之中，返回new命令作用于的那个构造函数。如果构造函数不是通过new命令调用的我，new.target会返回undefined。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person(name) &#123;</span><br><span class=\"line\">  if (new.target !== undefined) &#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    throw new Error(&apos;必须使用new命令生成实例！&apos;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 正确</span><br><span class=\"line\">var person = new Person(&apos;jack&apos;);</span><br><span class=\"line\">// Error</span><br><span class=\"line\">var person = Person.call(person, &apos;jack&apos;);</span><br></pre></td></tr></table></figure>\n<p>2.Class内部调用new.target，会返回当前Class。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Person &#123;</span><br><span class=\"line\">  constructor(name) &#123;</span><br><span class=\"line\">    console.log(new.target === Person);</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// true</span><br><span class=\"line\">var person = new Person();</span><br></pre></td></tr></table></figure>\n<p>3.子类继承父类时，new.target会返回子类。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Person &#123;</span><br><span class=\"line\">  constructor(name) &#123;</span><br><span class=\"line\">    console.log(new.target === Person);</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Child extends Person&#123;</span><br><span class=\"line\">  constructor(name) &#123;</span><br><span class=\"line\">    super(name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// false</span><br><span class=\"line\">var person = new Child(&apos;jack&apos;);</span><br></pre></td></tr></table></figure>\n<p>4.利用new.target的特点可以实现抽象类，只能被继承的类。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Person &#123;</span><br><span class=\"line\">  constructor() &#123;</span><br><span class=\"line\">    if (new.target === Person) &#123;</span><br><span class=\"line\">      throw new Error(&apos;本类不能实例化&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Child extends Person &#123;</span><br><span class=\"line\">  constructor(name) &#123;</span><br><span class=\"line\">    super();</span><br><span class=\"line\">    this.name = name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var a = new Child();</span><br><span class=\"line\"></span><br><span class=\"line\">// 报错</span><br><span class=\"line\">var b = new Person();</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一、Class简介\"><a href=\"#一、Class简介\" class=\"headerlink\" title=\"一、Class简介\"></a>一、Class简介</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>1.ES6的class可以看作是一个语法糖，只是让对象原型的写法更清晰，更像面向对象编程的语法而已。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Point &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 构造方法</span><br><span class=\"line\">    constructor(x, y) &#123;</span><br><span class=\"line\">        this.x = x;</span><br><span class=\"line\">        this.y = y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 方法之间不需要加逗号</span><br><span class=\"line\">    toString() &#123;</span><br><span class=\"line\">        return &apos;(&apos; + this.x + &apos;, &apos; + this.y + &apos;)&apos;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>2.ES6的类，完全可以看作是构造函数的另一种写法，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Point &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// true</span><br><span class=\"line\">Point === Point.prototype.constructor</span><br></pre></td></tr></table></figure></p>\n<p>3.ES6类的所有方法都定义在类的prototype属性上面，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Point &#123;</span><br><span class=\"line\">    // 定义在类的prototype属性上，也就是在原型上</span><br><span class=\"line\">    constructor() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 定义在类的prototype属性上，也就是在原型上</span><br><span class=\"line\">    toString() &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>4.使用Object.assign可以一次向类添加多个方法，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object.assign(Point.prototype, &#123;</span><br><span class=\"line\">    a() &#123;&#125;,</span><br><span class=\"line\">    b() &#123;&#125;,</span><br><span class=\"line\">    c() &#123;&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>5.ES6定义的类内部所有定义的方法都是不可枚举的，也就是说不能使用Object.keys()遍历。但ES5中可以被枚举，这点要注意！</p>\n<p>6.类和模块的内部，默认就是严格模式。</p>\n<p>7.ES6中定义的类，必须使用new调用，否则会报错。ES5中定义的构造函数不用new也可以使用。</p>\n<p>8.ES6中的类不存在变量提升，这一点与ES5不同。</p>\n<h1 id=\"二、constructor方法\"><a href=\"#二、constructor方法\" class=\"headerlink\" title=\"二、constructor方法\"></a>二、constructor方法</h1><h2 id=\"简介-1\"><a href=\"#简介-1\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>1.constructor方法是类的默认方法，通过new命令生成对象实例时，自动调用该方法。</p>\n<p>2.一个类必须有constructor方法，如果没有显式定义，JavaScript引擎则默认添加一个空的constructor方法。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Point &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 等同于</span><br><span class=\"line\">class Point &#123;</span><br><span class=\"line\">    constructor() &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>3.constructor方法默认返回实例对象this，也可以指定返回另外一个对象。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Foo &#123;</span><br><span class=\"line\">  constructor() &#123;</span><br><span class=\"line\">    return Object.create(null);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"三、类的实例对象\"><a href=\"#三、类的实例对象\" class=\"headerlink\" title=\"三、类的实例对象\"></a>三、类的实例对象</h1><h2 id=\"简介-2\"><a href=\"#简介-2\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>1.与ES5一样，实例的属性除非显式定义在其本身（即定义在this对象上），否则都定义在原型上。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Point &#123;</span><br><span class=\"line\">  constructor(x, y) &#123;</span><br><span class=\"line\">    this.x = x;</span><br><span class=\"line\">    this.y = y;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  toString() &#123;</span><br><span class=\"line\">    return &apos;(&apos; + this.x + &apos;, &apos; + this.y + &apos;)&apos;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var point = new Point(2, 3);</span><br><span class=\"line\"></span><br><span class=\"line\">// 显式定义在其本身，返回true</span><br><span class=\"line\">point.hasOwnProperty(&apos;x&apos;);</span><br><span class=\"line\">point.hasOwnProperty(&apos;y&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 默认定义在原型上，返回false</span><br><span class=\"line\">point.hasOwnProperty(&apos;toString&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">// true</span><br><span class=\"line\">point.__proto__.hasOwnProperty(&apos;toString&apos;);</span><br></pre></td></tr></table></figure></p>\n<p>2.与ES5一样，类的所有实例共享一个原型对象，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let p1 = new Point(2, 3);</span><br><span class=\"line\">let p2 = new Point(3, 5);</span><br><span class=\"line\"></span><br><span class=\"line\">p1.__proto__ === p2.__proto__;</span><br></pre></td></tr></table></figure></p>\n<p>3.我们可以通过实例的<strong>proto</strong>来获得原型对象，但是不建议在生产环境中使用该属性。推荐使用Object.getPrototypeOf()来获得实例的原型对象，再为原型添加属性和方法。</p>\n<h1 id=\"四、class表达式\"><a href=\"#四、class表达式\" class=\"headerlink\" title=\"四、class表达式\"></a>四、class表达式</h1><h2 id=\"简介-3\"><a href=\"#简介-3\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>1.与函数一样，类也可以使用表达式的形式定义，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 类的名字是MyClass，而不是Me，Me只在内部可用，指代当前类</span><br><span class=\"line\">const MyClass = class Me &#123;</span><br><span class=\"line\">  getClassName() &#123;</span><br><span class=\"line\">    return Me.name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>2.采用Class表达式，可以写出立即执行的Class。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let person = new class &#123;</span><br><span class=\"line\">  constructor(name) &#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  sayName() &#123;</span><br><span class=\"line\">    console.log(this.name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;(&apos;jack&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">// jack</span><br><span class=\"line\">person.sayName();</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"五、私有方法与私有属性\"><a href=\"#五、私有方法与私有属性\" class=\"headerlink\" title=\"五、私有方法与私有属性\"></a>五、私有方法与私有属性</h1><h2 id=\"简介-4\"><a href=\"#简介-4\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>1.ES6不提供私有方法，只能通过变通方法模拟实现，方法有三种：<br>(1)命名上加以区别，这种做法是不保险的，在类的外部还是可以访问到。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Widget &#123;</span><br><span class=\"line\">  foo(baz) &#123;</span><br><span class=\"line\">    this._bar(baz);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // 私有方法</span><br><span class=\"line\">  _bar(baz) &#123;</span><br><span class=\"line\">    return this.snaf = baz;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>(2)将私有方法移出模块。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Widget &#123;</span><br><span class=\"line\">  foo(baz) &#123;</span><br><span class=\"line\">    bar.call(this, baz);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function bar(baz) &#123;</span><br><span class=\"line\">  return this.snaf = baz;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>(3)利用Symbol的唯一性。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const bar = Symbol(&apos;bar&apos;);</span><br><span class=\"line\">const snaf = Symbol(&apos;snaf&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">export default class myClass &#123;</span><br><span class=\"line\">  foo(baz) &#123;</span><br><span class=\"line\">    this[bar](baz);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  [bar](baz) &#123;</span><br><span class=\"line\">    return this[snaf] = baz;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>2.与私有方法一样，ES6不支持私有属性，但是有一个提案，方法是在属性名前加#，表示私有属性。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Point &#123;</span><br><span class=\"line\">  #x;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>3.私有属性可以有初始值，在构造函数执行时进行初始化。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Point &#123;</span><br><span class=\"line\">  #x = 0;</span><br><span class=\"line\">  constructor &#123;</span><br><span class=\"line\">    #x; // 0</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"六、this的指向\"><a href=\"#六、this的指向\" class=\"headerlink\" title=\"六、this的指向\"></a>六、this的指向</h1><h2 id=\"简介-5\"><a href=\"#简介-5\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>1.类的方法内部如果含有this，它默认指向类的实例。但是要非常小心，一旦单独使用该方法，有可能会报错。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Logger &#123;</span><br><span class=\"line\">  printName(name = &apos;there&apos;) &#123;</span><br><span class=\"line\">    this.print(`Hello $&#123;name&#125;`);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  print(text) &#123;</span><br><span class=\"line\">    console.log(text);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const logger = new Logger();</span><br><span class=\"line\">printName(); // 报错</span><br></pre></td></tr></table></figure></p>\n<p>2.解决上述问题的方法有三种，绑定this，使用箭头函数和使用Proxy。</p>\n<h1 id=\"七、class的getter与setter\"><a href=\"#七、class的getter与setter\" class=\"headerlink\" title=\"七、class的getter与setter\"></a>七、class的getter与setter</h1><h2 id=\"简介-6\"><a href=\"#简介-6\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>与ES5一样，在’类’的内部可以使用get和set关键字，对某个属性设置存值函数和取值函数，拦截该属性的存取行为，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class CustomHTMLElement &#123;</span><br><span class=\"line\">  constructor(element) &#123;</span><br><span class=\"line\">    this.element = element;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  get html() &#123;</span><br><span class=\"line\">    return this.element.innerHTML;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  set html(val) &#123;</span><br><span class=\"line\">    this.element.innerHTML = val;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"八、class的静态方法\"><a href=\"#八、class的静态方法\" class=\"headerlink\" title=\"八、class的静态方法\"></a>八、class的静态方法</h1><h2 id=\"简介-7\"><a href=\"#简介-7\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>1.class的静态方法，使用static关键字来命名的，可以直接通过类来调用，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Foo &#123;</span><br><span class=\"line\">  static classMethod() &#123;</span><br><span class=\"line\">    return &apos;hello&apos;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Foo.classMethod();</span><br></pre></td></tr></table></figure></p>\n<p>2.如果静态方法中有this关键字，这个this指的是类，而不是类的实例。</p>\n<p>3.父类的静态方法可以被子类继承。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Foo &#123;</span><br><span class=\"line\">  static classMethod() &#123;</span><br><span class=\"line\">    return &apos;hello&apos;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Bar extends Foo &#123;&#125;</span><br><span class=\"line\">Bar.classMethdo(); // &apos;hello&apos;</span><br></pre></td></tr></table></figure></p>\n<p>4.静态方法可以从super对象上调用。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Foo &#123;</span><br><span class=\"line\">  static classMethod() &#123;</span><br><span class=\"line\">    return &apos;hello&apos;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Bar extends Foo &#123;</span><br><span class=\"line\">  static classMethod() &#123;</span><br><span class=\"line\">    return super.classMethod + &apos;, too&apos;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Bar.classMethod(); // hello too</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"九、class的静态属性和实例属性\"><a href=\"#九、class的静态属性和实例属性\" class=\"headerlink\" title=\"九、class的静态属性和实例属性\"></a>九、class的静态属性和实例属性</h1><h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>1.静态属性指的是Class本身的属性，即Class.proName，而不是定义在实例对象this上的属性。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Foo &#123;&#125;</span><br><span class=\"line\">Foo.prop = 1;</span><br><span class=\"line\"></span><br><span class=\"line\">// 1</span><br><span class=\"line\">Foo.prop</span><br></pre></td></tr></table></figure>\n<p>2.ES6明确规定，Class <strong>内部</strong> 只有静态方法，没有静态属性。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Foo &#123;</span><br><span class=\"line\">  prop: 2</span><br><span class=\"line\">  static prop: 2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// undefined</span><br><span class=\"line\">Foo.prop</span><br></pre></td></tr></table></figure>\n<h2 id=\"新的提案\"><a href=\"#新的提案\" class=\"headerlink\" title=\"新的提案\"></a>新的提案</h2><p>目前有一个新的提案，对实例属性和静态属性规定了新的写法。 </p>\n<p>1.类的实例属性</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class MyClass &#123;</span><br><span class=\"line\">  myProp = 2;</span><br><span class=\"line\">  constructor() &#123;</span><br><span class=\"line\">    // 2</span><br><span class=\"line\">    console.log(this.myProp);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.类的静态属性 类的静态属性，需要在实例实例属性的写法前面加上static关键字。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class MyClass &#123;</span><br><span class=\"line\">  static prop = 1;</span><br><span class=\"line\">  constructor() &#123;</span><br><span class=\"line\">    // 1</span><br><span class=\"line\">    console.log(MyClass.prop);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>新的提案解决了老写法容易忽略静态属性的问题，采用显式声明，语义更加优秀。</p>\n</blockquote>\n<h1 id=\"十、new-target属性\"><a href=\"#十、new-target属性\" class=\"headerlink\" title=\"十、new.target属性\"></a>十、new.target属性</h1><h2 id=\"介绍-1\"><a href=\"#介绍-1\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>1.ES6为new命令引入了一个new.target属性，该属性一般用在构造函数之中，返回new命令作用于的那个构造函数。如果构造函数不是通过new命令调用的我，new.target会返回undefined。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person(name) &#123;</span><br><span class=\"line\">  if (new.target !== undefined) &#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    throw new Error(&apos;必须使用new命令生成实例！&apos;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 正确</span><br><span class=\"line\">var person = new Person(&apos;jack&apos;);</span><br><span class=\"line\">// Error</span><br><span class=\"line\">var person = Person.call(person, &apos;jack&apos;);</span><br></pre></td></tr></table></figure>\n<p>2.Class内部调用new.target，会返回当前Class。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Person &#123;</span><br><span class=\"line\">  constructor(name) &#123;</span><br><span class=\"line\">    console.log(new.target === Person);</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// true</span><br><span class=\"line\">var person = new Person();</span><br></pre></td></tr></table></figure>\n<p>3.子类继承父类时，new.target会返回子类。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Person &#123;</span><br><span class=\"line\">  constructor(name) &#123;</span><br><span class=\"line\">    console.log(new.target === Person);</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Child extends Person&#123;</span><br><span class=\"line\">  constructor(name) &#123;</span><br><span class=\"line\">    super(name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// false</span><br><span class=\"line\">var person = new Child(&apos;jack&apos;);</span><br></pre></td></tr></table></figure>\n<p>4.利用new.target的特点可以实现抽象类，只能被继承的类。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Person &#123;</span><br><span class=\"line\">  constructor() &#123;</span><br><span class=\"line\">    if (new.target === Person) &#123;</span><br><span class=\"line\">      throw new Error(&apos;本类不能实例化&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Child extends Person &#123;</span><br><span class=\"line\">  constructor(name) &#123;</span><br><span class=\"line\">    super();</span><br><span class=\"line\">    this.name = name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var a = new Child();</span><br><span class=\"line\"></span><br><span class=\"line\">// 报错</span><br><span class=\"line\">var b = new Person();</span><br></pre></td></tr></table></figure>\n"},{"title":"ES6入门-Module","date":"2017-11-18T01:18:04.000Z","description":"ES6入门--Module","_content":"# export命令\n1.export命令用于规定模块的对外接口。\n2.一个模块就是一个独立的文件，该文件内部的所有变量，外部无法获取。如果能让外部获取某个变量，则需要用export关键字输出该变量。示例:\n```\nexport var firstName = \"jack\";\nexport var year = 1009;\n// 另一种写法(优先考虑)：\nvar name = \"jack\";\nvar year = 1998;\nexport{name, year};\n// 输出函数或class：\nexport function a(n, m) {\n    return n + m;\n}\n```\n3.as关键字重命名。示例：\n```\nexport {name as name123};\n```\n4.export规定的对外的接口，必须与模块内部建立一对一的对应关系。\n```\n// 错误示例：\nvar m = 1;\nexport m;\n// 正确示例：\nvar m = 1;\nexport {m}\n```\n5.export语句输出接口，与其对应的值是动态绑定关系，即可以通过该接口获取到模块内部实时的值。\n6.export命令可以出现在模块的任何位置，只要处于模块顶层就可以，如果在块级作用域内就会报错。\n\n# import命令\n1.import命令用于加载模块。示例：\n```\nimport {name, year} from './profile';\nfunction a(dom) {\n    dom.innerHtml = name + ',' + year;\n}\n```\n2.as关键字重命名。示例：\n```\nimport {a as name} from './profile';\n```\n3.import命令有提升作用，会首先执行。\n4.import是静态执行，所以不能使用表达式和变量。\n5.import语句是单例模式。\n\n# 模块的整体加载\n1.用*指定一个对象，所有的输出值都加载到这个对象上面。示例：\n```\n// a.js\nexport function a(n){}\nexport function b(){}\n\nimport * as obj from './a.js';\nconsole.log(obj.a);\nconsole.log(obj.b);\n```\n2.模块整体加载所在的那个对象是静态的，所以不允许运行时改变。\n\n# export default命令\n1.export default命令，为模块指定默认输出，在import命令时不必知道export导出的属性是什么。示例：\n```\n// a.js\nexport default function (b){\n    return b;\n}\n\nimport a from './a.js';\na(1);\n```\n2.使用export default命令后，import命令后面不用加{}。\n3.export default命令只能使用一次，因为一个模块只能有一个默认输出。\n4.export default命令本质上是输出一个default变量，所以它后面不能跟变量声明语句。示例：\n```\n// 错误\nexport default var a = 1;\n```\n\n# 跨模块的常量\n1.const声明的常量只能在当前代码块有效，如果一个常量想要被多个模块共享，可以写一个常量文件，并将它输出成模块。示例：\n```\n// db.js\nexport const db = {\n    url: 'http://aa',\n    admin_username: 'admin',\n    admin_password: 'tfsadmin'\n};\n\n// user.js\nexport const user = ['root', 'admin', 'ceo'];\n\n// 将这些常量合并到index.js中\nexport {db} from './db.js'; // export和import的复合写法\nexport {user} from './user.js';\n\n// 加载时，直接加载index.js就可以了\nimport {db, user} from './index';\n```\n","source":"_posts/ES6入门-Module.md","raw":"---\ntitle: ES6入门-Module\ndate: 2017-11-18 09:18:04\ncategories: ES6入门\ntags:\n     - 笔记\n     - JavaScript\n     - ECMAScript 2015\ndescription: ES6入门--Module\n---\n# export命令\n1.export命令用于规定模块的对外接口。\n2.一个模块就是一个独立的文件，该文件内部的所有变量，外部无法获取。如果能让外部获取某个变量，则需要用export关键字输出该变量。示例:\n```\nexport var firstName = \"jack\";\nexport var year = 1009;\n// 另一种写法(优先考虑)：\nvar name = \"jack\";\nvar year = 1998;\nexport{name, year};\n// 输出函数或class：\nexport function a(n, m) {\n    return n + m;\n}\n```\n3.as关键字重命名。示例：\n```\nexport {name as name123};\n```\n4.export规定的对外的接口，必须与模块内部建立一对一的对应关系。\n```\n// 错误示例：\nvar m = 1;\nexport m;\n// 正确示例：\nvar m = 1;\nexport {m}\n```\n5.export语句输出接口，与其对应的值是动态绑定关系，即可以通过该接口获取到模块内部实时的值。\n6.export命令可以出现在模块的任何位置，只要处于模块顶层就可以，如果在块级作用域内就会报错。\n\n# import命令\n1.import命令用于加载模块。示例：\n```\nimport {name, year} from './profile';\nfunction a(dom) {\n    dom.innerHtml = name + ',' + year;\n}\n```\n2.as关键字重命名。示例：\n```\nimport {a as name} from './profile';\n```\n3.import命令有提升作用，会首先执行。\n4.import是静态执行，所以不能使用表达式和变量。\n5.import语句是单例模式。\n\n# 模块的整体加载\n1.用*指定一个对象，所有的输出值都加载到这个对象上面。示例：\n```\n// a.js\nexport function a(n){}\nexport function b(){}\n\nimport * as obj from './a.js';\nconsole.log(obj.a);\nconsole.log(obj.b);\n```\n2.模块整体加载所在的那个对象是静态的，所以不允许运行时改变。\n\n# export default命令\n1.export default命令，为模块指定默认输出，在import命令时不必知道export导出的属性是什么。示例：\n```\n// a.js\nexport default function (b){\n    return b;\n}\n\nimport a from './a.js';\na(1);\n```\n2.使用export default命令后，import命令后面不用加{}。\n3.export default命令只能使用一次，因为一个模块只能有一个默认输出。\n4.export default命令本质上是输出一个default变量，所以它后面不能跟变量声明语句。示例：\n```\n// 错误\nexport default var a = 1;\n```\n\n# 跨模块的常量\n1.const声明的常量只能在当前代码块有效，如果一个常量想要被多个模块共享，可以写一个常量文件，并将它输出成模块。示例：\n```\n// db.js\nexport const db = {\n    url: 'http://aa',\n    admin_username: 'admin',\n    admin_password: 'tfsadmin'\n};\n\n// user.js\nexport const user = ['root', 'admin', 'ceo'];\n\n// 将这些常量合并到index.js中\nexport {db} from './db.js'; // export和import的复合写法\nexport {user} from './user.js';\n\n// 加载时，直接加载index.js就可以了\nimport {db, user} from './index';\n```\n","slug":"ES6入门-Module","published":1,"updated":"2017-11-18T01:42:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjksf3cw20006h8efle6vrc5s","content":"<h1 id=\"export命令\"><a href=\"#export命令\" class=\"headerlink\" title=\"export命令\"></a>export命令</h1><p>1.export命令用于规定模块的对外接口。<br>2.一个模块就是一个独立的文件，该文件内部的所有变量，外部无法获取。如果能让外部获取某个变量，则需要用export关键字输出该变量。示例:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export var firstName = &quot;jack&quot;;</span><br><span class=\"line\">export var year = 1009;</span><br><span class=\"line\">// 另一种写法(优先考虑)：</span><br><span class=\"line\">var name = &quot;jack&quot;;</span><br><span class=\"line\">var year = 1998;</span><br><span class=\"line\">export&#123;name, year&#125;;</span><br><span class=\"line\">// 输出函数或class：</span><br><span class=\"line\">export function a(n, m) &#123;</span><br><span class=\"line\">    return n + m;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>3.as关键字重命名。示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export &#123;name as name123&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>4.export规定的对外的接口，必须与模块内部建立一对一的对应关系。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 错误示例：</span><br><span class=\"line\">var m = 1;</span><br><span class=\"line\">export m;</span><br><span class=\"line\">// 正确示例：</span><br><span class=\"line\">var m = 1;</span><br><span class=\"line\">export &#123;m&#125;</span><br></pre></td></tr></table></figure></p>\n<p>5.export语句输出接口，与其对应的值是动态绑定关系，即可以通过该接口获取到模块内部实时的值。<br>6.export命令可以出现在模块的任何位置，只要处于模块顶层就可以，如果在块级作用域内就会报错。</p>\n<h1 id=\"import命令\"><a href=\"#import命令\" class=\"headerlink\" title=\"import命令\"></a>import命令</h1><p>1.import命令用于加载模块。示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123;name, year&#125; from &apos;./profile&apos;;</span><br><span class=\"line\">function a(dom) &#123;</span><br><span class=\"line\">    dom.innerHtml = name + &apos;,&apos; + year;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>2.as关键字重命名。示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123;a as name&#125; from &apos;./profile&apos;;</span><br></pre></td></tr></table></figure></p>\n<p>3.import命令有提升作用，会首先执行。<br>4.import是静态执行，所以不能使用表达式和变量。<br>5.import语句是单例模式。</p>\n<h1 id=\"模块的整体加载\"><a href=\"#模块的整体加载\" class=\"headerlink\" title=\"模块的整体加载\"></a>模块的整体加载</h1><p>1.用*指定一个对象，所有的输出值都加载到这个对象上面。示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// a.js</span><br><span class=\"line\">export function a(n)&#123;&#125;</span><br><span class=\"line\">export function b()&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">import * as obj from &apos;./a.js&apos;;</span><br><span class=\"line\">console.log(obj.a);</span><br><span class=\"line\">console.log(obj.b);</span><br></pre></td></tr></table></figure></p>\n<p>2.模块整体加载所在的那个对象是静态的，所以不允许运行时改变。</p>\n<h1 id=\"export-default命令\"><a href=\"#export-default命令\" class=\"headerlink\" title=\"export default命令\"></a>export default命令</h1><p>1.export default命令，为模块指定默认输出，在import命令时不必知道export导出的属性是什么。示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// a.js</span><br><span class=\"line\">export default function (b)&#123;</span><br><span class=\"line\">    return b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">import a from &apos;./a.js&apos;;</span><br><span class=\"line\">a(1);</span><br></pre></td></tr></table></figure></p>\n<p>2.使用export default命令后，import命令后面不用加{}。<br>3.export default命令只能使用一次，因为一个模块只能有一个默认输出。<br>4.export default命令本质上是输出一个default变量，所以它后面不能跟变量声明语句。示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 错误</span><br><span class=\"line\">export default var a = 1;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"跨模块的常量\"><a href=\"#跨模块的常量\" class=\"headerlink\" title=\"跨模块的常量\"></a>跨模块的常量</h1><p>1.const声明的常量只能在当前代码块有效，如果一个常量想要被多个模块共享，可以写一个常量文件，并将它输出成模块。示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// db.js</span><br><span class=\"line\">export const db = &#123;</span><br><span class=\"line\">    url: &apos;http://aa&apos;,</span><br><span class=\"line\">    admin_username: &apos;admin&apos;,</span><br><span class=\"line\">    admin_password: &apos;tfsadmin&apos;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">// user.js</span><br><span class=\"line\">export const user = [&apos;root&apos;, &apos;admin&apos;, &apos;ceo&apos;];</span><br><span class=\"line\"></span><br><span class=\"line\">// 将这些常量合并到index.js中</span><br><span class=\"line\">export &#123;db&#125; from &apos;./db.js&apos;; // export和import的复合写法</span><br><span class=\"line\">export &#123;user&#125; from &apos;./user.js&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 加载时，直接加载index.js就可以了</span><br><span class=\"line\">import &#123;db, user&#125; from &apos;./index&apos;;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"export命令\"><a href=\"#export命令\" class=\"headerlink\" title=\"export命令\"></a>export命令</h1><p>1.export命令用于规定模块的对外接口。<br>2.一个模块就是一个独立的文件，该文件内部的所有变量，外部无法获取。如果能让外部获取某个变量，则需要用export关键字输出该变量。示例:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export var firstName = &quot;jack&quot;;</span><br><span class=\"line\">export var year = 1009;</span><br><span class=\"line\">// 另一种写法(优先考虑)：</span><br><span class=\"line\">var name = &quot;jack&quot;;</span><br><span class=\"line\">var year = 1998;</span><br><span class=\"line\">export&#123;name, year&#125;;</span><br><span class=\"line\">// 输出函数或class：</span><br><span class=\"line\">export function a(n, m) &#123;</span><br><span class=\"line\">    return n + m;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>3.as关键字重命名。示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export &#123;name as name123&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>4.export规定的对外的接口，必须与模块内部建立一对一的对应关系。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 错误示例：</span><br><span class=\"line\">var m = 1;</span><br><span class=\"line\">export m;</span><br><span class=\"line\">// 正确示例：</span><br><span class=\"line\">var m = 1;</span><br><span class=\"line\">export &#123;m&#125;</span><br></pre></td></tr></table></figure></p>\n<p>5.export语句输出接口，与其对应的值是动态绑定关系，即可以通过该接口获取到模块内部实时的值。<br>6.export命令可以出现在模块的任何位置，只要处于模块顶层就可以，如果在块级作用域内就会报错。</p>\n<h1 id=\"import命令\"><a href=\"#import命令\" class=\"headerlink\" title=\"import命令\"></a>import命令</h1><p>1.import命令用于加载模块。示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123;name, year&#125; from &apos;./profile&apos;;</span><br><span class=\"line\">function a(dom) &#123;</span><br><span class=\"line\">    dom.innerHtml = name + &apos;,&apos; + year;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>2.as关键字重命名。示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123;a as name&#125; from &apos;./profile&apos;;</span><br></pre></td></tr></table></figure></p>\n<p>3.import命令有提升作用，会首先执行。<br>4.import是静态执行，所以不能使用表达式和变量。<br>5.import语句是单例模式。</p>\n<h1 id=\"模块的整体加载\"><a href=\"#模块的整体加载\" class=\"headerlink\" title=\"模块的整体加载\"></a>模块的整体加载</h1><p>1.用*指定一个对象，所有的输出值都加载到这个对象上面。示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// a.js</span><br><span class=\"line\">export function a(n)&#123;&#125;</span><br><span class=\"line\">export function b()&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">import * as obj from &apos;./a.js&apos;;</span><br><span class=\"line\">console.log(obj.a);</span><br><span class=\"line\">console.log(obj.b);</span><br></pre></td></tr></table></figure></p>\n<p>2.模块整体加载所在的那个对象是静态的，所以不允许运行时改变。</p>\n<h1 id=\"export-default命令\"><a href=\"#export-default命令\" class=\"headerlink\" title=\"export default命令\"></a>export default命令</h1><p>1.export default命令，为模块指定默认输出，在import命令时不必知道export导出的属性是什么。示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// a.js</span><br><span class=\"line\">export default function (b)&#123;</span><br><span class=\"line\">    return b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">import a from &apos;./a.js&apos;;</span><br><span class=\"line\">a(1);</span><br></pre></td></tr></table></figure></p>\n<p>2.使用export default命令后，import命令后面不用加{}。<br>3.export default命令只能使用一次，因为一个模块只能有一个默认输出。<br>4.export default命令本质上是输出一个default变量，所以它后面不能跟变量声明语句。示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 错误</span><br><span class=\"line\">export default var a = 1;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"跨模块的常量\"><a href=\"#跨模块的常量\" class=\"headerlink\" title=\"跨模块的常量\"></a>跨模块的常量</h1><p>1.const声明的常量只能在当前代码块有效，如果一个常量想要被多个模块共享，可以写一个常量文件，并将它输出成模块。示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// db.js</span><br><span class=\"line\">export const db = &#123;</span><br><span class=\"line\">    url: &apos;http://aa&apos;,</span><br><span class=\"line\">    admin_username: &apos;admin&apos;,</span><br><span class=\"line\">    admin_password: &apos;tfsadmin&apos;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">// user.js</span><br><span class=\"line\">export const user = [&apos;root&apos;, &apos;admin&apos;, &apos;ceo&apos;];</span><br><span class=\"line\"></span><br><span class=\"line\">// 将这些常量合并到index.js中</span><br><span class=\"line\">export &#123;db&#125; from &apos;./db.js&apos;; // export和import的复合写法</span><br><span class=\"line\">export &#123;user&#125; from &apos;./user.js&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 加载时，直接加载index.js就可以了</span><br><span class=\"line\">import &#123;db, user&#125; from &apos;./index&apos;;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"ES6入门-Promise","date":"2017-12-15T13:24:53.000Z","description":"ES6入门--Promise","_content":"# Promise对象的含义和基本用法\n\n1.Promise是异步编程的一种解决方案，ES6将其写进了语言标准，统一了用法，原生提供了Promise对象。\n\n2.Promise有以下两个特点：\n    (1) 对象状态不受外界影响。Promise对象代表一个异步操作，有三种状态：pending(进行中)、fulfilled(已成功)和rejected(已失败)。\n    (2) 一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能，从pending变成fulfilled和从pending变成rejected。\n\n3.Promise对象是一个构造函数，用来生成Promise实例，示例：\n\n```javascript\nconst promise = new Promise(function(resolve, reject) {\n    if ( /*操作成功*/ ) {\n        resolve(value);\n    } else {\n        reject(error);\n    }\n})\n```\n4.Promise示例生成后，可以用then方法分别指定resolved状态和rejected状态的回调函数。示例：\n\n```javascript\npromise.then(function(value) {\n    // success\n}, function(error) {\n    // failure\n});\n```\n5.简单示例：\n\n```javascript\nfunction timeout(ms) {\n    return new Promise((resolve, reject) => {\n        setTimeout(resolve, ms, 'done');\n    });\n}\ntimeout(100).then((value) => {\n    console.log(value);\n})\n```\n6.Promise新建后就会立即执行，示例：\n\n```javascript\nlet promise = new Promise(function(resolve, reject)) {\n    console.log('promise'); // 最先输出\n    resolve();\n}\n\npromise.then(function() {\n    console.log('resolved'); // 当前脚本所有同步任务执行完才执行，最后输出\n});\n\nconsole.log('hi'); // 第二输出\n```\n7.异步加载图片的例子：\n\n```javascript\nfunction loadImageAsync(url) {\n    return new Promise(function(resolve, reject) {\n        const image = new Image();\n\n        image.onload = function() {\n            resolve(image);\n        };\n\n        image.onerror = function() {\n            reject(new Error('could not load imag at' + url));;\n        };\n\n        image.src = url;\n    });\n}\n```\n8.用Promise实现Ajax的例子：\n\n```javascript\nconst getJSON = function(url) {\n    const promise = new Promise(function(resolve, reject) {\n        const handler = function() {\n            if (this.readState !== 4) {\n                return;\n            }\n            if (this.status === 200) {\n                resolve(this.response);\n            } else {\n                reject(new Error(this.statusText));\n            }\n        };\n        const client = new XMLHttpRequest();\n        client.open(\"GET\", url);\n        client.onreadystatechange = handler;\n        client.responseType = \"json\";\n        client.setRequestHeader(\"Accept\", \"application/json\");\n        client.send();\n    });\n    return promise;\n};\n\ngetJSON(\"/posts.json\").then(function(json) {\n    console.log(\"conetent:\" + json);\n}, function(error) {\n    console.err(\"出错了\", error);\n});\n```\n# Promise.prototype.then()\n1.then方法是定义在原型对象Promise.prototype上的，作用是为Promise实例添加状态改变时的回调函数。\n\n2.then方法返回的是一个新Promise实例，因此可以采用链式写法，即在then方法后面再调用另一个then方法。例如：\n\n```javascript\ngetJSON(\"/post/1.json\").then(function(post) {\n    return getJSON(post.commentURL);\n}).then(function funcA(comments) {\n    console.log(\"resolved:\", comments);\n}, function funcB(err) {\n    console.log(\"rejected:\", err)\n});\n```\n3.采用箭头函数简化上述代码：\n\n```javascript\ngetJSON(\"/post/1.json\").then(\n    post => getJSON(post.commentURL)\n).then(\n    comments => console.log(\"resolved:\", comments),\n    err => console.log(\"rejected:\", err);\n);\n```\n# Promise.prototype.catch\n1.Promise.prototype.catch是.then(null, rejection)的别名，用于指定发生错误时的回调函数。例如：\n\n```javascript\ngetJSON(\"/post/1.json\").then(function(posts) {\n    // ...\n}).catch(function(error) {\n    // console.log(error);\n});\n```\n2.then方法指定的回调函数如果在运行中抛出错误，也会被catch方法捕获。\n\n3.reject方法的作用，等同于抛出错误，如果Promise状态已经变成resolved，再抛出错误是无效的。例如：\n\n```javascript\nconst promise = new Promise(function(resloved, reject) {\\\n    reslove(\"ok\");\n    throw new Error('test');\n});\n// 不会输出test\npromise.then(value => console.log(value)).catch(error => console.log(error));\n```\n4.一般来说是不需要reject函数的，总是使用catch方法，例如：\n\n```javascript\npromise\n    .then(data => console.log('success'))\n    .catch(error => console.log(error));\n```\n5.Promise内部的错误不会影响到Promise外部的代码，不会终止脚本执行。\n\n6.建议Promise对象后面要跟catch方法，catch方法返回的还是一个Promise对象，因此可以链式编程。\n\n7.如果catch后面继续调用then方法，那么当这个then方法发生错误时，就不会被捕获。\n\n# Promise.all()\n1.Promise.all方法用于将多个Promise实例，包装成一个新的Promise实例。\n\n```javascript\nconst promise = Promise.all([p1, p2, p3]);\n```\n2.Promise.all方法的参数可以不是数组，但必须有Iterator接口，且返回的每个成员都是Promise实例。\n\n3.包装的新Promise实例的状态由p1、p2、p3决定，只有p1、p2、p3的状态都变成fulfilled的，p的状态才会变成fulfilled，只要p1、p2、p3中有一个是rejected，p的状态就变成rejected。\n\n4.示例：\n\n```javascript\nconst databasePromise = connectDatabase();\nconst booksPromise = databasePromise.then(findAllBooks);\nconst userPromise = databasePromise.then(getCurrentUser);\nPromise.all([\n    booksPromise,\n    userPromise\n]).then(([book, user]) => pickTopRecommentations(books, user));\n```\n> 注：如果作为参数的Promise实例，自己定义了catch方法，那么它一旦被rejected，并不会触发Promise.all()的catch方法。\n\n# Promise.race()\n1.Promise.race方法同样是将多个Promise实例，包装成一个新的Promise实例。\n\n```javascript\nconst p = Promise.race([p1, p2, p3]);\n```\n2.p1、p2、p3中只要有一个改变状态，p的状态就跟着改变。\n\n3.示例：\n\n```javascript\nconst p = Promise.race([\n    fetch('/resource-that-may-take-a-while'),\n    new Promise(function(resolve, reject) {\n        setTimeout(() => reject(new Error('request timeout')), 5000)\n    })\n]);\np.then(response => console.log(response));\np.catch(error => console.log(error));)\n```\n# Promise.resolve()\n1.Promise.resolve方法将现有的对象转换为Promise对象\n\n```javascript\nconst jsPromise = Promise.resolve($.ajax('/whatever.json'));\n```\n2.Promise.resolve方法的参数分成四种情况：\n    (1)参数是一个Promise实例，那么Promise.resolve将不做任何修改，直接返回。\n    (2)参数是一个thenable对象，thenable对象指的是具有then方法的对象，Promise.resolve方法会将这个对象转换为Promise对象，然后立即执行thenable的then方法。\n    (3)参数不具有then方法，或者就不是对象，Promise.resolve将返回一个新的Promise对象，状态为resolved\n    (4)不带参数时，直接返回一个Promise对象\n# Promise.reject()\n1.Promise.reject()方法也会返回一个新的Promise实例，状态为rejected。例如：\n\n```javascript\nconst p = Promise.reject('出错了');\n```\n2.Promise.reject()方法的参数，会原封不动地作为reject的理由，变成后续方法的参数。\n\n3.示例：\n \n```javascript\nconst thenable = {\n    then(resolve, reject) {\n        reject('error');\n    }\n};\nPromise.reject(thenable).catch(e => {\n    console.log(e === thenable); // true\n})\n```\n# 两个有用的附加方法\n1.done()\n    (1)Promise对象的回调链，不管以then方法或catch方法结尾，要是最后一个方法抛出错误，都有可能无法捕获到，因此我们可以提供一个done方法，总是处于回调链的尾端，保证抛出任何可能出现的错误。\n    (2)示例：\n```javascript\nasyncFunc().then(f1).catch(f2).then(f2).done();\n```\n    (3)done方法实现代码:\n```javascript\nPromise.prototype.done = function(onFulfilled, onRejected) {\n    this.then(onFulfilled, onRejected)\n        .catch(function(reason) {\n            setTimeout(() => {\n                throw reason\n            }, 0)\n        });\n};\n```\n2.finally()\n    (1)finally方法用于指定不管Promise对象最后状态如何，都会执行的操作。\n    (2)示例：\n```javascript\nserver.listen(0)\n    .then(function() {\n        // run\n    })\n    .finally(server.stop)\n```\n    (3)finally方法的实现代码：\n```javascript\nPromise.prototype.finally = function(callback) {\n    let p = this.constructor;\n    return this.then(\n        value => p.resolve(callback()).then(() => value),\n        reason => p.resolve(callback()).then(() => {\n            throw reason\n        })\n    );\n};\n```\n# 应用\n1.加载图片\n    \n```javascript\nconst preloadImage = function(path) {\n    return new Promise(function(resolve, reject) {\n        const image = new Image();\n        image.onload = resolve;\n        image.error = reject;\n        image.src = path;\n    });\n};\n```\n# Promise.try()\n1.如果不知道函数是同步还是异步的，但是想用Promise来处理它，一般就会采用下面的写法：\n\n```javascript\nPromise.resolve().then(f);\n```\n2.如果函数是同步的，那么它会在本轮事件循环的末尾执行，例如：\n\n```javascript\nconst f = (() => console.log('now')); // 后打印\nPromise.resolve.then(f);\nconsole.log('next'); // 先打印\n```\n3.Promise.try是模拟try代码块，就像promise.catch模拟的是catch代码块，例如：\n\n```javascript\nPromise.try(database.users.get({\n        id: userId\n    }))\n    .then(...)\n    .catch(...)\n```\n\n","source":"_posts/ES6入门-Promise.md","raw":"---\ntitle: ES6入门-Promise\ndate: 2017-12-15 21:24:53\ncategories: ES6入门\ntags:\n     - 笔记\n     - JavaScript\n     - ECMAScript 2015\ndescription: ES6入门--Promise\n---\n# Promise对象的含义和基本用法\n\n1.Promise是异步编程的一种解决方案，ES6将其写进了语言标准，统一了用法，原生提供了Promise对象。\n\n2.Promise有以下两个特点：\n    (1) 对象状态不受外界影响。Promise对象代表一个异步操作，有三种状态：pending(进行中)、fulfilled(已成功)和rejected(已失败)。\n    (2) 一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能，从pending变成fulfilled和从pending变成rejected。\n\n3.Promise对象是一个构造函数，用来生成Promise实例，示例：\n\n```javascript\nconst promise = new Promise(function(resolve, reject) {\n    if ( /*操作成功*/ ) {\n        resolve(value);\n    } else {\n        reject(error);\n    }\n})\n```\n4.Promise示例生成后，可以用then方法分别指定resolved状态和rejected状态的回调函数。示例：\n\n```javascript\npromise.then(function(value) {\n    // success\n}, function(error) {\n    // failure\n});\n```\n5.简单示例：\n\n```javascript\nfunction timeout(ms) {\n    return new Promise((resolve, reject) => {\n        setTimeout(resolve, ms, 'done');\n    });\n}\ntimeout(100).then((value) => {\n    console.log(value);\n})\n```\n6.Promise新建后就会立即执行，示例：\n\n```javascript\nlet promise = new Promise(function(resolve, reject)) {\n    console.log('promise'); // 最先输出\n    resolve();\n}\n\npromise.then(function() {\n    console.log('resolved'); // 当前脚本所有同步任务执行完才执行，最后输出\n});\n\nconsole.log('hi'); // 第二输出\n```\n7.异步加载图片的例子：\n\n```javascript\nfunction loadImageAsync(url) {\n    return new Promise(function(resolve, reject) {\n        const image = new Image();\n\n        image.onload = function() {\n            resolve(image);\n        };\n\n        image.onerror = function() {\n            reject(new Error('could not load imag at' + url));;\n        };\n\n        image.src = url;\n    });\n}\n```\n8.用Promise实现Ajax的例子：\n\n```javascript\nconst getJSON = function(url) {\n    const promise = new Promise(function(resolve, reject) {\n        const handler = function() {\n            if (this.readState !== 4) {\n                return;\n            }\n            if (this.status === 200) {\n                resolve(this.response);\n            } else {\n                reject(new Error(this.statusText));\n            }\n        };\n        const client = new XMLHttpRequest();\n        client.open(\"GET\", url);\n        client.onreadystatechange = handler;\n        client.responseType = \"json\";\n        client.setRequestHeader(\"Accept\", \"application/json\");\n        client.send();\n    });\n    return promise;\n};\n\ngetJSON(\"/posts.json\").then(function(json) {\n    console.log(\"conetent:\" + json);\n}, function(error) {\n    console.err(\"出错了\", error);\n});\n```\n# Promise.prototype.then()\n1.then方法是定义在原型对象Promise.prototype上的，作用是为Promise实例添加状态改变时的回调函数。\n\n2.then方法返回的是一个新Promise实例，因此可以采用链式写法，即在then方法后面再调用另一个then方法。例如：\n\n```javascript\ngetJSON(\"/post/1.json\").then(function(post) {\n    return getJSON(post.commentURL);\n}).then(function funcA(comments) {\n    console.log(\"resolved:\", comments);\n}, function funcB(err) {\n    console.log(\"rejected:\", err)\n});\n```\n3.采用箭头函数简化上述代码：\n\n```javascript\ngetJSON(\"/post/1.json\").then(\n    post => getJSON(post.commentURL)\n).then(\n    comments => console.log(\"resolved:\", comments),\n    err => console.log(\"rejected:\", err);\n);\n```\n# Promise.prototype.catch\n1.Promise.prototype.catch是.then(null, rejection)的别名，用于指定发生错误时的回调函数。例如：\n\n```javascript\ngetJSON(\"/post/1.json\").then(function(posts) {\n    // ...\n}).catch(function(error) {\n    // console.log(error);\n});\n```\n2.then方法指定的回调函数如果在运行中抛出错误，也会被catch方法捕获。\n\n3.reject方法的作用，等同于抛出错误，如果Promise状态已经变成resolved，再抛出错误是无效的。例如：\n\n```javascript\nconst promise = new Promise(function(resloved, reject) {\\\n    reslove(\"ok\");\n    throw new Error('test');\n});\n// 不会输出test\npromise.then(value => console.log(value)).catch(error => console.log(error));\n```\n4.一般来说是不需要reject函数的，总是使用catch方法，例如：\n\n```javascript\npromise\n    .then(data => console.log('success'))\n    .catch(error => console.log(error));\n```\n5.Promise内部的错误不会影响到Promise外部的代码，不会终止脚本执行。\n\n6.建议Promise对象后面要跟catch方法，catch方法返回的还是一个Promise对象，因此可以链式编程。\n\n7.如果catch后面继续调用then方法，那么当这个then方法发生错误时，就不会被捕获。\n\n# Promise.all()\n1.Promise.all方法用于将多个Promise实例，包装成一个新的Promise实例。\n\n```javascript\nconst promise = Promise.all([p1, p2, p3]);\n```\n2.Promise.all方法的参数可以不是数组，但必须有Iterator接口，且返回的每个成员都是Promise实例。\n\n3.包装的新Promise实例的状态由p1、p2、p3决定，只有p1、p2、p3的状态都变成fulfilled的，p的状态才会变成fulfilled，只要p1、p2、p3中有一个是rejected，p的状态就变成rejected。\n\n4.示例：\n\n```javascript\nconst databasePromise = connectDatabase();\nconst booksPromise = databasePromise.then(findAllBooks);\nconst userPromise = databasePromise.then(getCurrentUser);\nPromise.all([\n    booksPromise,\n    userPromise\n]).then(([book, user]) => pickTopRecommentations(books, user));\n```\n> 注：如果作为参数的Promise实例，自己定义了catch方法，那么它一旦被rejected，并不会触发Promise.all()的catch方法。\n\n# Promise.race()\n1.Promise.race方法同样是将多个Promise实例，包装成一个新的Promise实例。\n\n```javascript\nconst p = Promise.race([p1, p2, p3]);\n```\n2.p1、p2、p3中只要有一个改变状态，p的状态就跟着改变。\n\n3.示例：\n\n```javascript\nconst p = Promise.race([\n    fetch('/resource-that-may-take-a-while'),\n    new Promise(function(resolve, reject) {\n        setTimeout(() => reject(new Error('request timeout')), 5000)\n    })\n]);\np.then(response => console.log(response));\np.catch(error => console.log(error));)\n```\n# Promise.resolve()\n1.Promise.resolve方法将现有的对象转换为Promise对象\n\n```javascript\nconst jsPromise = Promise.resolve($.ajax('/whatever.json'));\n```\n2.Promise.resolve方法的参数分成四种情况：\n    (1)参数是一个Promise实例，那么Promise.resolve将不做任何修改，直接返回。\n    (2)参数是一个thenable对象，thenable对象指的是具有then方法的对象，Promise.resolve方法会将这个对象转换为Promise对象，然后立即执行thenable的then方法。\n    (3)参数不具有then方法，或者就不是对象，Promise.resolve将返回一个新的Promise对象，状态为resolved\n    (4)不带参数时，直接返回一个Promise对象\n# Promise.reject()\n1.Promise.reject()方法也会返回一个新的Promise实例，状态为rejected。例如：\n\n```javascript\nconst p = Promise.reject('出错了');\n```\n2.Promise.reject()方法的参数，会原封不动地作为reject的理由，变成后续方法的参数。\n\n3.示例：\n \n```javascript\nconst thenable = {\n    then(resolve, reject) {\n        reject('error');\n    }\n};\nPromise.reject(thenable).catch(e => {\n    console.log(e === thenable); // true\n})\n```\n# 两个有用的附加方法\n1.done()\n    (1)Promise对象的回调链，不管以then方法或catch方法结尾，要是最后一个方法抛出错误，都有可能无法捕获到，因此我们可以提供一个done方法，总是处于回调链的尾端，保证抛出任何可能出现的错误。\n    (2)示例：\n```javascript\nasyncFunc().then(f1).catch(f2).then(f2).done();\n```\n    (3)done方法实现代码:\n```javascript\nPromise.prototype.done = function(onFulfilled, onRejected) {\n    this.then(onFulfilled, onRejected)\n        .catch(function(reason) {\n            setTimeout(() => {\n                throw reason\n            }, 0)\n        });\n};\n```\n2.finally()\n    (1)finally方法用于指定不管Promise对象最后状态如何，都会执行的操作。\n    (2)示例：\n```javascript\nserver.listen(0)\n    .then(function() {\n        // run\n    })\n    .finally(server.stop)\n```\n    (3)finally方法的实现代码：\n```javascript\nPromise.prototype.finally = function(callback) {\n    let p = this.constructor;\n    return this.then(\n        value => p.resolve(callback()).then(() => value),\n        reason => p.resolve(callback()).then(() => {\n            throw reason\n        })\n    );\n};\n```\n# 应用\n1.加载图片\n    \n```javascript\nconst preloadImage = function(path) {\n    return new Promise(function(resolve, reject) {\n        const image = new Image();\n        image.onload = resolve;\n        image.error = reject;\n        image.src = path;\n    });\n};\n```\n# Promise.try()\n1.如果不知道函数是同步还是异步的，但是想用Promise来处理它，一般就会采用下面的写法：\n\n```javascript\nPromise.resolve().then(f);\n```\n2.如果函数是同步的，那么它会在本轮事件循环的末尾执行，例如：\n\n```javascript\nconst f = (() => console.log('now')); // 后打印\nPromise.resolve.then(f);\nconsole.log('next'); // 先打印\n```\n3.Promise.try是模拟try代码块，就像promise.catch模拟的是catch代码块，例如：\n\n```javascript\nPromise.try(database.users.get({\n        id: userId\n    }))\n    .then(...)\n    .catch(...)\n```\n\n","slug":"ES6入门-Promise","published":1,"updated":"2017-12-15T13:55:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjksf3cw30007h8efwup6dny4","content":"<h1 id=\"Promise对象的含义和基本用法\"><a href=\"#Promise对象的含义和基本用法\" class=\"headerlink\" title=\"Promise对象的含义和基本用法\"></a>Promise对象的含义和基本用法</h1><p>1.Promise是异步编程的一种解决方案，ES6将其写进了语言标准，统一了用法，原生提供了Promise对象。</p>\n<p>2.Promise有以下两个特点：<br>    (1) 对象状态不受外界影响。Promise对象代表一个异步操作，有三种状态：pending(进行中)、fulfilled(已成功)和rejected(已失败)。<br>    (2) 一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能，从pending变成fulfilled和从pending变成rejected。</p>\n<p>3.Promise对象是一个构造函数，用来生成Promise实例，示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( <span class=\"comment\">/*操作成功*/</span> ) &#123;</span><br><span class=\"line\">        resolve(value);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        reject(error);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>4.Promise示例生成后，可以用then方法分别指定resolved状态和rejected状态的回调函数。示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promise.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// success</span></span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// failure</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>5.简单示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timeout</span>(<span class=\"params\">ms</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        setTimeout(resolve, ms, <span class=\"string\">'done'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">timeout(<span class=\"number\">100</span>).then(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>6.Promise新建后就会立即执行，示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'promise'</span>); <span class=\"comment\">// 最先输出</span></span><br><span class=\"line\">    resolve();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'resolved'</span>); <span class=\"comment\">// 当前脚本所有同步任务执行完才执行，最后输出</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'hi'</span>); <span class=\"comment\">// 第二输出</span></span><br></pre></td></tr></table></figure>\n<p>7.异步加载图片的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadImageAsync</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> image = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\"></span><br><span class=\"line\">        image.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            resolve(image);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        image.onerror = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'could not load imag at'</span> + url));;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        image.src = url;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>8.用Promise实现Ajax的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getJSON = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> handler = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.readState !== <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.status === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">                resolve(<span class=\"keyword\">this</span>.response);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"keyword\">this</span>.statusText));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> client = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">        client.open(<span class=\"string\">\"GET\"</span>, url);</span><br><span class=\"line\">        client.onreadystatechange = handler;</span><br><span class=\"line\">        client.responseType = <span class=\"string\">\"json\"</span>;</span><br><span class=\"line\">        client.setRequestHeader(<span class=\"string\">\"Accept\"</span>, <span class=\"string\">\"application/json\"</span>);</span><br><span class=\"line\">        client.send();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> promise;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">getJSON(<span class=\"string\">\"/posts.json\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">json</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"conetent:\"</span> + json);</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.err(<span class=\"string\">\"出错了\"</span>, error);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h1 id=\"Promise-prototype-then\"><a href=\"#Promise-prototype-then\" class=\"headerlink\" title=\"Promise.prototype.then()\"></a>Promise.prototype.then()</h1><p>1.then方法是定义在原型对象Promise.prototype上的，作用是为Promise实例添加状态改变时的回调函数。</p>\n<p>2.then方法返回的是一个新Promise实例，因此可以采用链式写法，即在then方法后面再调用另一个then方法。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getJSON(<span class=\"string\">\"/post/1.json\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">post</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> getJSON(post.commentURL);</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">funcA</span>(<span class=\"params\">comments</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"resolved:\"</span>, comments);</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">funcB</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"rejected:\"</span>, err)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>3.采用箭头函数简化上述代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getJSON(<span class=\"string\">\"/post/1.json\"</span>).then(</span><br><span class=\"line\">    post =&gt; getJSON(post.commentURL)</span><br><span class=\"line\">).then(</span><br><span class=\"line\">    comments =&gt; <span class=\"built_in\">console</span>.log(<span class=\"string\">\"resolved:\"</span>, comments),</span><br><span class=\"line\">    err =&gt; <span class=\"built_in\">console</span>.log(<span class=\"string\">\"rejected:\"</span>, err);</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h1 id=\"Promise-prototype-catch\"><a href=\"#Promise-prototype-catch\" class=\"headerlink\" title=\"Promise.prototype.catch\"></a>Promise.prototype.catch</h1><p>1.Promise.prototype.catch是.then(null, rejection)的别名，用于指定发生错误时的回调函数。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getJSON(<span class=\"string\">\"/post/1.json\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">posts</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// console.log(error);</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>2.then方法指定的回调函数如果在运行中抛出错误，也会被catch方法捕获。</p>\n<p>3.reject方法的作用，等同于抛出错误，如果Promise状态已经变成resolved，再抛出错误是无效的。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resloved, reject</span>) </span>&#123;\\</span><br><span class=\"line\">    reslove(<span class=\"string\">\"ok\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'test'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 不会输出test</span></span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"built_in\">console</span>.log(value)).catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> <span class=\"built_in\">console</span>.log(error));</span><br></pre></td></tr></table></figure>\n<p>4.一般来说是不需要reject函数的，总是使用catch方法，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promise</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'success'</span>))</span><br><span class=\"line\">    .catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> <span class=\"built_in\">console</span>.log(error));</span><br></pre></td></tr></table></figure>\n<p>5.Promise内部的错误不会影响到Promise外部的代码，不会终止脚本执行。</p>\n<p>6.建议Promise对象后面要跟catch方法，catch方法返回的还是一个Promise对象，因此可以链式编程。</p>\n<p>7.如果catch后面继续调用then方法，那么当这个then方法发生错误时，就不会被捕获。</p>\n<h1 id=\"Promise-all\"><a href=\"#Promise-all\" class=\"headerlink\" title=\"Promise.all()\"></a>Promise.all()</h1><p>1.Promise.all方法用于将多个Promise实例，包装成一个新的Promise实例。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"built_in\">Promise</span>.all([p1, p2, p3]);</span><br></pre></td></tr></table></figure>\n<p>2.Promise.all方法的参数可以不是数组，但必须有Iterator接口，且返回的每个成员都是Promise实例。</p>\n<p>3.包装的新Promise实例的状态由p1、p2、p3决定，只有p1、p2、p3的状态都变成fulfilled的，p的状态才会变成fulfilled，只要p1、p2、p3中有一个是rejected，p的状态就变成rejected。</p>\n<p>4.示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> databasePromise = connectDatabase();</span><br><span class=\"line\"><span class=\"keyword\">const</span> booksPromise = databasePromise.then(findAllBooks);</span><br><span class=\"line\"><span class=\"keyword\">const</span> userPromise = databasePromise.then(getCurrentUser);</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all([</span><br><span class=\"line\">    booksPromise,</span><br><span class=\"line\">    userPromise</span><br><span class=\"line\">]).then(<span class=\"function\">(<span class=\"params\">[book, user]</span>) =&gt;</span> pickTopRecommentations(books, user));</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注：如果作为参数的Promise实例，自己定义了catch方法，那么它一旦被rejected，并不会触发Promise.all()的catch方法。</p>\n</blockquote>\n<h1 id=\"Promise-race\"><a href=\"#Promise-race\" class=\"headerlink\" title=\"Promise.race()\"></a>Promise.race()</h1><p>1.Promise.race方法同样是将多个Promise实例，包装成一个新的Promise实例。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"built_in\">Promise</span>.race([p1, p2, p3]);</span><br></pre></td></tr></table></figure>\n<p>2.p1、p2、p3中只要有一个改变状态，p的状态就跟着改变。</p>\n<p>3.示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"built_in\">Promise</span>.race([</span><br><span class=\"line\">    fetch(<span class=\"string\">'/resource-that-may-take-a-while'</span>),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'request timeout'</span>)), <span class=\"number\">5000</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">]);</span><br><span class=\"line\">p.then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> <span class=\"built_in\">console</span>.log(response));</span><br><span class=\"line\">p.catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> <span class=\"built_in\">console</span>.log(error));)</span><br></pre></td></tr></table></figure>\n<h1 id=\"Promise-resolve\"><a href=\"#Promise-resolve\" class=\"headerlink\" title=\"Promise.resolve()\"></a>Promise.resolve()</h1><p>1.Promise.resolve方法将现有的对象转换为Promise对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> jsPromise = <span class=\"built_in\">Promise</span>.resolve($.ajax(<span class=\"string\">'/whatever.json'</span>));</span><br></pre></td></tr></table></figure>\n<p>2.Promise.resolve方法的参数分成四种情况：<br>    (1)参数是一个Promise实例，那么Promise.resolve将不做任何修改，直接返回。<br>    (2)参数是一个thenable对象，thenable对象指的是具有then方法的对象，Promise.resolve方法会将这个对象转换为Promise对象，然后立即执行thenable的then方法。<br>    (3)参数不具有then方法，或者就不是对象，Promise.resolve将返回一个新的Promise对象，状态为resolved<br>    (4)不带参数时，直接返回一个Promise对象</p>\n<h1 id=\"Promise-reject\"><a href=\"#Promise-reject\" class=\"headerlink\" title=\"Promise.reject()\"></a>Promise.reject()</h1><p>1.Promise.reject()方法也会返回一个新的Promise实例，状态为rejected。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"built_in\">Promise</span>.reject(<span class=\"string\">'出错了'</span>);</span><br></pre></td></tr></table></figure>\n<p>2.Promise.reject()方法的参数，会原封不动地作为reject的理由，变成后续方法的参数。</p>\n<p>3.示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> thenable = &#123;</span><br><span class=\"line\">    then(resolve, reject) &#123;</span><br><span class=\"line\">        reject(<span class=\"string\">'error'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.reject(thenable).catch(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(e === thenable); <span class=\"comment\">// true</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h1 id=\"两个有用的附加方法\"><a href=\"#两个有用的附加方法\" class=\"headerlink\" title=\"两个有用的附加方法\"></a>两个有用的附加方法</h1><p>1.done()<br>    (1)Promise对象的回调链，不管以then方法或catch方法结尾，要是最后一个方法抛出错误，都有可能无法捕获到，因此我们可以提供一个done方法，总是处于回调链的尾端，保证抛出任何可能出现的错误。<br>    (2)示例：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">asyncFunc().then(f1).catch(f2).then(f2).done();</span><br></pre></td></tr></table></figure></p>\n<pre><code>(3)done方法实现代码:\n</code></pre><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.done = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">onFulfilled, onRejected</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.then(onFulfilled, onRejected)</span><br><span class=\"line\">        .catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">            setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> reason</span><br><span class=\"line\">            &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>2.finally()<br>    (1)finally方法用于指定不管Promise对象最后状态如何，都会执行的操作。<br>    (2)示例：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server.listen(<span class=\"number\">0</span>)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// run</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .finally(server.stop)</span><br></pre></td></tr></table></figure></p>\n<pre><code>(3)finally方法的实现代码：\n</code></pre><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.finally = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> p = <span class=\"keyword\">this</span>.constructor;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(</span><br><span class=\"line\">        value =&gt; p.resolve(callback()).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> value),</span><br><span class=\"line\">        reason =&gt; p.resolve(callback()).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> reason</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h1 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h1><p>1.加载图片</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> preloadImage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">path</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> image = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\">        image.onload = resolve;</span><br><span class=\"line\">        image.error = reject;</span><br><span class=\"line\">        image.src = path;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Promise-try\"><a href=\"#Promise-try\" class=\"headerlink\" title=\"Promise.try()\"></a>Promise.try()</h1><p>1.如果不知道函数是同步还是异步的，但是想用Promise来处理它，一般就会采用下面的写法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve().then(f);</span><br></pre></td></tr></table></figure>\n<p>2.如果函数是同步的，那么它会在本轮事件循环的末尾执行，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> f = <span class=\"function\">(<span class=\"params\">(</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'now'</span>)); <span class=\"comment\">// 后打印</span></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve.then(f);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'next'</span>); <span class=\"comment\">// 先打印</span></span><br></pre></td></tr></table></figure>\n<p>3.Promise.try是模拟try代码块，就像promise.catch模拟的是catch代码块，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.try(database.users.get(&#123;</span><br><span class=\"line\">        id: userId</span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\">    .then(...)</span><br><span class=\"line\">    .catch(...)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Promise对象的含义和基本用法\"><a href=\"#Promise对象的含义和基本用法\" class=\"headerlink\" title=\"Promise对象的含义和基本用法\"></a>Promise对象的含义和基本用法</h1><p>1.Promise是异步编程的一种解决方案，ES6将其写进了语言标准，统一了用法，原生提供了Promise对象。</p>\n<p>2.Promise有以下两个特点：<br>    (1) 对象状态不受外界影响。Promise对象代表一个异步操作，有三种状态：pending(进行中)、fulfilled(已成功)和rejected(已失败)。<br>    (2) 一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能，从pending变成fulfilled和从pending变成rejected。</p>\n<p>3.Promise对象是一个构造函数，用来生成Promise实例，示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( <span class=\"comment\">/*操作成功*/</span> ) &#123;</span><br><span class=\"line\">        resolve(value);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        reject(error);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>4.Promise示例生成后，可以用then方法分别指定resolved状态和rejected状态的回调函数。示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promise.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// success</span></span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// failure</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>5.简单示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timeout</span>(<span class=\"params\">ms</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        setTimeout(resolve, ms, <span class=\"string\">'done'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">timeout(<span class=\"number\">100</span>).then(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>6.Promise新建后就会立即执行，示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'promise'</span>); <span class=\"comment\">// 最先输出</span></span><br><span class=\"line\">    resolve();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'resolved'</span>); <span class=\"comment\">// 当前脚本所有同步任务执行完才执行，最后输出</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'hi'</span>); <span class=\"comment\">// 第二输出</span></span><br></pre></td></tr></table></figure>\n<p>7.异步加载图片的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadImageAsync</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> image = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\"></span><br><span class=\"line\">        image.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            resolve(image);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        image.onerror = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'could not load imag at'</span> + url));;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        image.src = url;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>8.用Promise实现Ajax的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getJSON = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> handler = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.readState !== <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.status === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">                resolve(<span class=\"keyword\">this</span>.response);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"keyword\">this</span>.statusText));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> client = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">        client.open(<span class=\"string\">\"GET\"</span>, url);</span><br><span class=\"line\">        client.onreadystatechange = handler;</span><br><span class=\"line\">        client.responseType = <span class=\"string\">\"json\"</span>;</span><br><span class=\"line\">        client.setRequestHeader(<span class=\"string\">\"Accept\"</span>, <span class=\"string\">\"application/json\"</span>);</span><br><span class=\"line\">        client.send();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> promise;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">getJSON(<span class=\"string\">\"/posts.json\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">json</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"conetent:\"</span> + json);</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.err(<span class=\"string\">\"出错了\"</span>, error);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h1 id=\"Promise-prototype-then\"><a href=\"#Promise-prototype-then\" class=\"headerlink\" title=\"Promise.prototype.then()\"></a>Promise.prototype.then()</h1><p>1.then方法是定义在原型对象Promise.prototype上的，作用是为Promise实例添加状态改变时的回调函数。</p>\n<p>2.then方法返回的是一个新Promise实例，因此可以采用链式写法，即在then方法后面再调用另一个then方法。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getJSON(<span class=\"string\">\"/post/1.json\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">post</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> getJSON(post.commentURL);</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">funcA</span>(<span class=\"params\">comments</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"resolved:\"</span>, comments);</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">funcB</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"rejected:\"</span>, err)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>3.采用箭头函数简化上述代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getJSON(<span class=\"string\">\"/post/1.json\"</span>).then(</span><br><span class=\"line\">    post =&gt; getJSON(post.commentURL)</span><br><span class=\"line\">).then(</span><br><span class=\"line\">    comments =&gt; <span class=\"built_in\">console</span>.log(<span class=\"string\">\"resolved:\"</span>, comments),</span><br><span class=\"line\">    err =&gt; <span class=\"built_in\">console</span>.log(<span class=\"string\">\"rejected:\"</span>, err);</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h1 id=\"Promise-prototype-catch\"><a href=\"#Promise-prototype-catch\" class=\"headerlink\" title=\"Promise.prototype.catch\"></a>Promise.prototype.catch</h1><p>1.Promise.prototype.catch是.then(null, rejection)的别名，用于指定发生错误时的回调函数。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getJSON(<span class=\"string\">\"/post/1.json\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">posts</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// console.log(error);</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>2.then方法指定的回调函数如果在运行中抛出错误，也会被catch方法捕获。</p>\n<p>3.reject方法的作用，等同于抛出错误，如果Promise状态已经变成resolved，再抛出错误是无效的。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resloved, reject</span>) </span>&#123;\\</span><br><span class=\"line\">    reslove(<span class=\"string\">\"ok\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'test'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 不会输出test</span></span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"built_in\">console</span>.log(value)).catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> <span class=\"built_in\">console</span>.log(error));</span><br></pre></td></tr></table></figure>\n<p>4.一般来说是不需要reject函数的，总是使用catch方法，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promise</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'success'</span>))</span><br><span class=\"line\">    .catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> <span class=\"built_in\">console</span>.log(error));</span><br></pre></td></tr></table></figure>\n<p>5.Promise内部的错误不会影响到Promise外部的代码，不会终止脚本执行。</p>\n<p>6.建议Promise对象后面要跟catch方法，catch方法返回的还是一个Promise对象，因此可以链式编程。</p>\n<p>7.如果catch后面继续调用then方法，那么当这个then方法发生错误时，就不会被捕获。</p>\n<h1 id=\"Promise-all\"><a href=\"#Promise-all\" class=\"headerlink\" title=\"Promise.all()\"></a>Promise.all()</h1><p>1.Promise.all方法用于将多个Promise实例，包装成一个新的Promise实例。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"built_in\">Promise</span>.all([p1, p2, p3]);</span><br></pre></td></tr></table></figure>\n<p>2.Promise.all方法的参数可以不是数组，但必须有Iterator接口，且返回的每个成员都是Promise实例。</p>\n<p>3.包装的新Promise实例的状态由p1、p2、p3决定，只有p1、p2、p3的状态都变成fulfilled的，p的状态才会变成fulfilled，只要p1、p2、p3中有一个是rejected，p的状态就变成rejected。</p>\n<p>4.示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> databasePromise = connectDatabase();</span><br><span class=\"line\"><span class=\"keyword\">const</span> booksPromise = databasePromise.then(findAllBooks);</span><br><span class=\"line\"><span class=\"keyword\">const</span> userPromise = databasePromise.then(getCurrentUser);</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all([</span><br><span class=\"line\">    booksPromise,</span><br><span class=\"line\">    userPromise</span><br><span class=\"line\">]).then(<span class=\"function\">(<span class=\"params\">[book, user]</span>) =&gt;</span> pickTopRecommentations(books, user));</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注：如果作为参数的Promise实例，自己定义了catch方法，那么它一旦被rejected，并不会触发Promise.all()的catch方法。</p>\n</blockquote>\n<h1 id=\"Promise-race\"><a href=\"#Promise-race\" class=\"headerlink\" title=\"Promise.race()\"></a>Promise.race()</h1><p>1.Promise.race方法同样是将多个Promise实例，包装成一个新的Promise实例。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"built_in\">Promise</span>.race([p1, p2, p3]);</span><br></pre></td></tr></table></figure>\n<p>2.p1、p2、p3中只要有一个改变状态，p的状态就跟着改变。</p>\n<p>3.示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"built_in\">Promise</span>.race([</span><br><span class=\"line\">    fetch(<span class=\"string\">'/resource-that-may-take-a-while'</span>),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'request timeout'</span>)), <span class=\"number\">5000</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">]);</span><br><span class=\"line\">p.then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> <span class=\"built_in\">console</span>.log(response));</span><br><span class=\"line\">p.catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> <span class=\"built_in\">console</span>.log(error));)</span><br></pre></td></tr></table></figure>\n<h1 id=\"Promise-resolve\"><a href=\"#Promise-resolve\" class=\"headerlink\" title=\"Promise.resolve()\"></a>Promise.resolve()</h1><p>1.Promise.resolve方法将现有的对象转换为Promise对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> jsPromise = <span class=\"built_in\">Promise</span>.resolve($.ajax(<span class=\"string\">'/whatever.json'</span>));</span><br></pre></td></tr></table></figure>\n<p>2.Promise.resolve方法的参数分成四种情况：<br>    (1)参数是一个Promise实例，那么Promise.resolve将不做任何修改，直接返回。<br>    (2)参数是一个thenable对象，thenable对象指的是具有then方法的对象，Promise.resolve方法会将这个对象转换为Promise对象，然后立即执行thenable的then方法。<br>    (3)参数不具有then方法，或者就不是对象，Promise.resolve将返回一个新的Promise对象，状态为resolved<br>    (4)不带参数时，直接返回一个Promise对象</p>\n<h1 id=\"Promise-reject\"><a href=\"#Promise-reject\" class=\"headerlink\" title=\"Promise.reject()\"></a>Promise.reject()</h1><p>1.Promise.reject()方法也会返回一个新的Promise实例，状态为rejected。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"built_in\">Promise</span>.reject(<span class=\"string\">'出错了'</span>);</span><br></pre></td></tr></table></figure>\n<p>2.Promise.reject()方法的参数，会原封不动地作为reject的理由，变成后续方法的参数。</p>\n<p>3.示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> thenable = &#123;</span><br><span class=\"line\">    then(resolve, reject) &#123;</span><br><span class=\"line\">        reject(<span class=\"string\">'error'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.reject(thenable).catch(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(e === thenable); <span class=\"comment\">// true</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h1 id=\"两个有用的附加方法\"><a href=\"#两个有用的附加方法\" class=\"headerlink\" title=\"两个有用的附加方法\"></a>两个有用的附加方法</h1><p>1.done()<br>    (1)Promise对象的回调链，不管以then方法或catch方法结尾，要是最后一个方法抛出错误，都有可能无法捕获到，因此我们可以提供一个done方法，总是处于回调链的尾端，保证抛出任何可能出现的错误。<br>    (2)示例：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">asyncFunc().then(f1).catch(f2).then(f2).done();</span><br></pre></td></tr></table></figure></p>\n<pre><code>(3)done方法实现代码:\n</code></pre><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.done = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">onFulfilled, onRejected</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.then(onFulfilled, onRejected)</span><br><span class=\"line\">        .catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">            setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> reason</span><br><span class=\"line\">            &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>2.finally()<br>    (1)finally方法用于指定不管Promise对象最后状态如何，都会执行的操作。<br>    (2)示例：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server.listen(<span class=\"number\">0</span>)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// run</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .finally(server.stop)</span><br></pre></td></tr></table></figure></p>\n<pre><code>(3)finally方法的实现代码：\n</code></pre><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.finally = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> p = <span class=\"keyword\">this</span>.constructor;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(</span><br><span class=\"line\">        value =&gt; p.resolve(callback()).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> value),</span><br><span class=\"line\">        reason =&gt; p.resolve(callback()).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> reason</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h1 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h1><p>1.加载图片</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> preloadImage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">path</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> image = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\">        image.onload = resolve;</span><br><span class=\"line\">        image.error = reject;</span><br><span class=\"line\">        image.src = path;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Promise-try\"><a href=\"#Promise-try\" class=\"headerlink\" title=\"Promise.try()\"></a>Promise.try()</h1><p>1.如果不知道函数是同步还是异步的，但是想用Promise来处理它，一般就会采用下面的写法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve().then(f);</span><br></pre></td></tr></table></figure>\n<p>2.如果函数是同步的，那么它会在本轮事件循环的末尾执行，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> f = <span class=\"function\">(<span class=\"params\">(</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'now'</span>)); <span class=\"comment\">// 后打印</span></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve.then(f);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'next'</span>); <span class=\"comment\">// 先打印</span></span><br></pre></td></tr></table></figure>\n<p>3.Promise.try是模拟try代码块，就像promise.catch模拟的是catch代码块，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.try(database.users.get(&#123;</span><br><span class=\"line\">        id: userId</span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\">    .then(...)</span><br><span class=\"line\">    .catch(...)</span><br></pre></td></tr></table></figure>\n"},{"title":"ES6入门-Proxy","date":"2018-01-28T03:28:40.000Z","description":"ES6入门--Proxy","_content":"# 概述\n\n1. Proxy用于修改某些操作的默认行为，属于一种“元编程”，即对编程语言进行编程。\n\n\tProxy译为代理器，它在目标对象之前架设一层拦截，提供一种机制，来对外界的访问进行过滤和改写。\n\t\n\t示例：\n\t\t\n\t```javascript\n\tvar obj = new Proxy({}, {\n\t    get: function(target, key, receiver) {\n\t        console.log(`getting${key}`);\n\t        return Reflect.get(target, key, receiver);\n\t    },\n\t    set: function(target, key, value, receiver) {\n\t        console.log(`setting${key}`);\n\t        return Reflect.set(target, key.value, receiver);\n\t    }\n\t})\n\t```\n\t解释：上面代码对空对象架设一层拦截，拦截了get和set方法，当调用对象的get和set方法就会先执行Proxy里的操作。\n\n2. ES6原生提供了Proxy的构造函数，用来生成Proxy实例：\n\n\t```javascript\n\tvar proxy = new Proxy(target, handle);\n\t```\n\t解释：参数target表示要拦截的目标对象，handle也是一个对象，用来设置拦截行为。该构造函数返回一个对象，即proxy代理对象。\n\n\t> 注：要使Proxy起作用，必须针对Proxy实例进行操作，而不是针对目标对象进行操作。如果handle参数没有做任何拦截，则等同于直接通向源对象。\n\n3. 可以将在Object对象里设置proxy属性，直接调用Object.proxy。也可以将对象的原型设置为Proxy对象。\n\t\n\t示例：\n\t```javascript\n\tvar object = {\n\t    proxy: new Proxy(target, handle)\n\t};\n\n\t// 设置原型对象\n\tvar proxy = new Proxy({},{});\n\tlet obj = Object.create(proxy);\n\t```\n\n# 实例方法\n\n1. get()\n\tget()方法用于拦截某个属性的读取操作，接收三个参数，目标对象、属性名和proxy实例本身，最后一个参数可选。\n\t示例：\n\t\n\t```javascript\n\tvar person = {\n\t    name: 'jack'\n\t};\n\t\n\tvar proxy = new Proxy(person, {\n\t    get: function(target, property) {\n\t        if (property in target) {\n\t            return target[property];\n\t        } else {\n\t            throw new Error('error');\n\t        }\n\t    }\n\t});\n\t\n\tperson.name; // jack\n\tperson.age; // error\n\t```\n\n2. set()\n\n\t用来拦截某个属性的赋值操作，可以接受四个参数，依次为目标对象、属性名、属性值和Proxy实例本身，最后一个参数可选。\n\t示例：\n\t\n\t```javascript\n\tlet validator = {\n\t    set: function(target, key, value) {\n\t        if (key === 'age') {\n\t            if (value > 200) {\n\t                throw new Error('error');\n\t            }\n\t        }\n\t    }\n\t}\n\tvar person = new Proxy({}, validator);\n\tperson.age = 500; // error\n\t```\n\n3. apply()\n\n\tapply()方法拦截参数的调用，call和apply操作。该方法接受三个参数，分别是目标对象，上下文对象(this)和目标对象的参数数组。\n\t示例：\n\n\t```javascript\n\tvar handle = {\n\t    apply: function(target, ctx, args) {\n\t        return Reflect.apply(...args);\n\t    }\n\t}\n\t```\n\n4. has()\n\n\thas()方法用来拦截HasProperty()操作，即判断某个对象是否具有某个属性时，这个方法会生效，典型操作时in运算符。\n\t示例：\n\n\t```javascript\n\tvar handle = {\n\t    has(target, key) {\n\t        if (key[0] === '-') {\n\t            return false;\n\t        }\n\t        return key in target;\n\t    }\n\t}\n\t\n\tlet person = {\n\t    _name: 'jack',\n\t    age: 19\n\t};\n\t\n\tlet proxyPerson = new Proxy(person, handle);\n\t\n\t// 检测私有属性\n\t_name in proxyPerson // false\n\t```\n\n5. construct()\n\n\tconstruct()方法用于拦截 new 命令。该方法接受两个参数依次为目标对象和目标对象的参数。\n\n\t示例：\n\n\t```javascript\n\tvar p = new Proxy(function() {}, {\n\t    construct: function(target, args) {\n\t        console.log('construct');\n\t        return {\n\t            value: args[0] * 10\n\t        };\n\t    }\n\t});\n\tnew p(1).value; // 10\n\t```\n\n\t> 注：construct()方法必须返回一个对象，否则会报错。\n\n6. deleteProperty()\n\n\t该方法用于拦截 delete 操作，如果这个方法抛出错误或者返回 false，则当前属性就无法被 delete 命令删除。\n\t\n\t示例：\n\n\t```javascript\n\tvar proxy = new Proxy({\n\t    _foo: 'foo'\n\t}, {\n\t    deleteProperty: function(target, key) {\n\t        if (key[0] === '_') {\n\t            throw new Error('error');\n\t        }\n\t        return true;\n\t    }\n\t});\n\t```\n\n\t> 注：目标对象自身的不可配置（configurable）的属性，不能被 deleteProperty()删除。\n\n7. defineProperty()\n\n\t该方法拦截了 Object.defineProperty()的操作。\n\n8. getOwnPropertyDescriptor()\n\n\t该方法拦截了 Object.getOwnPropertyDescriptor()，返回一个属性描述对象或者 undefined。\n\n9. getPrototypeOf()\n\n\t该方法用来拦截获取对象原型，getPrototypeOf()方法的返回值必须是对象或者 null，如果目标对象不可扩展，则该方法必须返回原型对象。\n\n10. isExtensible()\n\n\t该方法拦截 Object.isExtensible 操作，该方法只能返回布尔值，否则只会被自动转为布尔值。\n\n11. ownKeys()\n\n\t该方法用来拦截对象自身的读取操作。\n\n12. preventExtensions()\n\n\t该方法拦截 Object.preventExtensions()方法，必须返回一个布尔值。否则会自动转为布尔值。\n\n13. setPrototypeOf()\n\n\t该方法拦截 Object.setPrototypeOf()方法，拦截修改原型的方法，只能返回布尔值，否则会自动转为布尔值。\n\n# revocable方法\n\n该方法返回一个可取消的 Proxy 实例。\n\n示例：\n\n```javascript\nlet target = {};\nlet handle = {};\n\nlet {\n    proxy,\n    revoke\n} = Proxy.revocable(target, handle);\n\nproxy.foo = 123;\nproxy.foo; // 123\n\nrevoke();\nproxy.foo; // error\n```\n\n# this问题\n\nProxy 代理下，目标对象的内部 this 会指向 Proxy 代理。\n\n示例：\n\n```javascript\nconst target = {\n    m: function() {\n        console.log(this === proxy);\n    }\n};\nconst handle = {};\n\nconst proxy = new Proxy(target, handle);\n\ntarget.m; // false\nproxy.m; // true\n```\n\n# 实例\n\n```javascript\nfunction createWebService(baseUrl) {\n    return new Proxy({}, {\n        get(target, key, receiver) {\n            return () => httpGet(baseUrl + '/' + key);\n        }\n    });\n}\n\nconst service = createWebService('http://example.com/data');\nservice.employees().then(json => {\n    const employees = JSON.parse(json);\n});\n```\n","source":"_posts/ES6入门-Proxy.md","raw":"---\ntitle: ES6入门-Proxy\ndate: 2018-01-28 11:28:40\ncategories: ES6入门\ntags:\n     - 笔记\n     - JavaScript\n     - ECMAScript 2015\ndescription: ES6入门--Proxy\n---\n# 概述\n\n1. Proxy用于修改某些操作的默认行为，属于一种“元编程”，即对编程语言进行编程。\n\n\tProxy译为代理器，它在目标对象之前架设一层拦截，提供一种机制，来对外界的访问进行过滤和改写。\n\t\n\t示例：\n\t\t\n\t```javascript\n\tvar obj = new Proxy({}, {\n\t    get: function(target, key, receiver) {\n\t        console.log(`getting${key}`);\n\t        return Reflect.get(target, key, receiver);\n\t    },\n\t    set: function(target, key, value, receiver) {\n\t        console.log(`setting${key}`);\n\t        return Reflect.set(target, key.value, receiver);\n\t    }\n\t})\n\t```\n\t解释：上面代码对空对象架设一层拦截，拦截了get和set方法，当调用对象的get和set方法就会先执行Proxy里的操作。\n\n2. ES6原生提供了Proxy的构造函数，用来生成Proxy实例：\n\n\t```javascript\n\tvar proxy = new Proxy(target, handle);\n\t```\n\t解释：参数target表示要拦截的目标对象，handle也是一个对象，用来设置拦截行为。该构造函数返回一个对象，即proxy代理对象。\n\n\t> 注：要使Proxy起作用，必须针对Proxy实例进行操作，而不是针对目标对象进行操作。如果handle参数没有做任何拦截，则等同于直接通向源对象。\n\n3. 可以将在Object对象里设置proxy属性，直接调用Object.proxy。也可以将对象的原型设置为Proxy对象。\n\t\n\t示例：\n\t```javascript\n\tvar object = {\n\t    proxy: new Proxy(target, handle)\n\t};\n\n\t// 设置原型对象\n\tvar proxy = new Proxy({},{});\n\tlet obj = Object.create(proxy);\n\t```\n\n# 实例方法\n\n1. get()\n\tget()方法用于拦截某个属性的读取操作，接收三个参数，目标对象、属性名和proxy实例本身，最后一个参数可选。\n\t示例：\n\t\n\t```javascript\n\tvar person = {\n\t    name: 'jack'\n\t};\n\t\n\tvar proxy = new Proxy(person, {\n\t    get: function(target, property) {\n\t        if (property in target) {\n\t            return target[property];\n\t        } else {\n\t            throw new Error('error');\n\t        }\n\t    }\n\t});\n\t\n\tperson.name; // jack\n\tperson.age; // error\n\t```\n\n2. set()\n\n\t用来拦截某个属性的赋值操作，可以接受四个参数，依次为目标对象、属性名、属性值和Proxy实例本身，最后一个参数可选。\n\t示例：\n\t\n\t```javascript\n\tlet validator = {\n\t    set: function(target, key, value) {\n\t        if (key === 'age') {\n\t            if (value > 200) {\n\t                throw new Error('error');\n\t            }\n\t        }\n\t    }\n\t}\n\tvar person = new Proxy({}, validator);\n\tperson.age = 500; // error\n\t```\n\n3. apply()\n\n\tapply()方法拦截参数的调用，call和apply操作。该方法接受三个参数，分别是目标对象，上下文对象(this)和目标对象的参数数组。\n\t示例：\n\n\t```javascript\n\tvar handle = {\n\t    apply: function(target, ctx, args) {\n\t        return Reflect.apply(...args);\n\t    }\n\t}\n\t```\n\n4. has()\n\n\thas()方法用来拦截HasProperty()操作，即判断某个对象是否具有某个属性时，这个方法会生效，典型操作时in运算符。\n\t示例：\n\n\t```javascript\n\tvar handle = {\n\t    has(target, key) {\n\t        if (key[0] === '-') {\n\t            return false;\n\t        }\n\t        return key in target;\n\t    }\n\t}\n\t\n\tlet person = {\n\t    _name: 'jack',\n\t    age: 19\n\t};\n\t\n\tlet proxyPerson = new Proxy(person, handle);\n\t\n\t// 检测私有属性\n\t_name in proxyPerson // false\n\t```\n\n5. construct()\n\n\tconstruct()方法用于拦截 new 命令。该方法接受两个参数依次为目标对象和目标对象的参数。\n\n\t示例：\n\n\t```javascript\n\tvar p = new Proxy(function() {}, {\n\t    construct: function(target, args) {\n\t        console.log('construct');\n\t        return {\n\t            value: args[0] * 10\n\t        };\n\t    }\n\t});\n\tnew p(1).value; // 10\n\t```\n\n\t> 注：construct()方法必须返回一个对象，否则会报错。\n\n6. deleteProperty()\n\n\t该方法用于拦截 delete 操作，如果这个方法抛出错误或者返回 false，则当前属性就无法被 delete 命令删除。\n\t\n\t示例：\n\n\t```javascript\n\tvar proxy = new Proxy({\n\t    _foo: 'foo'\n\t}, {\n\t    deleteProperty: function(target, key) {\n\t        if (key[0] === '_') {\n\t            throw new Error('error');\n\t        }\n\t        return true;\n\t    }\n\t});\n\t```\n\n\t> 注：目标对象自身的不可配置（configurable）的属性，不能被 deleteProperty()删除。\n\n7. defineProperty()\n\n\t该方法拦截了 Object.defineProperty()的操作。\n\n8. getOwnPropertyDescriptor()\n\n\t该方法拦截了 Object.getOwnPropertyDescriptor()，返回一个属性描述对象或者 undefined。\n\n9. getPrototypeOf()\n\n\t该方法用来拦截获取对象原型，getPrototypeOf()方法的返回值必须是对象或者 null，如果目标对象不可扩展，则该方法必须返回原型对象。\n\n10. isExtensible()\n\n\t该方法拦截 Object.isExtensible 操作，该方法只能返回布尔值，否则只会被自动转为布尔值。\n\n11. ownKeys()\n\n\t该方法用来拦截对象自身的读取操作。\n\n12. preventExtensions()\n\n\t该方法拦截 Object.preventExtensions()方法，必须返回一个布尔值。否则会自动转为布尔值。\n\n13. setPrototypeOf()\n\n\t该方法拦截 Object.setPrototypeOf()方法，拦截修改原型的方法，只能返回布尔值，否则会自动转为布尔值。\n\n# revocable方法\n\n该方法返回一个可取消的 Proxy 实例。\n\n示例：\n\n```javascript\nlet target = {};\nlet handle = {};\n\nlet {\n    proxy,\n    revoke\n} = Proxy.revocable(target, handle);\n\nproxy.foo = 123;\nproxy.foo; // 123\n\nrevoke();\nproxy.foo; // error\n```\n\n# this问题\n\nProxy 代理下，目标对象的内部 this 会指向 Proxy 代理。\n\n示例：\n\n```javascript\nconst target = {\n    m: function() {\n        console.log(this === proxy);\n    }\n};\nconst handle = {};\n\nconst proxy = new Proxy(target, handle);\n\ntarget.m; // false\nproxy.m; // true\n```\n\n# 实例\n\n```javascript\nfunction createWebService(baseUrl) {\n    return new Proxy({}, {\n        get(target, key, receiver) {\n            return () => httpGet(baseUrl + '/' + key);\n        }\n    });\n}\n\nconst service = createWebService('http://example.com/data');\nservice.employees().then(json => {\n    const employees = JSON.parse(json);\n});\n```\n","slug":"ES6入门-Proxy","published":1,"updated":"2018-01-29T13:25:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjksf3cw4000ah8efcagkhshc","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><ol>\n<li><p>Proxy用于修改某些操作的默认行为，属于一种“元编程”，即对编程语言进行编程。</p>\n<p> Proxy译为代理器，它在目标对象之前架设一层拦截，提供一种机制，来对外界的访问进行过滤和改写。</p>\n<p> 示例：</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125;, &#123;</span><br><span class=\"line\">    get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, key, receiver</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`getting<span class=\"subst\">$&#123;key&#125;</span>`</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.get(target, key, receiver);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    set: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, key, value, receiver</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`setting<span class=\"subst\">$&#123;key&#125;</span>`</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.set(target, key.value, receiver);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p> 解释：上面代码对空对象架设一层拦截，拦截了get和set方法，当调用对象的get和set方法就会先执行Proxy里的操作。</p>\n</li>\n<li><p>ES6原生提供了Proxy的构造函数，用来生成Proxy实例：</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handle);</span><br></pre></td></tr></table></figure>\n<p> 解释：参数target表示要拦截的目标对象，handle也是一个对象，用来设置拦截行为。该构造函数返回一个对象，即proxy代理对象。</p>\n<blockquote>\n<p>注：要使Proxy起作用，必须针对Proxy实例进行操作，而不是针对目标对象进行操作。如果handle参数没有做任何拦截，则等同于直接通向源对象。</p>\n</blockquote>\n</li>\n<li><p>可以将在Object对象里设置proxy属性，直接调用Object.proxy。也可以将对象的原型设置为Proxy对象。</p>\n<p> 示例：</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> object = &#123;</span><br><span class=\"line\">    proxy: <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handle)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置原型对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125;,&#123;&#125;);</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = <span class=\"built_in\">Object</span>.create(proxy);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"实例方法\"><a href=\"#实例方法\" class=\"headerlink\" title=\"实例方法\"></a>实例方法</h1><ol>\n<li><p>get()<br> get()方法用于拦截某个属性的读取操作，接收三个参数，目标对象、属性名和proxy实例本身，最后一个参数可选。<br> 示例：</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'jack'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(person, &#123;</span><br><span class=\"line\">    get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, property</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (property <span class=\"keyword\">in</span> target) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> target[property];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'error'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">person.name; <span class=\"comment\">// jack</span></span><br><span class=\"line\">person.age; <span class=\"comment\">// error</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>set()</p>\n<p> 用来拦截某个属性的赋值操作，可以接受四个参数，依次为目标对象、属性名、属性值和Proxy实例本身，最后一个参数可选。<br> 示例：</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> validator = &#123;</span><br><span class=\"line\">    set: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, key, value</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (key === <span class=\"string\">'age'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (value &gt; <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'error'</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125;, validator);</span><br><span class=\"line\">person.age = <span class=\"number\">500</span>; <span class=\"comment\">// error</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>apply()</p>\n<p> apply()方法拦截参数的调用，call和apply操作。该方法接受三个参数，分别是目标对象，上下文对象(this)和目标对象的参数数组。<br> 示例：</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> handle = &#123;</span><br><span class=\"line\">    apply: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, ctx, args</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.apply(...args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>has()</p>\n<p> has()方法用来拦截HasProperty()操作，即判断某个对象是否具有某个属性时，这个方法会生效，典型操作时in运算符。<br> 示例：</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> handle = &#123;</span><br><span class=\"line\">    has(target, key) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (key[<span class=\"number\">0</span>] === <span class=\"string\">'-'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> key <span class=\"keyword\">in</span> target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> person = &#123;</span><br><span class=\"line\">    _name: <span class=\"string\">'jack'</span>,</span><br><span class=\"line\">    age: <span class=\"number\">19</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> proxyPerson = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(person, handle);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 检测私有属性</span></span><br><span class=\"line\">_name <span class=\"keyword\">in</span> proxyPerson <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>construct()</p>\n<p> construct()方法用于拦截 new 命令。该方法接受两个参数依次为目标对象和目标对象的参数。</p>\n<p> 示例：</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;, &#123;</span><br><span class=\"line\">    construct: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, args</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'construct'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            value: args[<span class=\"number\">0</span>] * <span class=\"number\">10</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">new</span> p(<span class=\"number\">1</span>).value; <span class=\"comment\">// 10</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注：construct()方法必须返回一个对象，否则会报错。</p>\n</blockquote>\n</li>\n<li><p>deleteProperty()</p>\n<p> 该方法用于拦截 delete 操作，如果这个方法抛出错误或者返回 false，则当前属性就无法被 delete 命令删除。</p>\n<p> 示例：</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;</span><br><span class=\"line\">    _foo: <span class=\"string\">'foo'</span></span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">    deleteProperty: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, key</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (key[<span class=\"number\">0</span>] === <span class=\"string\">'_'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'error'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注：目标对象自身的不可配置（configurable）的属性，不能被 deleteProperty()删除。</p>\n</blockquote>\n</li>\n<li><p>defineProperty()</p>\n<p> 该方法拦截了 Object.defineProperty()的操作。</p>\n</li>\n<li><p>getOwnPropertyDescriptor()</p>\n<p> 该方法拦截了 Object.getOwnPropertyDescriptor()，返回一个属性描述对象或者 undefined。</p>\n</li>\n<li><p>getPrototypeOf()</p>\n<p> 该方法用来拦截获取对象原型，getPrototypeOf()方法的返回值必须是对象或者 null，如果目标对象不可扩展，则该方法必须返回原型对象。</p>\n</li>\n<li><p>isExtensible()</p>\n<p>该方法拦截 Object.isExtensible 操作，该方法只能返回布尔值，否则只会被自动转为布尔值。</p>\n</li>\n<li><p>ownKeys()</p>\n<p>该方法用来拦截对象自身的读取操作。</p>\n</li>\n<li><p>preventExtensions()</p>\n<p>该方法拦截 Object.preventExtensions()方法，必须返回一个布尔值。否则会自动转为布尔值。</p>\n</li>\n<li><p>setPrototypeOf()</p>\n<p>该方法拦截 Object.setPrototypeOf()方法，拦截修改原型的方法，只能返回布尔值，否则会自动转为布尔值。</p>\n</li>\n</ol>\n<h1 id=\"revocable方法\"><a href=\"#revocable方法\" class=\"headerlink\" title=\"revocable方法\"></a>revocable方法</h1><p>该方法返回一个可取消的 Proxy 实例。</p>\n<p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> target = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> handle = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;</span><br><span class=\"line\">    proxy,</span><br><span class=\"line\">    revoke</span><br><span class=\"line\">&#125; = <span class=\"built_in\">Proxy</span>.revocable(target, handle);</span><br><span class=\"line\"></span><br><span class=\"line\">proxy.foo = <span class=\"number\">123</span>;</span><br><span class=\"line\">proxy.foo; <span class=\"comment\">// 123</span></span><br><span class=\"line\"></span><br><span class=\"line\">revoke();</span><br><span class=\"line\">proxy.foo; <span class=\"comment\">// error</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"this问题\"><a href=\"#this问题\" class=\"headerlink\" title=\"this问题\"></a>this问题</h1><p>Proxy 代理下，目标对象的内部 this 会指向 Proxy 代理。</p>\n<p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> target = &#123;</span><br><span class=\"line\">    m: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span> === proxy);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> handle = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handle);</span><br><span class=\"line\"></span><br><span class=\"line\">target.m; <span class=\"comment\">// false</span></span><br><span class=\"line\">proxy.m; <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createWebService</span>(<span class=\"params\">baseUrl</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125;, &#123;</span><br><span class=\"line\">        get(target, key, receiver) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> httpGet(baseUrl + <span class=\"string\">'/'</span> + key);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> service = createWebService(<span class=\"string\">'http://example.com/data'</span>);</span><br><span class=\"line\">service.employees().then(<span class=\"function\"><span class=\"params\">json</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> employees = <span class=\"built_in\">JSON</span>.parse(json);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><ol>\n<li><p>Proxy用于修改某些操作的默认行为，属于一种“元编程”，即对编程语言进行编程。</p>\n<p> Proxy译为代理器，它在目标对象之前架设一层拦截，提供一种机制，来对外界的访问进行过滤和改写。</p>\n<p> 示例：</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125;, &#123;</span><br><span class=\"line\">    get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, key, receiver</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`getting<span class=\"subst\">$&#123;key&#125;</span>`</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.get(target, key, receiver);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    set: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, key, value, receiver</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`setting<span class=\"subst\">$&#123;key&#125;</span>`</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.set(target, key.value, receiver);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p> 解释：上面代码对空对象架设一层拦截，拦截了get和set方法，当调用对象的get和set方法就会先执行Proxy里的操作。</p>\n</li>\n<li><p>ES6原生提供了Proxy的构造函数，用来生成Proxy实例：</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handle);</span><br></pre></td></tr></table></figure>\n<p> 解释：参数target表示要拦截的目标对象，handle也是一个对象，用来设置拦截行为。该构造函数返回一个对象，即proxy代理对象。</p>\n<blockquote>\n<p>注：要使Proxy起作用，必须针对Proxy实例进行操作，而不是针对目标对象进行操作。如果handle参数没有做任何拦截，则等同于直接通向源对象。</p>\n</blockquote>\n</li>\n<li><p>可以将在Object对象里设置proxy属性，直接调用Object.proxy。也可以将对象的原型设置为Proxy对象。</p>\n<p> 示例：</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> object = &#123;</span><br><span class=\"line\">    proxy: <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handle)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置原型对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125;,&#123;&#125;);</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = <span class=\"built_in\">Object</span>.create(proxy);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"实例方法\"><a href=\"#实例方法\" class=\"headerlink\" title=\"实例方法\"></a>实例方法</h1><ol>\n<li><p>get()<br> get()方法用于拦截某个属性的读取操作，接收三个参数，目标对象、属性名和proxy实例本身，最后一个参数可选。<br> 示例：</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'jack'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(person, &#123;</span><br><span class=\"line\">    get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, property</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (property <span class=\"keyword\">in</span> target) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> target[property];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'error'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">person.name; <span class=\"comment\">// jack</span></span><br><span class=\"line\">person.age; <span class=\"comment\">// error</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>set()</p>\n<p> 用来拦截某个属性的赋值操作，可以接受四个参数，依次为目标对象、属性名、属性值和Proxy实例本身，最后一个参数可选。<br> 示例：</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> validator = &#123;</span><br><span class=\"line\">    set: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, key, value</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (key === <span class=\"string\">'age'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (value &gt; <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'error'</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125;, validator);</span><br><span class=\"line\">person.age = <span class=\"number\">500</span>; <span class=\"comment\">// error</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>apply()</p>\n<p> apply()方法拦截参数的调用，call和apply操作。该方法接受三个参数，分别是目标对象，上下文对象(this)和目标对象的参数数组。<br> 示例：</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> handle = &#123;</span><br><span class=\"line\">    apply: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, ctx, args</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.apply(...args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>has()</p>\n<p> has()方法用来拦截HasProperty()操作，即判断某个对象是否具有某个属性时，这个方法会生效，典型操作时in运算符。<br> 示例：</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> handle = &#123;</span><br><span class=\"line\">    has(target, key) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (key[<span class=\"number\">0</span>] === <span class=\"string\">'-'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> key <span class=\"keyword\">in</span> target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> person = &#123;</span><br><span class=\"line\">    _name: <span class=\"string\">'jack'</span>,</span><br><span class=\"line\">    age: <span class=\"number\">19</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> proxyPerson = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(person, handle);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 检测私有属性</span></span><br><span class=\"line\">_name <span class=\"keyword\">in</span> proxyPerson <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>construct()</p>\n<p> construct()方法用于拦截 new 命令。该方法接受两个参数依次为目标对象和目标对象的参数。</p>\n<p> 示例：</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;, &#123;</span><br><span class=\"line\">    construct: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, args</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'construct'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            value: args[<span class=\"number\">0</span>] * <span class=\"number\">10</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">new</span> p(<span class=\"number\">1</span>).value; <span class=\"comment\">// 10</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注：construct()方法必须返回一个对象，否则会报错。</p>\n</blockquote>\n</li>\n<li><p>deleteProperty()</p>\n<p> 该方法用于拦截 delete 操作，如果这个方法抛出错误或者返回 false，则当前属性就无法被 delete 命令删除。</p>\n<p> 示例：</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;</span><br><span class=\"line\">    _foo: <span class=\"string\">'foo'</span></span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">    deleteProperty: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, key</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (key[<span class=\"number\">0</span>] === <span class=\"string\">'_'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'error'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注：目标对象自身的不可配置（configurable）的属性，不能被 deleteProperty()删除。</p>\n</blockquote>\n</li>\n<li><p>defineProperty()</p>\n<p> 该方法拦截了 Object.defineProperty()的操作。</p>\n</li>\n<li><p>getOwnPropertyDescriptor()</p>\n<p> 该方法拦截了 Object.getOwnPropertyDescriptor()，返回一个属性描述对象或者 undefined。</p>\n</li>\n<li><p>getPrototypeOf()</p>\n<p> 该方法用来拦截获取对象原型，getPrototypeOf()方法的返回值必须是对象或者 null，如果目标对象不可扩展，则该方法必须返回原型对象。</p>\n</li>\n<li><p>isExtensible()</p>\n<p>该方法拦截 Object.isExtensible 操作，该方法只能返回布尔值，否则只会被自动转为布尔值。</p>\n</li>\n<li><p>ownKeys()</p>\n<p>该方法用来拦截对象自身的读取操作。</p>\n</li>\n<li><p>preventExtensions()</p>\n<p>该方法拦截 Object.preventExtensions()方法，必须返回一个布尔值。否则会自动转为布尔值。</p>\n</li>\n<li><p>setPrototypeOf()</p>\n<p>该方法拦截 Object.setPrototypeOf()方法，拦截修改原型的方法，只能返回布尔值，否则会自动转为布尔值。</p>\n</li>\n</ol>\n<h1 id=\"revocable方法\"><a href=\"#revocable方法\" class=\"headerlink\" title=\"revocable方法\"></a>revocable方法</h1><p>该方法返回一个可取消的 Proxy 实例。</p>\n<p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> target = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> handle = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;</span><br><span class=\"line\">    proxy,</span><br><span class=\"line\">    revoke</span><br><span class=\"line\">&#125; = <span class=\"built_in\">Proxy</span>.revocable(target, handle);</span><br><span class=\"line\"></span><br><span class=\"line\">proxy.foo = <span class=\"number\">123</span>;</span><br><span class=\"line\">proxy.foo; <span class=\"comment\">// 123</span></span><br><span class=\"line\"></span><br><span class=\"line\">revoke();</span><br><span class=\"line\">proxy.foo; <span class=\"comment\">// error</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"this问题\"><a href=\"#this问题\" class=\"headerlink\" title=\"this问题\"></a>this问题</h1><p>Proxy 代理下，目标对象的内部 this 会指向 Proxy 代理。</p>\n<p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> target = &#123;</span><br><span class=\"line\">    m: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span> === proxy);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> handle = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handle);</span><br><span class=\"line\"></span><br><span class=\"line\">target.m; <span class=\"comment\">// false</span></span><br><span class=\"line\">proxy.m; <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createWebService</span>(<span class=\"params\">baseUrl</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125;, &#123;</span><br><span class=\"line\">        get(target, key, receiver) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> httpGet(baseUrl + <span class=\"string\">'/'</span> + key);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> service = createWebService(<span class=\"string\">'http://example.com/data'</span>);</span><br><span class=\"line\">service.employees().then(<span class=\"function\"><span class=\"params\">json</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> employees = <span class=\"built_in\">JSON</span>.parse(json);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n"},{"title":"ES6入门-Reflect","date":"2018-01-12T14:05:12.000Z","description":"ES6入门--Reflect","_content":"# 概述\n\n1. 将Object对象的一些明显属于语言内部的方法（比如Object.defineProperty），放到Reflect对象上，现阶段，某些方法同时在Object和Reflect对象上部署，未来新的方法只部署在Reflect对象上，也就是说从Reflect对象上可以拿到语言内部的方法。\n\n2. 修改某些Object方法的返回结果，让其变得更为合理。比如，Object.defineProperty(obj, name, desc)在无法定义属性时，会抛出一个错误，而Reflect.defineProperty(obj, name, desc)则会返回false。例如：\n\n\t```javascript\n\ttry {\n\t    Object.defineProperty(target, property, attributes);\n\t} catch (e) {\n\t\n\t}\n\t\n\t// 新写法\n\tif (Reflect.defineProperty(target, property, attributes)) {\n\t    // success\n\t} else {\n\t    // false\n\t}\n\t```\n3. 让Object操作都变成函数行为。某些Object操作时命令式，比如name in obj 或 delete obj[name]，而Reflect.has(obj, name)和Reflect.deleteProperty(obj, name)让它们变成函数行为。例如：\n\n\t```javascript\n\t // 老写法\n\t 'assign' in Object\n\t\n\t // 新写法\n\t Reflect.has(Object, 'assign')\n\t```\n\n4. Reflect对象的方法和Proxy对象的方法一一对应，只要是Proxy对象的方法，就能在Reflect对象上找到对应的方法。这就让Proxy对象可以方便的调用对应的Reflect方法，完成默认行为，作为修改行为的基础。也就是说，不管Proxy怎么修改默认行为，总可以在Reflect上获取默认行为。例如：\n\n\t```javascript\n\t var loggedObj = new Proxy(obj, {\n\t     get(target, name) {\n\t         console.log('get', target, name);\n\t         return Reflect.get(target, name);\n\t     },\n\t     deleteProperty(target, name) {\n\t         console.log('deleteProperty' + name);\n\t         return Reflect.deleteProperty(target, name);\n\t     },\n\t     has(target, name) {\n\t         console.log('has' + name);\n\t         return Reflect.has(target, name);\n\t     }\n\t });\n\t```\n\n> 每一个Proxy对象的拦截操作，内部都调用了对应的Reflect方法，保证了原生行为能够正常执行，并添加附件方法。\n\n# 静态方法\n\n1. Reflect.get(target, name, receiver) 该方法查找并返回target对象的name属性，如果没有该属性，则返回undefined。例如：\n\n\n\t```javascript\n\tReflect.get(obj, 'age');\n\t```\n\n\n2. Reflect.set(target, name, value, receiver)该方法设置target对象的name属性等于value。例如：\n\n\t```javascript\n\tReflect.set(obj, 'age', 18);\n\t```\n\n3. Reflect.has(obj, name)该方法对应name in obj里面的in运算符。\n\n4. Reflect.deleteProperty(obj, name)该方法等同于delete obj[name]，用于删除对象的属性。\n\n5. Reflect.construct(target, args)该方法等同于new target(...args)，这提供了一种不使用new，来调用构造函数的方法。例如：\n\n\t  ```javascript\n\t  function Greeting(name) {\n\t    this.name = name;\n\t  }\n\t  const instance = Reflect.construct(Greeting, ['jack']);\n\t  ```\n\n6. Reflect.getPrototypeOf(obj)该方法用于获取__proto__属性，对应Object.getPrototypeOf(obj)。例如：\n\n\t  ```javascript\n\t  Reflect.getPrototypeOf(obj) === obj.prototype;\n\t  ```\n\n7. Reflect.setPrototypeOf(obj, newProto)该方法用于设置对象的__proto__属性，返回第一个参数对象。例如：\n\n\t  ```javascript\n\t  Reflect.setPrototypeOf(obj, otherObj.prototype);\n\t  ```\n\n8. Reflect.apply(func, thisArg, args)该方法等同于Function.prototype.apply.call(func, thisArg, args)，用于绑定this对象后执行给定函数。例如：\n\n\t  ```javascript\n\t  const youngest = Reflect.apply(Math.min, Math, ages);\n\t  ```\n\n9. Reflect.defineProperty(target, propertyKey, attributes)该方法用来为对象定义属性，未来会代替掉Object.defineProperty。例如：\n\n\t  ```javascript\n\t  Reflect.defineProperty(MyDate, 'now', {\n\t    value: () => Date.now()\n\t  });\n\t  ```\n\n10. Reflect.getOwnPropertyDescriptor(target, propertyKey)该方法用于得到指定属性的描述对象。例如：\n\n\t  ```javascript\n\t  var obj = {};\n\t  Reflect.defineProperty(obj, 'hidden', {\n\t    value: true,\n\t    enumerable: false\n\t  });\n\t\n\t  var theDescriptor = Reflect.getOwnPropertyDescriptor(obj, 'hidden');\n\t  ```\n\n11. Reflect.isExtensible(target)该方法返回一个布尔值，表示当前对象是否可扩展。例如：\n\n\t  ```javascript\n\t  var obj = {};\n\t  Reflect.isExtensible(obj);\n\t  ```\n\n12. Reflect.prevenExtensions(target)该方法用于让一个对象变为不可扩展，它返回一个布尔值，表示是否操作成功。例如：\n\n\t  ```javascript\n\t  var obj = {};\n\t  Reflect.prevenExtensions(obj);\n\t  ```\n\n13. Reflect.ownKeys(target)该方法用于返回对象的所有属性。例如：\n\n\t  ```javascript\n\t  var obj = {\n\t    foo: 1,\n\t    bar: 2\n\t  }\n\t\n\t  // ['foo', 'bar']\n\t  Reflect.ownKeys(obj);\n\t  ```\n\n\n\n","source":"_posts/ES6入门-Reflect.md","raw":"---\ntitle: ES6入门-Reflect\ndate: 2018-01-12 22:05:12\ncategories: ES6入门\ntags:\n     - 笔记\n     - JavaScript\n     - ECMAScript 2015\ndescription: ES6入门--Reflect\n---\n# 概述\n\n1. 将Object对象的一些明显属于语言内部的方法（比如Object.defineProperty），放到Reflect对象上，现阶段，某些方法同时在Object和Reflect对象上部署，未来新的方法只部署在Reflect对象上，也就是说从Reflect对象上可以拿到语言内部的方法。\n\n2. 修改某些Object方法的返回结果，让其变得更为合理。比如，Object.defineProperty(obj, name, desc)在无法定义属性时，会抛出一个错误，而Reflect.defineProperty(obj, name, desc)则会返回false。例如：\n\n\t```javascript\n\ttry {\n\t    Object.defineProperty(target, property, attributes);\n\t} catch (e) {\n\t\n\t}\n\t\n\t// 新写法\n\tif (Reflect.defineProperty(target, property, attributes)) {\n\t    // success\n\t} else {\n\t    // false\n\t}\n\t```\n3. 让Object操作都变成函数行为。某些Object操作时命令式，比如name in obj 或 delete obj[name]，而Reflect.has(obj, name)和Reflect.deleteProperty(obj, name)让它们变成函数行为。例如：\n\n\t```javascript\n\t // 老写法\n\t 'assign' in Object\n\t\n\t // 新写法\n\t Reflect.has(Object, 'assign')\n\t```\n\n4. Reflect对象的方法和Proxy对象的方法一一对应，只要是Proxy对象的方法，就能在Reflect对象上找到对应的方法。这就让Proxy对象可以方便的调用对应的Reflect方法，完成默认行为，作为修改行为的基础。也就是说，不管Proxy怎么修改默认行为，总可以在Reflect上获取默认行为。例如：\n\n\t```javascript\n\t var loggedObj = new Proxy(obj, {\n\t     get(target, name) {\n\t         console.log('get', target, name);\n\t         return Reflect.get(target, name);\n\t     },\n\t     deleteProperty(target, name) {\n\t         console.log('deleteProperty' + name);\n\t         return Reflect.deleteProperty(target, name);\n\t     },\n\t     has(target, name) {\n\t         console.log('has' + name);\n\t         return Reflect.has(target, name);\n\t     }\n\t });\n\t```\n\n> 每一个Proxy对象的拦截操作，内部都调用了对应的Reflect方法，保证了原生行为能够正常执行，并添加附件方法。\n\n# 静态方法\n\n1. Reflect.get(target, name, receiver) 该方法查找并返回target对象的name属性，如果没有该属性，则返回undefined。例如：\n\n\n\t```javascript\n\tReflect.get(obj, 'age');\n\t```\n\n\n2. Reflect.set(target, name, value, receiver)该方法设置target对象的name属性等于value。例如：\n\n\t```javascript\n\tReflect.set(obj, 'age', 18);\n\t```\n\n3. Reflect.has(obj, name)该方法对应name in obj里面的in运算符。\n\n4. Reflect.deleteProperty(obj, name)该方法等同于delete obj[name]，用于删除对象的属性。\n\n5. Reflect.construct(target, args)该方法等同于new target(...args)，这提供了一种不使用new，来调用构造函数的方法。例如：\n\n\t  ```javascript\n\t  function Greeting(name) {\n\t    this.name = name;\n\t  }\n\t  const instance = Reflect.construct(Greeting, ['jack']);\n\t  ```\n\n6. Reflect.getPrototypeOf(obj)该方法用于获取__proto__属性，对应Object.getPrototypeOf(obj)。例如：\n\n\t  ```javascript\n\t  Reflect.getPrototypeOf(obj) === obj.prototype;\n\t  ```\n\n7. Reflect.setPrototypeOf(obj, newProto)该方法用于设置对象的__proto__属性，返回第一个参数对象。例如：\n\n\t  ```javascript\n\t  Reflect.setPrototypeOf(obj, otherObj.prototype);\n\t  ```\n\n8. Reflect.apply(func, thisArg, args)该方法等同于Function.prototype.apply.call(func, thisArg, args)，用于绑定this对象后执行给定函数。例如：\n\n\t  ```javascript\n\t  const youngest = Reflect.apply(Math.min, Math, ages);\n\t  ```\n\n9. Reflect.defineProperty(target, propertyKey, attributes)该方法用来为对象定义属性，未来会代替掉Object.defineProperty。例如：\n\n\t  ```javascript\n\t  Reflect.defineProperty(MyDate, 'now', {\n\t    value: () => Date.now()\n\t  });\n\t  ```\n\n10. Reflect.getOwnPropertyDescriptor(target, propertyKey)该方法用于得到指定属性的描述对象。例如：\n\n\t  ```javascript\n\t  var obj = {};\n\t  Reflect.defineProperty(obj, 'hidden', {\n\t    value: true,\n\t    enumerable: false\n\t  });\n\t\n\t  var theDescriptor = Reflect.getOwnPropertyDescriptor(obj, 'hidden');\n\t  ```\n\n11. Reflect.isExtensible(target)该方法返回一个布尔值，表示当前对象是否可扩展。例如：\n\n\t  ```javascript\n\t  var obj = {};\n\t  Reflect.isExtensible(obj);\n\t  ```\n\n12. Reflect.prevenExtensions(target)该方法用于让一个对象变为不可扩展，它返回一个布尔值，表示是否操作成功。例如：\n\n\t  ```javascript\n\t  var obj = {};\n\t  Reflect.prevenExtensions(obj);\n\t  ```\n\n13. Reflect.ownKeys(target)该方法用于返回对象的所有属性。例如：\n\n\t  ```javascript\n\t  var obj = {\n\t    foo: 1,\n\t    bar: 2\n\t  }\n\t\n\t  // ['foo', 'bar']\n\t  Reflect.ownKeys(obj);\n\t  ```\n\n\n\n","slug":"ES6入门-Reflect","published":1,"updated":"2018-01-27T03:08:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjksf3cw5000bh8efve6i9n2a","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><ol>\n<li><p>将Object对象的一些明显属于语言内部的方法（比如Object.defineProperty），放到Reflect对象上，现阶段，某些方法同时在Object和Reflect对象上部署，未来新的方法只部署在Reflect对象上，也就是说从Reflect对象上可以拿到语言内部的方法。</p>\n</li>\n<li><p>修改某些Object方法的返回结果，让其变得更为合理。比如，Object.defineProperty(obj, name, desc)在无法定义属性时，会抛出一个错误，而Reflect.defineProperty(obj, name, desc)则会返回false。例如：</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.defineProperty(target, property, attributes);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 新写法</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">Reflect</span>.defineProperty(target, property, attributes)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// success</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>让Object操作都变成函数行为。某些Object操作时命令式，比如name in obj 或 delete obj[name]，而Reflect.has(obj, name)和Reflect.deleteProperty(obj, name)让它们变成函数行为。例如：</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 老写法</span></span><br><span class=\"line\"><span class=\"string\">'assign'</span> <span class=\"keyword\">in</span> <span class=\"built_in\">Object</span></span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\">// 新写法</span></span><br><span class=\"line\"><span class=\"built_in\">Reflect</span>.has(<span class=\"built_in\">Object</span>, <span class=\"string\">'assign'</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Reflect对象的方法和Proxy对象的方法一一对应，只要是Proxy对象的方法，就能在Reflect对象上找到对应的方法。这就让Proxy对象可以方便的调用对应的Reflect方法，完成默认行为，作为修改行为的基础。也就是说，不管Proxy怎么修改默认行为，总可以在Reflect上获取默认行为。例如：</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> loggedObj = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(obj, &#123;</span><br><span class=\"line\">    get(target, name) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'get'</span>, target, name);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.get(target, name);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    deleteProperty(target, name) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'deleteProperty'</span> + name);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.deleteProperty(target, name);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    has(target, name) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'has'</span> + name);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.has(target, name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<blockquote>\n<p>每一个Proxy对象的拦截操作，内部都调用了对应的Reflect方法，保证了原生行为能够正常执行，并添加附件方法。</p>\n</blockquote>\n<h1 id=\"静态方法\"><a href=\"#静态方法\" class=\"headerlink\" title=\"静态方法\"></a>静态方法</h1><ol>\n<li>Reflect.get(target, name, receiver) 该方法查找并返回target对象的name属性，如果没有该属性，则返回undefined。例如：</li>\n</ol>\n<pre><code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Reflect</span>.get(obj, <span class=\"string\">'age'</span>);</span><br></pre></td></tr></table></figure>\n</code></pre><ol start=\"2\">\n<li><p>Reflect.set(target, name, value, receiver)该方法设置target对象的name属性等于value。例如：</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Reflect</span>.set(obj, <span class=\"string\">'age'</span>, <span class=\"number\">18</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Reflect.has(obj, name)该方法对应name in obj里面的in运算符。</p>\n</li>\n<li><p>Reflect.deleteProperty(obj, name)该方法等同于delete obj[name]，用于删除对象的属性。</p>\n</li>\n<li><p>Reflect.construct(target, args)该方法等同于new target(…args)，这提供了一种不使用new，来调用构造函数的方法。例如：</p>\n   <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Greeting</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> instance = <span class=\"built_in\">Reflect</span>.construct(Greeting, [<span class=\"string\">'jack'</span>]);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Reflect.getPrototypeOf(obj)该方法用于获取<strong>proto</strong>属性，对应Object.getPrototypeOf(obj)。例如：</p>\n   <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Reflect</span>.getPrototypeOf(obj) === obj.prototype;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Reflect.setPrototypeOf(obj, newProto)该方法用于设置对象的<strong>proto</strong>属性，返回第一个参数对象。例如：</p>\n   <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Reflect</span>.setPrototypeOf(obj, otherObj.prototype);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Reflect.apply(func, thisArg, args)该方法等同于Function.prototype.apply.call(func, thisArg, args)，用于绑定this对象后执行给定函数。例如：</p>\n   <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> youngest = <span class=\"built_in\">Reflect</span>.apply(<span class=\"built_in\">Math</span>.min, <span class=\"built_in\">Math</span>, ages);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Reflect.defineProperty(target, propertyKey, attributes)该方法用来为对象定义属性，未来会代替掉Object.defineProperty。例如：</p>\n   <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Reflect</span>.defineProperty(MyDate, <span class=\"string\">'now'</span>, &#123;</span><br><span class=\"line\">  value: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">Date</span>.now()</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Reflect.getOwnPropertyDescriptor(target, propertyKey)该方法用于得到指定属性的描述对象。例如：</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Reflect</span>.defineProperty(obj, <span class=\"string\">'hidden'</span>, &#123;</span><br><span class=\"line\">  value: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  enumerable: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"keyword\">var</span> theDescriptor = <span class=\"built_in\">Reflect</span>.getOwnPropertyDescriptor(obj, <span class=\"string\">'hidden'</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Reflect.isExtensible(target)该方法返回一个布尔值，表示当前对象是否可扩展。例如：</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Reflect</span>.isExtensible(obj);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Reflect.prevenExtensions(target)该方法用于让一个对象变为不可扩展，它返回一个布尔值，表示是否操作成功。例如：</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Reflect</span>.prevenExtensions(obj);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Reflect.ownKeys(target)该方法用于返回对象的所有属性。例如：</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  foo: <span class=\"number\">1</span>,</span><br><span class=\"line\">  bar: <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\">// ['foo', 'bar']</span></span><br><span class=\"line\"><span class=\"built_in\">Reflect</span>.ownKeys(obj);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><ol>\n<li><p>将Object对象的一些明显属于语言内部的方法（比如Object.defineProperty），放到Reflect对象上，现阶段，某些方法同时在Object和Reflect对象上部署，未来新的方法只部署在Reflect对象上，也就是说从Reflect对象上可以拿到语言内部的方法。</p>\n</li>\n<li><p>修改某些Object方法的返回结果，让其变得更为合理。比如，Object.defineProperty(obj, name, desc)在无法定义属性时，会抛出一个错误，而Reflect.defineProperty(obj, name, desc)则会返回false。例如：</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.defineProperty(target, property, attributes);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 新写法</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">Reflect</span>.defineProperty(target, property, attributes)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// success</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>让Object操作都变成函数行为。某些Object操作时命令式，比如name in obj 或 delete obj[name]，而Reflect.has(obj, name)和Reflect.deleteProperty(obj, name)让它们变成函数行为。例如：</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 老写法</span></span><br><span class=\"line\"><span class=\"string\">'assign'</span> <span class=\"keyword\">in</span> <span class=\"built_in\">Object</span></span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\">// 新写法</span></span><br><span class=\"line\"><span class=\"built_in\">Reflect</span>.has(<span class=\"built_in\">Object</span>, <span class=\"string\">'assign'</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Reflect对象的方法和Proxy对象的方法一一对应，只要是Proxy对象的方法，就能在Reflect对象上找到对应的方法。这就让Proxy对象可以方便的调用对应的Reflect方法，完成默认行为，作为修改行为的基础。也就是说，不管Proxy怎么修改默认行为，总可以在Reflect上获取默认行为。例如：</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> loggedObj = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(obj, &#123;</span><br><span class=\"line\">    get(target, name) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'get'</span>, target, name);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.get(target, name);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    deleteProperty(target, name) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'deleteProperty'</span> + name);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.deleteProperty(target, name);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    has(target, name) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'has'</span> + name);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.has(target, name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<blockquote>\n<p>每一个Proxy对象的拦截操作，内部都调用了对应的Reflect方法，保证了原生行为能够正常执行，并添加附件方法。</p>\n</blockquote>\n<h1 id=\"静态方法\"><a href=\"#静态方法\" class=\"headerlink\" title=\"静态方法\"></a>静态方法</h1><ol>\n<li>Reflect.get(target, name, receiver) 该方法查找并返回target对象的name属性，如果没有该属性，则返回undefined。例如：</li>\n</ol>\n<pre><code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Reflect</span>.get(obj, <span class=\"string\">'age'</span>);</span><br></pre></td></tr></table></figure>\n</code></pre><ol start=\"2\">\n<li><p>Reflect.set(target, name, value, receiver)该方法设置target对象的name属性等于value。例如：</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Reflect</span>.set(obj, <span class=\"string\">'age'</span>, <span class=\"number\">18</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Reflect.has(obj, name)该方法对应name in obj里面的in运算符。</p>\n</li>\n<li><p>Reflect.deleteProperty(obj, name)该方法等同于delete obj[name]，用于删除对象的属性。</p>\n</li>\n<li><p>Reflect.construct(target, args)该方法等同于new target(…args)，这提供了一种不使用new，来调用构造函数的方法。例如：</p>\n   <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Greeting</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> instance = <span class=\"built_in\">Reflect</span>.construct(Greeting, [<span class=\"string\">'jack'</span>]);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Reflect.getPrototypeOf(obj)该方法用于获取<strong>proto</strong>属性，对应Object.getPrototypeOf(obj)。例如：</p>\n   <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Reflect</span>.getPrototypeOf(obj) === obj.prototype;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Reflect.setPrototypeOf(obj, newProto)该方法用于设置对象的<strong>proto</strong>属性，返回第一个参数对象。例如：</p>\n   <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Reflect</span>.setPrototypeOf(obj, otherObj.prototype);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Reflect.apply(func, thisArg, args)该方法等同于Function.prototype.apply.call(func, thisArg, args)，用于绑定this对象后执行给定函数。例如：</p>\n   <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> youngest = <span class=\"built_in\">Reflect</span>.apply(<span class=\"built_in\">Math</span>.min, <span class=\"built_in\">Math</span>, ages);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Reflect.defineProperty(target, propertyKey, attributes)该方法用来为对象定义属性，未来会代替掉Object.defineProperty。例如：</p>\n   <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Reflect</span>.defineProperty(MyDate, <span class=\"string\">'now'</span>, &#123;</span><br><span class=\"line\">  value: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">Date</span>.now()</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Reflect.getOwnPropertyDescriptor(target, propertyKey)该方法用于得到指定属性的描述对象。例如：</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Reflect</span>.defineProperty(obj, <span class=\"string\">'hidden'</span>, &#123;</span><br><span class=\"line\">  value: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  enumerable: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"keyword\">var</span> theDescriptor = <span class=\"built_in\">Reflect</span>.getOwnPropertyDescriptor(obj, <span class=\"string\">'hidden'</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Reflect.isExtensible(target)该方法返回一个布尔值，表示当前对象是否可扩展。例如：</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Reflect</span>.isExtensible(obj);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Reflect.prevenExtensions(target)该方法用于让一个对象变为不可扩展，它返回一个布尔值，表示是否操作成功。例如：</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Reflect</span>.prevenExtensions(obj);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Reflect.ownKeys(target)该方法用于返回对象的所有属性。例如：</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  foo: <span class=\"number\">1</span>,</span><br><span class=\"line\">  bar: <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\">// ['foo', 'bar']</span></span><br><span class=\"line\"><span class=\"built_in\">Reflect</span>.ownKeys(obj);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"H5底部输入框兼容手机虚拟键盘","date":"2018-05-19T02:18:42.000Z","description":"嵌入APP页面底部输入框被虚拟键盘遮挡问题总结","_content":"# H5底部输入框兼容手机虚拟键盘遮挡问题总结\n\n## 概述\n\n**业务场景：**内嵌APP的手机聊天页面，输入框absolute定位在底部，由于fixed定位在ios机型上表现混乱，所以没有选用fixed定位。\n\n**安卓手机表现：**虚拟键盘弹起，输入框不会被遮挡，但页面不会随着虚拟键盘的弹起而向上移动，聊天区域被遮挡。\n\n**IOS手机表现：**虚拟键盘弹起，页面被虚拟键盘的高度推起，有很大概率输入框被遮挡。\n\n## 解决方案\n\n\n### 通用设置\n\n页面加载之后记录初始视口高度，安卓机型直接用`window.innerHeight`可以准确获取，但由于ios中使用`window.innerHeight`高度计算有时不正确，所以采用`screen.height`来动态的计算高度。\n\n* iphoneX的视口高度为`screen.height-78`\n\n* 其他iphone机型的视口高度为`screen.height-20`\n\n### 安卓机型\n\n1. 监听`window.resize`事件，设置100毫秒延时执行，在回调中通过`window.innerHeight`再次获得视口高度，当初始视口高度-当前视口高度>0时，则判断虚拟键盘弹起，否则虚拟键盘落下。\n\n2. 虚拟键盘弹起时，设置聊天内容区高度，并将聊天气泡滚动到底部。\n\n3. 虚拟键盘落下时，还原聊天内容区高度。\n\n### IOS机型\n\n1. ios机型中监听`window.resize`事件无效，所以监听输入框的focusin，延时400毫秒来判断虚拟键盘弹出。\n\n2. 通过js bridge来获得虚拟键盘高度，但由于iphoneX机型中虚拟键盘的高度是包括手机系统中的底部控制栏的，所以要将计算高度减去34方可得到正确的虚拟键盘高度，用虚拟键盘高度来动态计算输入框的top值，并将bottom值设为auto，同时设置聊天内容区高度，并将聊天气泡滚动到底部。\n\n3. 监听focusout事件，延时100毫秒，判断虚拟键盘落下，还原页面。\n\n","source":"_posts/H5底部输入框兼容手机虚拟键盘.md","raw":"---\ntitle: H5底部输入框兼容手机虚拟键盘\ndate: 2018-05-19 10:18:42\ncategories: JS实战\ntags:\n     - 移动端\ndescription: 嵌入APP页面底部输入框被虚拟键盘遮挡问题总结\n---\n# H5底部输入框兼容手机虚拟键盘遮挡问题总结\n\n## 概述\n\n**业务场景：**内嵌APP的手机聊天页面，输入框absolute定位在底部，由于fixed定位在ios机型上表现混乱，所以没有选用fixed定位。\n\n**安卓手机表现：**虚拟键盘弹起，输入框不会被遮挡，但页面不会随着虚拟键盘的弹起而向上移动，聊天区域被遮挡。\n\n**IOS手机表现：**虚拟键盘弹起，页面被虚拟键盘的高度推起，有很大概率输入框被遮挡。\n\n## 解决方案\n\n\n### 通用设置\n\n页面加载之后记录初始视口高度，安卓机型直接用`window.innerHeight`可以准确获取，但由于ios中使用`window.innerHeight`高度计算有时不正确，所以采用`screen.height`来动态的计算高度。\n\n* iphoneX的视口高度为`screen.height-78`\n\n* 其他iphone机型的视口高度为`screen.height-20`\n\n### 安卓机型\n\n1. 监听`window.resize`事件，设置100毫秒延时执行，在回调中通过`window.innerHeight`再次获得视口高度，当初始视口高度-当前视口高度>0时，则判断虚拟键盘弹起，否则虚拟键盘落下。\n\n2. 虚拟键盘弹起时，设置聊天内容区高度，并将聊天气泡滚动到底部。\n\n3. 虚拟键盘落下时，还原聊天内容区高度。\n\n### IOS机型\n\n1. ios机型中监听`window.resize`事件无效，所以监听输入框的focusin，延时400毫秒来判断虚拟键盘弹出。\n\n2. 通过js bridge来获得虚拟键盘高度，但由于iphoneX机型中虚拟键盘的高度是包括手机系统中的底部控制栏的，所以要将计算高度减去34方可得到正确的虚拟键盘高度，用虚拟键盘高度来动态计算输入框的top值，并将bottom值设为auto，同时设置聊天内容区高度，并将聊天气泡滚动到底部。\n\n3. 监听focusout事件，延时100毫秒，判断虚拟键盘落下，还原页面。\n\n","slug":"H5底部输入框兼容手机虚拟键盘","published":1,"updated":"2018-05-19T03:02:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjksf3cw8000fh8eflvdqvqcp","content":"<h1 id=\"H5底部输入框兼容手机虚拟键盘遮挡问题总结\"><a href=\"#H5底部输入框兼容手机虚拟键盘遮挡问题总结\" class=\"headerlink\" title=\"H5底部输入框兼容手机虚拟键盘遮挡问题总结\"></a>H5底部输入框兼容手机虚拟键盘遮挡问题总结</h1><h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p><strong>业务场景：</strong>内嵌APP的手机聊天页面，输入框absolute定位在底部，由于fixed定位在ios机型上表现混乱，所以没有选用fixed定位。</p>\n<p><strong>安卓手机表现：</strong>虚拟键盘弹起，输入框不会被遮挡，但页面不会随着虚拟键盘的弹起而向上移动，聊天区域被遮挡。</p>\n<p><strong>IOS手机表现：</strong>虚拟键盘弹起，页面被虚拟键盘的高度推起，有很大概率输入框被遮挡。</p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><h3 id=\"通用设置\"><a href=\"#通用设置\" class=\"headerlink\" title=\"通用设置\"></a>通用设置</h3><p>页面加载之后记录初始视口高度，安卓机型直接用<code>window.innerHeight</code>可以准确获取，但由于ios中使用<code>window.innerHeight</code>高度计算有时不正确，所以采用<code>screen.height</code>来动态的计算高度。</p>\n<ul>\n<li><p>iphoneX的视口高度为<code>screen.height-78</code></p>\n</li>\n<li><p>其他iphone机型的视口高度为<code>screen.height-20</code></p>\n</li>\n</ul>\n<h3 id=\"安卓机型\"><a href=\"#安卓机型\" class=\"headerlink\" title=\"安卓机型\"></a>安卓机型</h3><ol>\n<li><p>监听<code>window.resize</code>事件，设置100毫秒延时执行，在回调中通过<code>window.innerHeight</code>再次获得视口高度，当初始视口高度-当前视口高度&gt;0时，则判断虚拟键盘弹起，否则虚拟键盘落下。</p>\n</li>\n<li><p>虚拟键盘弹起时，设置聊天内容区高度，并将聊天气泡滚动到底部。</p>\n</li>\n<li><p>虚拟键盘落下时，还原聊天内容区高度。</p>\n</li>\n</ol>\n<h3 id=\"IOS机型\"><a href=\"#IOS机型\" class=\"headerlink\" title=\"IOS机型\"></a>IOS机型</h3><ol>\n<li><p>ios机型中监听<code>window.resize</code>事件无效，所以监听输入框的focusin，延时400毫秒来判断虚拟键盘弹出。</p>\n</li>\n<li><p>通过js bridge来获得虚拟键盘高度，但由于iphoneX机型中虚拟键盘的高度是包括手机系统中的底部控制栏的，所以要将计算高度减去34方可得到正确的虚拟键盘高度，用虚拟键盘高度来动态计算输入框的top值，并将bottom值设为auto，同时设置聊天内容区高度，并将聊天气泡滚动到底部。</p>\n</li>\n<li><p>监听focusout事件，延时100毫秒，判断虚拟键盘落下，还原页面。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"H5底部输入框兼容手机虚拟键盘遮挡问题总结\"><a href=\"#H5底部输入框兼容手机虚拟键盘遮挡问题总结\" class=\"headerlink\" title=\"H5底部输入框兼容手机虚拟键盘遮挡问题总结\"></a>H5底部输入框兼容手机虚拟键盘遮挡问题总结</h1><h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p><strong>业务场景：</strong>内嵌APP的手机聊天页面，输入框absolute定位在底部，由于fixed定位在ios机型上表现混乱，所以没有选用fixed定位。</p>\n<p><strong>安卓手机表现：</strong>虚拟键盘弹起，输入框不会被遮挡，但页面不会随着虚拟键盘的弹起而向上移动，聊天区域被遮挡。</p>\n<p><strong>IOS手机表现：</strong>虚拟键盘弹起，页面被虚拟键盘的高度推起，有很大概率输入框被遮挡。</p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><h3 id=\"通用设置\"><a href=\"#通用设置\" class=\"headerlink\" title=\"通用设置\"></a>通用设置</h3><p>页面加载之后记录初始视口高度，安卓机型直接用<code>window.innerHeight</code>可以准确获取，但由于ios中使用<code>window.innerHeight</code>高度计算有时不正确，所以采用<code>screen.height</code>来动态的计算高度。</p>\n<ul>\n<li><p>iphoneX的视口高度为<code>screen.height-78</code></p>\n</li>\n<li><p>其他iphone机型的视口高度为<code>screen.height-20</code></p>\n</li>\n</ul>\n<h3 id=\"安卓机型\"><a href=\"#安卓机型\" class=\"headerlink\" title=\"安卓机型\"></a>安卓机型</h3><ol>\n<li><p>监听<code>window.resize</code>事件，设置100毫秒延时执行，在回调中通过<code>window.innerHeight</code>再次获得视口高度，当初始视口高度-当前视口高度&gt;0时，则判断虚拟键盘弹起，否则虚拟键盘落下。</p>\n</li>\n<li><p>虚拟键盘弹起时，设置聊天内容区高度，并将聊天气泡滚动到底部。</p>\n</li>\n<li><p>虚拟键盘落下时，还原聊天内容区高度。</p>\n</li>\n</ol>\n<h3 id=\"IOS机型\"><a href=\"#IOS机型\" class=\"headerlink\" title=\"IOS机型\"></a>IOS机型</h3><ol>\n<li><p>ios机型中监听<code>window.resize</code>事件无效，所以监听输入框的focusin，延时400毫秒来判断虚拟键盘弹出。</p>\n</li>\n<li><p>通过js bridge来获得虚拟键盘高度，但由于iphoneX机型中虚拟键盘的高度是包括手机系统中的底部控制栏的，所以要将计算高度减去34方可得到正确的虚拟键盘高度，用虚拟键盘高度来动态计算输入框的top值，并将bottom值设为auto，同时设置聊天内容区高度，并将聊天气泡滚动到底部。</p>\n</li>\n<li><p>监听focusout事件，延时100毫秒，判断虚拟键盘落下，还原页面。</p>\n</li>\n</ol>\n"},{"title":"JavaScript必会算法-排序","date":"2017-11-18T01:07:42.000Z","description":"4个用JavaScript实现的排序算法","_content":"写在前面的交换函数:\n```\n/**\n * 交换函数\n * @param  {Array} arr   要交换的数组\n * @param  {Number} num1 传入的第一个值\n * @param  {Number} num2 传入的第二个值\n */\nfunction swap(arr, num1, num2) {\n    var temp = arr[num1];\n    arr[num1] = arr[num2];\n    arr[num2] = temp;\n}\n```\n\n# 冒泡排序\n```\n/**\n * 冒泡排序\n * @param  {Array} arr 传入要排序的数组\n * @return {Array}     返回排序好的数组\n */\nfunction bubbleSort(arr) {\n    var length = arr.length;\n    var flag = true;\n    for (var i = 0; i < length && flag; i++) {\n        flag = false;\n        for (var j = 0; j < length - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                swap(arr, j, j + 1);\n\n                // 发生了交换\n                flag = true;\n            }\n        }\n    }\n    return arr;\n}\n```\n\n# 选择排序\n```\n/**\n * 选择排序\n * @param  {Array} arr 传入要排序的数组\n * @return {Array}     返回排序好的数组\n */\nfunction selectionSort(arr) {\n    var length = arr.length;\n    for (var i = 0; i < length - 1; i++) {\n        var minIndex = i;\n        for (var j = i + 1; j < length; j++) {\n            if (arr[minIndex] > arr[j]) {\n                minIndex = j;\n            }\n        }\n        if (minIndex !== i) {\n            swap(arr, i, minIndex);\n        }\n    }\n    return arr;\n}\n```\n\n# 插入排序\n```\n/**\n * 插入排序\n * @param  {Array} arr 传入要排序的数组\n * @return {Array}     返回排序好的数组\n */\nfunction insertSort(arr) {\n    var length = arr.length;\n    for (var i = 1; i < length; i++) {\n        for (var j = i; j > 0; j--) {\n            if (arr[j] < arr[j - 1]) {\n                swap(arr, j, j - 1);\n            }\n        }\n    }\n    return arr;\n}\n```\n\n# 快速排序\n```\n/**\n * 快速排序\n * @param  {Array} arr 传入要排序的数组\n * @return {Array}     返回排序好的数组\n */\nfunction quickSort(arr) {\n\n    // 递归临界条件\n    if (arr.length <= 1) {\n        return arr;\n    }\n\n    // 取出基准点\n    var temp = arr.splice(0, 1)[0];\n    var leftArr = [];\n    var rightArr = [];\n\n    for (var i = 0; i < arr.length; i++) {\n        if (temp < arr[i]) {\n            rightArr.push(arr[i]);\n        } else {\n            leftArr.push(arr[i]);\n        }\n    }\n    return quickSort(leftArr).concat([temp], quickSort(rightArr));\n}\n```\n","source":"_posts/JavaScript必会算法-排序.md","raw":"---\ntitle: JavaScript必会算法-排序\ndate: 2017-11-18 09:07:42\ncategories: 算法\ntags:\n     - 算法\n     - JavaScript\ndescription: 4个用JavaScript实现的排序算法\n---\n写在前面的交换函数:\n```\n/**\n * 交换函数\n * @param  {Array} arr   要交换的数组\n * @param  {Number} num1 传入的第一个值\n * @param  {Number} num2 传入的第二个值\n */\nfunction swap(arr, num1, num2) {\n    var temp = arr[num1];\n    arr[num1] = arr[num2];\n    arr[num2] = temp;\n}\n```\n\n# 冒泡排序\n```\n/**\n * 冒泡排序\n * @param  {Array} arr 传入要排序的数组\n * @return {Array}     返回排序好的数组\n */\nfunction bubbleSort(arr) {\n    var length = arr.length;\n    var flag = true;\n    for (var i = 0; i < length && flag; i++) {\n        flag = false;\n        for (var j = 0; j < length - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                swap(arr, j, j + 1);\n\n                // 发生了交换\n                flag = true;\n            }\n        }\n    }\n    return arr;\n}\n```\n\n# 选择排序\n```\n/**\n * 选择排序\n * @param  {Array} arr 传入要排序的数组\n * @return {Array}     返回排序好的数组\n */\nfunction selectionSort(arr) {\n    var length = arr.length;\n    for (var i = 0; i < length - 1; i++) {\n        var minIndex = i;\n        for (var j = i + 1; j < length; j++) {\n            if (arr[minIndex] > arr[j]) {\n                minIndex = j;\n            }\n        }\n        if (minIndex !== i) {\n            swap(arr, i, minIndex);\n        }\n    }\n    return arr;\n}\n```\n\n# 插入排序\n```\n/**\n * 插入排序\n * @param  {Array} arr 传入要排序的数组\n * @return {Array}     返回排序好的数组\n */\nfunction insertSort(arr) {\n    var length = arr.length;\n    for (var i = 1; i < length; i++) {\n        for (var j = i; j > 0; j--) {\n            if (arr[j] < arr[j - 1]) {\n                swap(arr, j, j - 1);\n            }\n        }\n    }\n    return arr;\n}\n```\n\n# 快速排序\n```\n/**\n * 快速排序\n * @param  {Array} arr 传入要排序的数组\n * @return {Array}     返回排序好的数组\n */\nfunction quickSort(arr) {\n\n    // 递归临界条件\n    if (arr.length <= 1) {\n        return arr;\n    }\n\n    // 取出基准点\n    var temp = arr.splice(0, 1)[0];\n    var leftArr = [];\n    var rightArr = [];\n\n    for (var i = 0; i < arr.length; i++) {\n        if (temp < arr[i]) {\n            rightArr.push(arr[i]);\n        } else {\n            leftArr.push(arr[i]);\n        }\n    }\n    return quickSort(leftArr).concat([temp], quickSort(rightArr));\n}\n```\n","slug":"JavaScript必会算法-排序","published":1,"updated":"2018-01-09T13:38:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjksf3cwb000hh8efws6wjwem","content":"<p>写在前面的交换函数:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 交换函数</span><br><span class=\"line\"> * @param  &#123;Array&#125; arr   要交换的数组</span><br><span class=\"line\"> * @param  &#123;Number&#125; num1 传入的第一个值</span><br><span class=\"line\"> * @param  &#123;Number&#125; num2 传入的第二个值</span><br><span class=\"line\"> */</span><br><span class=\"line\">function swap(arr, num1, num2) &#123;</span><br><span class=\"line\">    var temp = arr[num1];</span><br><span class=\"line\">    arr[num1] = arr[num2];</span><br><span class=\"line\">    arr[num2] = temp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 冒泡排序</span><br><span class=\"line\"> * @param  &#123;Array&#125; arr 传入要排序的数组</span><br><span class=\"line\"> * @return &#123;Array&#125;     返回排序好的数组</span><br><span class=\"line\"> */</span><br><span class=\"line\">function bubbleSort(arr) &#123;</span><br><span class=\"line\">    var length = arr.length;</span><br><span class=\"line\">    var flag = true;</span><br><span class=\"line\">    for (var i = 0; i &lt; length &amp;&amp; flag; i++) &#123;</span><br><span class=\"line\">        flag = false;</span><br><span class=\"line\">        for (var j = 0; j &lt; length - i - 1; j++) &#123;</span><br><span class=\"line\">            if (arr[j] &gt; arr[j + 1]) &#123;</span><br><span class=\"line\">                swap(arr, j, j + 1);</span><br><span class=\"line\"></span><br><span class=\"line\">                // 发生了交换</span><br><span class=\"line\">                flag = true;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 选择排序</span><br><span class=\"line\"> * @param  &#123;Array&#125; arr 传入要排序的数组</span><br><span class=\"line\"> * @return &#123;Array&#125;     返回排序好的数组</span><br><span class=\"line\"> */</span><br><span class=\"line\">function selectionSort(arr) &#123;</span><br><span class=\"line\">    var length = arr.length;</span><br><span class=\"line\">    for (var i = 0; i &lt; length - 1; i++) &#123;</span><br><span class=\"line\">        var minIndex = i;</span><br><span class=\"line\">        for (var j = i + 1; j &lt; length; j++) &#123;</span><br><span class=\"line\">            if (arr[minIndex] &gt; arr[j]) &#123;</span><br><span class=\"line\">                minIndex = j;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (minIndex !== i) &#123;</span><br><span class=\"line\">            swap(arr, i, minIndex);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 插入排序</span><br><span class=\"line\"> * @param  &#123;Array&#125; arr 传入要排序的数组</span><br><span class=\"line\"> * @return &#123;Array&#125;     返回排序好的数组</span><br><span class=\"line\"> */</span><br><span class=\"line\">function insertSort(arr) &#123;</span><br><span class=\"line\">    var length = arr.length;</span><br><span class=\"line\">    for (var i = 1; i &lt; length; i++) &#123;</span><br><span class=\"line\">        for (var j = i; j &gt; 0; j--) &#123;</span><br><span class=\"line\">            if (arr[j] &lt; arr[j - 1]) &#123;</span><br><span class=\"line\">                swap(arr, j, j - 1);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 快速排序</span><br><span class=\"line\"> * @param  &#123;Array&#125; arr 传入要排序的数组</span><br><span class=\"line\"> * @return &#123;Array&#125;     返回排序好的数组</span><br><span class=\"line\"> */</span><br><span class=\"line\">function quickSort(arr) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 递归临界条件</span><br><span class=\"line\">    if (arr.length &lt;= 1) &#123;</span><br><span class=\"line\">        return arr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 取出基准点</span><br><span class=\"line\">    var temp = arr.splice(0, 1)[0];</span><br><span class=\"line\">    var leftArr = [];</span><br><span class=\"line\">    var rightArr = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    for (var i = 0; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">        if (temp &lt; arr[i]) &#123;</span><br><span class=\"line\">            rightArr.push(arr[i]);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            leftArr.push(arr[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return quickSort(leftArr).concat([temp], quickSort(rightArr));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>写在前面的交换函数:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 交换函数</span><br><span class=\"line\"> * @param  &#123;Array&#125; arr   要交换的数组</span><br><span class=\"line\"> * @param  &#123;Number&#125; num1 传入的第一个值</span><br><span class=\"line\"> * @param  &#123;Number&#125; num2 传入的第二个值</span><br><span class=\"line\"> */</span><br><span class=\"line\">function swap(arr, num1, num2) &#123;</span><br><span class=\"line\">    var temp = arr[num1];</span><br><span class=\"line\">    arr[num1] = arr[num2];</span><br><span class=\"line\">    arr[num2] = temp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 冒泡排序</span><br><span class=\"line\"> * @param  &#123;Array&#125; arr 传入要排序的数组</span><br><span class=\"line\"> * @return &#123;Array&#125;     返回排序好的数组</span><br><span class=\"line\"> */</span><br><span class=\"line\">function bubbleSort(arr) &#123;</span><br><span class=\"line\">    var length = arr.length;</span><br><span class=\"line\">    var flag = true;</span><br><span class=\"line\">    for (var i = 0; i &lt; length &amp;&amp; flag; i++) &#123;</span><br><span class=\"line\">        flag = false;</span><br><span class=\"line\">        for (var j = 0; j &lt; length - i - 1; j++) &#123;</span><br><span class=\"line\">            if (arr[j] &gt; arr[j + 1]) &#123;</span><br><span class=\"line\">                swap(arr, j, j + 1);</span><br><span class=\"line\"></span><br><span class=\"line\">                // 发生了交换</span><br><span class=\"line\">                flag = true;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 选择排序</span><br><span class=\"line\"> * @param  &#123;Array&#125; arr 传入要排序的数组</span><br><span class=\"line\"> * @return &#123;Array&#125;     返回排序好的数组</span><br><span class=\"line\"> */</span><br><span class=\"line\">function selectionSort(arr) &#123;</span><br><span class=\"line\">    var length = arr.length;</span><br><span class=\"line\">    for (var i = 0; i &lt; length - 1; i++) &#123;</span><br><span class=\"line\">        var minIndex = i;</span><br><span class=\"line\">        for (var j = i + 1; j &lt; length; j++) &#123;</span><br><span class=\"line\">            if (arr[minIndex] &gt; arr[j]) &#123;</span><br><span class=\"line\">                minIndex = j;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (minIndex !== i) &#123;</span><br><span class=\"line\">            swap(arr, i, minIndex);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 插入排序</span><br><span class=\"line\"> * @param  &#123;Array&#125; arr 传入要排序的数组</span><br><span class=\"line\"> * @return &#123;Array&#125;     返回排序好的数组</span><br><span class=\"line\"> */</span><br><span class=\"line\">function insertSort(arr) &#123;</span><br><span class=\"line\">    var length = arr.length;</span><br><span class=\"line\">    for (var i = 1; i &lt; length; i++) &#123;</span><br><span class=\"line\">        for (var j = i; j &gt; 0; j--) &#123;</span><br><span class=\"line\">            if (arr[j] &lt; arr[j - 1]) &#123;</span><br><span class=\"line\">                swap(arr, j, j - 1);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 快速排序</span><br><span class=\"line\"> * @param  &#123;Array&#125; arr 传入要排序的数组</span><br><span class=\"line\"> * @return &#123;Array&#125;     返回排序好的数组</span><br><span class=\"line\"> */</span><br><span class=\"line\">function quickSort(arr) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 递归临界条件</span><br><span class=\"line\">    if (arr.length &lt;= 1) &#123;</span><br><span class=\"line\">        return arr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 取出基准点</span><br><span class=\"line\">    var temp = arr.splice(0, 1)[0];</span><br><span class=\"line\">    var leftArr = [];</span><br><span class=\"line\">    var rightArr = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    for (var i = 0; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">        if (temp &lt; arr[i]) &#123;</span><br><span class=\"line\">            rightArr.push(arr[i]);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            leftArr.push(arr[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return quickSort(leftArr).concat([temp], quickSort(rightArr));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"JavaScript高级程序设计读书笔记--第1章","date":"2017-07-30T07:15:52.000Z","description":"JavaScript高级程序设计读书笔记--第1章JavaScript简介","_content":"# JavaScript简史\nJavaScript诞生于1995年，当时JavaScript的主要是负责一些输入的验证，由Netscape公司着手开发。\n1997年，JavaScript1.1被建议提交给了欧洲计算机制造商协会(ECMA)，由ECMA定义了一种名为ECMAScript(发音为\"ek-ma-script\")的新脚本语言标准。\n# JavaScript实现\n一个完整的JavaScript实现应由三部分组成：**核心(ECMAScript)、文档对象模型(DOM)、浏览器对象模型(DOM)**。\n## (1)ECMAScript\nECMAScirpt是一个语言标准，它定义了这门语言的基础，具体有以下几个组成部分：\n    1.语法\n    2.类型\n    3.语句\n    4.关键字\n    5.保留字\n    6.操作符\n    7.对象\n脚本语言的执行需要宿主环境，例如Web浏览器、Node(一种服务器JavaScript平台)、AdobeFlash等。\n## (2)文档对象模型(DOM)\n文档对象模型：Document Object Model，是针对XML但经过扩展用户HTML的应用程序(API)，DOM把整个页面映射为一个多层节点结构，提供了访问和操作网页内容的方法和接口。**注意：DOM并不是针对JavaScript的，很多语言也实现了DOM**。\n## (3)浏览器对象模型(BOM)\n浏览器对象模型：Browser Object Model，支持访问和**操作浏览器窗口，提供了与浏览器交互的方法和接口**。\n# JavaScript版本\nJavaScript在浏览器中最后一个版本号是1.3，JavaScript1.4是针对服务器的实现。","source":"_posts/JavaScript高级程序设计读书笔记-第1章.md","raw":"---\ntitle: JavaScript高级程序设计读书笔记--第1章\ndate: 2017-07-30 15:15:52\ncategories: JS高程笔记\ntags:\n     - 笔记\n     - JavaScript\ndescription: JavaScript高级程序设计读书笔记--第1章JavaScript简介\n---\n# JavaScript简史\nJavaScript诞生于1995年，当时JavaScript的主要是负责一些输入的验证，由Netscape公司着手开发。\n1997年，JavaScript1.1被建议提交给了欧洲计算机制造商协会(ECMA)，由ECMA定义了一种名为ECMAScript(发音为\"ek-ma-script\")的新脚本语言标准。\n# JavaScript实现\n一个完整的JavaScript实现应由三部分组成：**核心(ECMAScript)、文档对象模型(DOM)、浏览器对象模型(DOM)**。\n## (1)ECMAScript\nECMAScirpt是一个语言标准，它定义了这门语言的基础，具体有以下几个组成部分：\n    1.语法\n    2.类型\n    3.语句\n    4.关键字\n    5.保留字\n    6.操作符\n    7.对象\n脚本语言的执行需要宿主环境，例如Web浏览器、Node(一种服务器JavaScript平台)、AdobeFlash等。\n## (2)文档对象模型(DOM)\n文档对象模型：Document Object Model，是针对XML但经过扩展用户HTML的应用程序(API)，DOM把整个页面映射为一个多层节点结构，提供了访问和操作网页内容的方法和接口。**注意：DOM并不是针对JavaScript的，很多语言也实现了DOM**。\n## (3)浏览器对象模型(BOM)\n浏览器对象模型：Browser Object Model，支持访问和**操作浏览器窗口，提供了与浏览器交互的方法和接口**。\n# JavaScript版本\nJavaScript在浏览器中最后一个版本号是1.3，JavaScript1.4是针对服务器的实现。","slug":"JavaScript高级程序设计读书笔记-第1章","published":1,"updated":"2017-07-30T08:12:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjksf3cwc000lh8ef7y3fvf1e","content":"<h1 id=\"JavaScript简史\"><a href=\"#JavaScript简史\" class=\"headerlink\" title=\"JavaScript简史\"></a>JavaScript简史</h1><p>JavaScript诞生于1995年，当时JavaScript的主要是负责一些输入的验证，由Netscape公司着手开发。<br>1997年，JavaScript1.1被建议提交给了欧洲计算机制造商协会(ECMA)，由ECMA定义了一种名为ECMAScript(发音为”ek-ma-script”)的新脚本语言标准。</p>\n<h1 id=\"JavaScript实现\"><a href=\"#JavaScript实现\" class=\"headerlink\" title=\"JavaScript实现\"></a>JavaScript实现</h1><p>一个完整的JavaScript实现应由三部分组成：<strong>核心(ECMAScript)、文档对象模型(DOM)、浏览器对象模型(DOM)</strong>。</p>\n<h2 id=\"1-ECMAScript\"><a href=\"#1-ECMAScript\" class=\"headerlink\" title=\"(1)ECMAScript\"></a>(1)ECMAScript</h2><p>ECMAScirpt是一个语言标准，它定义了这门语言的基础，具体有以下几个组成部分：<br>    1.语法<br>    2.类型<br>    3.语句<br>    4.关键字<br>    5.保留字<br>    6.操作符<br>    7.对象<br>脚本语言的执行需要宿主环境，例如Web浏览器、Node(一种服务器JavaScript平台)、AdobeFlash等。</p>\n<h2 id=\"2-文档对象模型-DOM\"><a href=\"#2-文档对象模型-DOM\" class=\"headerlink\" title=\"(2)文档对象模型(DOM)\"></a>(2)文档对象模型(DOM)</h2><p>文档对象模型：Document Object Model，是针对XML但经过扩展用户HTML的应用程序(API)，DOM把整个页面映射为一个多层节点结构，提供了访问和操作网页内容的方法和接口。<strong>注意：DOM并不是针对JavaScript的，很多语言也实现了DOM</strong>。</p>\n<h2 id=\"3-浏览器对象模型-BOM\"><a href=\"#3-浏览器对象模型-BOM\" class=\"headerlink\" title=\"(3)浏览器对象模型(BOM)\"></a>(3)浏览器对象模型(BOM)</h2><p>浏览器对象模型：Browser Object Model，支持访问和<strong>操作浏览器窗口，提供了与浏览器交互的方法和接口</strong>。</p>\n<h1 id=\"JavaScript版本\"><a href=\"#JavaScript版本\" class=\"headerlink\" title=\"JavaScript版本\"></a>JavaScript版本</h1><p>JavaScript在浏览器中最后一个版本号是1.3，JavaScript1.4是针对服务器的实现。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"JavaScript简史\"><a href=\"#JavaScript简史\" class=\"headerlink\" title=\"JavaScript简史\"></a>JavaScript简史</h1><p>JavaScript诞生于1995年，当时JavaScript的主要是负责一些输入的验证，由Netscape公司着手开发。<br>1997年，JavaScript1.1被建议提交给了欧洲计算机制造商协会(ECMA)，由ECMA定义了一种名为ECMAScript(发音为”ek-ma-script”)的新脚本语言标准。</p>\n<h1 id=\"JavaScript实现\"><a href=\"#JavaScript实现\" class=\"headerlink\" title=\"JavaScript实现\"></a>JavaScript实现</h1><p>一个完整的JavaScript实现应由三部分组成：<strong>核心(ECMAScript)、文档对象模型(DOM)、浏览器对象模型(DOM)</strong>。</p>\n<h2 id=\"1-ECMAScript\"><a href=\"#1-ECMAScript\" class=\"headerlink\" title=\"(1)ECMAScript\"></a>(1)ECMAScript</h2><p>ECMAScirpt是一个语言标准，它定义了这门语言的基础，具体有以下几个组成部分：<br>    1.语法<br>    2.类型<br>    3.语句<br>    4.关键字<br>    5.保留字<br>    6.操作符<br>    7.对象<br>脚本语言的执行需要宿主环境，例如Web浏览器、Node(一种服务器JavaScript平台)、AdobeFlash等。</p>\n<h2 id=\"2-文档对象模型-DOM\"><a href=\"#2-文档对象模型-DOM\" class=\"headerlink\" title=\"(2)文档对象模型(DOM)\"></a>(2)文档对象模型(DOM)</h2><p>文档对象模型：Document Object Model，是针对XML但经过扩展用户HTML的应用程序(API)，DOM把整个页面映射为一个多层节点结构，提供了访问和操作网页内容的方法和接口。<strong>注意：DOM并不是针对JavaScript的，很多语言也实现了DOM</strong>。</p>\n<h2 id=\"3-浏览器对象模型-BOM\"><a href=\"#3-浏览器对象模型-BOM\" class=\"headerlink\" title=\"(3)浏览器对象模型(BOM)\"></a>(3)浏览器对象模型(BOM)</h2><p>浏览器对象模型：Browser Object Model，支持访问和<strong>操作浏览器窗口，提供了与浏览器交互的方法和接口</strong>。</p>\n<h1 id=\"JavaScript版本\"><a href=\"#JavaScript版本\" class=\"headerlink\" title=\"JavaScript版本\"></a>JavaScript版本</h1><p>JavaScript在浏览器中最后一个版本号是1.3，JavaScript1.4是针对服务器的实现。</p>\n"},{"title":"JavaScript高级程序设计读书笔记-第2章","date":"2017-07-30T08:01:54.000Z","description":"JavaScript高级程序设计读书笔记--第2章在HTML中使用JavaScript","_content":"# &lt;script&gt;元素\nHTML4.01为&lt;script&gt;定义了下列6个属性：\n* async：可选属性，表示立即下载该脚本，只对外部脚本有效。\n* charset：可选属性，通过src属性指定的代码字符集。\n* defer：可选属性，表示脚本可以延迟到文档完全被解析和显示之后再执行，只对外部脚本有效。\n* language：已废弃。\n* src：可选属性，表示要执行代码的外部文件。\n* type：可选属性，表示编写代码使用的脚本语言的内容类型(MIME类型)。\n使用script元素的方式有两种：\n1. 直接在页面中嵌入JavaScript代码：在&lt;script&gt;内部的代码将被从上至下依次解析。\n2. 包含外部JavaScript文件：浏览器会按照引入顺序从上至下依次解析**(被依赖的js文件要在依赖js文件的上面)**。\n## (1)标签的位置\n* 传统的做法：放在&lt;head&gt;元素中。\n* 现代Web程序：放在&lt;body&gt;元素中的最后位置**(避免出现加载空白的延迟)**。\n## (2)延迟脚本\n设置defer属性后，会告知浏览器脚本会被延迟到整个页面都被解析后再执行(立即下载，但延迟执行)。\n## (3)异步脚本\n设置async属性与defer相似，但async只适用于外部js文件，告知**浏览器立即下载文件，但js文件执行顺序并不一定按照引入的先后顺序执行**。\n## (4)在XHTML中的用法\nHTML5正在快速的被接受和采用，建议遵循H5标准。\n这里提一下**CDATA片段：&lt;![CDATA[不需要被XML解析的内容]]&gt;**。\n## (5)不推荐使用的语法\n# 嵌入代码与外部文件\n一般认为最好的做法还是引入外部文件，也就是说将写好的js代码封装到文件里，这么做的好处有：**可维护性、可缓存(加快页面加载速度)、适应未来**。\n# 文档模式\n混杂模式和标准模式。\n# &lt;noscript&gt;模式\n&lt;noscript&gt;元素中的内容只会在不支持脚本和脚本被禁用的浏览器中显示出来，增加友好提示。\n例如：\n```\n<noscript>\n    <p>本页面需要浏览器支持JavaScript</p>\n</noscript>\n```","source":"_posts/JavaScript高级程序设计读书笔记-第2章.md","raw":"---\ntitle: JavaScript高级程序设计读书笔记-第2章\ndate: 2017-07-30 16:01:54\ncategories: JS高程笔记\ntags:\n     - 笔记\n     - JavaScript\ndescription: JavaScript高级程序设计读书笔记--第2章在HTML中使用JavaScript\n---\n# &lt;script&gt;元素\nHTML4.01为&lt;script&gt;定义了下列6个属性：\n* async：可选属性，表示立即下载该脚本，只对外部脚本有效。\n* charset：可选属性，通过src属性指定的代码字符集。\n* defer：可选属性，表示脚本可以延迟到文档完全被解析和显示之后再执行，只对外部脚本有效。\n* language：已废弃。\n* src：可选属性，表示要执行代码的外部文件。\n* type：可选属性，表示编写代码使用的脚本语言的内容类型(MIME类型)。\n使用script元素的方式有两种：\n1. 直接在页面中嵌入JavaScript代码：在&lt;script&gt;内部的代码将被从上至下依次解析。\n2. 包含外部JavaScript文件：浏览器会按照引入顺序从上至下依次解析**(被依赖的js文件要在依赖js文件的上面)**。\n## (1)标签的位置\n* 传统的做法：放在&lt;head&gt;元素中。\n* 现代Web程序：放在&lt;body&gt;元素中的最后位置**(避免出现加载空白的延迟)**。\n## (2)延迟脚本\n设置defer属性后，会告知浏览器脚本会被延迟到整个页面都被解析后再执行(立即下载，但延迟执行)。\n## (3)异步脚本\n设置async属性与defer相似，但async只适用于外部js文件，告知**浏览器立即下载文件，但js文件执行顺序并不一定按照引入的先后顺序执行**。\n## (4)在XHTML中的用法\nHTML5正在快速的被接受和采用，建议遵循H5标准。\n这里提一下**CDATA片段：&lt;![CDATA[不需要被XML解析的内容]]&gt;**。\n## (5)不推荐使用的语法\n# 嵌入代码与外部文件\n一般认为最好的做法还是引入外部文件，也就是说将写好的js代码封装到文件里，这么做的好处有：**可维护性、可缓存(加快页面加载速度)、适应未来**。\n# 文档模式\n混杂模式和标准模式。\n# &lt;noscript&gt;模式\n&lt;noscript&gt;元素中的内容只会在不支持脚本和脚本被禁用的浏览器中显示出来，增加友好提示。\n例如：\n```\n<noscript>\n    <p>本页面需要浏览器支持JavaScript</p>\n</noscript>\n```","slug":"JavaScript高级程序设计读书笔记-第2章","published":1,"updated":"2017-08-22T14:22:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjksf3cwe000oh8efubkcu87i","content":"<h1 id=\"lt-script-gt-元素\"><a href=\"#lt-script-gt-元素\" class=\"headerlink\" title=\"&lt;script&gt;元素\"></a>&lt;script&gt;元素</h1><p>HTML4.01为&lt;script&gt;定义了下列6个属性：</p>\n<ul>\n<li>async：可选属性，表示立即下载该脚本，只对外部脚本有效。</li>\n<li>charset：可选属性，通过src属性指定的代码字符集。</li>\n<li>defer：可选属性，表示脚本可以延迟到文档完全被解析和显示之后再执行，只对外部脚本有效。</li>\n<li>language：已废弃。</li>\n<li>src：可选属性，表示要执行代码的外部文件。</li>\n<li>type：可选属性，表示编写代码使用的脚本语言的内容类型(MIME类型)。<br>使用script元素的方式有两种：</li>\n</ul>\n<ol>\n<li>直接在页面中嵌入JavaScript代码：在&lt;script&gt;内部的代码将被从上至下依次解析。</li>\n<li>包含外部JavaScript文件：浏览器会按照引入顺序从上至下依次解析<strong>(被依赖的js文件要在依赖js文件的上面)</strong>。<h2 id=\"1-标签的位置\"><a href=\"#1-标签的位置\" class=\"headerlink\" title=\"(1)标签的位置\"></a>(1)标签的位置</h2></li>\n</ol>\n<ul>\n<li>传统的做法：放在&lt;head&gt;元素中。</li>\n<li>现代Web程序：放在&lt;body&gt;元素中的最后位置<strong>(避免出现加载空白的延迟)</strong>。<h2 id=\"2-延迟脚本\"><a href=\"#2-延迟脚本\" class=\"headerlink\" title=\"(2)延迟脚本\"></a>(2)延迟脚本</h2>设置defer属性后，会告知浏览器脚本会被延迟到整个页面都被解析后再执行(立即下载，但延迟执行)。<h2 id=\"3-异步脚本\"><a href=\"#3-异步脚本\" class=\"headerlink\" title=\"(3)异步脚本\"></a>(3)异步脚本</h2>设置async属性与defer相似，但async只适用于外部js文件，告知<strong>浏览器立即下载文件，但js文件执行顺序并不一定按照引入的先后顺序执行</strong>。<h2 id=\"4-在XHTML中的用法\"><a href=\"#4-在XHTML中的用法\" class=\"headerlink\" title=\"(4)在XHTML中的用法\"></a>(4)在XHTML中的用法</h2>HTML5正在快速的被接受和采用，建议遵循H5标准。<br>这里提一下<strong>CDATA片段：&lt;![CDATA[不需要被XML解析的内容]]&gt;</strong>。<h2 id=\"5-不推荐使用的语法\"><a href=\"#5-不推荐使用的语法\" class=\"headerlink\" title=\"(5)不推荐使用的语法\"></a>(5)不推荐使用的语法</h2><h1 id=\"嵌入代码与外部文件\"><a href=\"#嵌入代码与外部文件\" class=\"headerlink\" title=\"嵌入代码与外部文件\"></a>嵌入代码与外部文件</h1>一般认为最好的做法还是引入外部文件，也就是说将写好的js代码封装到文件里，这么做的好处有：<strong>可维护性、可缓存(加快页面加载速度)、适应未来</strong>。<h1 id=\"文档模式\"><a href=\"#文档模式\" class=\"headerlink\" title=\"文档模式\"></a>文档模式</h1>混杂模式和标准模式。<h1 id=\"lt-noscript-gt-模式\"><a href=\"#lt-noscript-gt-模式\" class=\"headerlink\" title=\"&lt;noscript&gt;模式\"></a>&lt;noscript&gt;模式</h1>&lt;noscript&gt;元素中的内容只会在不支持脚本和脚本被禁用的浏览器中显示出来，增加友好提示。<br>例如：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;noscript&gt;</span><br><span class=\"line\">    &lt;p&gt;本页面需要浏览器支持JavaScript&lt;/p&gt;</span><br><span class=\"line\">&lt;/noscript&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"lt-script-gt-元素\"><a href=\"#lt-script-gt-元素\" class=\"headerlink\" title=\"&lt;script&gt;元素\"></a>&lt;script&gt;元素</h1><p>HTML4.01为&lt;script&gt;定义了下列6个属性：</p>\n<ul>\n<li>async：可选属性，表示立即下载该脚本，只对外部脚本有效。</li>\n<li>charset：可选属性，通过src属性指定的代码字符集。</li>\n<li>defer：可选属性，表示脚本可以延迟到文档完全被解析和显示之后再执行，只对外部脚本有效。</li>\n<li>language：已废弃。</li>\n<li>src：可选属性，表示要执行代码的外部文件。</li>\n<li>type：可选属性，表示编写代码使用的脚本语言的内容类型(MIME类型)。<br>使用script元素的方式有两种：</li>\n</ul>\n<ol>\n<li>直接在页面中嵌入JavaScript代码：在&lt;script&gt;内部的代码将被从上至下依次解析。</li>\n<li>包含外部JavaScript文件：浏览器会按照引入顺序从上至下依次解析<strong>(被依赖的js文件要在依赖js文件的上面)</strong>。<h2 id=\"1-标签的位置\"><a href=\"#1-标签的位置\" class=\"headerlink\" title=\"(1)标签的位置\"></a>(1)标签的位置</h2></li>\n</ol>\n<ul>\n<li>传统的做法：放在&lt;head&gt;元素中。</li>\n<li>现代Web程序：放在&lt;body&gt;元素中的最后位置<strong>(避免出现加载空白的延迟)</strong>。<h2 id=\"2-延迟脚本\"><a href=\"#2-延迟脚本\" class=\"headerlink\" title=\"(2)延迟脚本\"></a>(2)延迟脚本</h2>设置defer属性后，会告知浏览器脚本会被延迟到整个页面都被解析后再执行(立即下载，但延迟执行)。<h2 id=\"3-异步脚本\"><a href=\"#3-异步脚本\" class=\"headerlink\" title=\"(3)异步脚本\"></a>(3)异步脚本</h2>设置async属性与defer相似，但async只适用于外部js文件，告知<strong>浏览器立即下载文件，但js文件执行顺序并不一定按照引入的先后顺序执行</strong>。<h2 id=\"4-在XHTML中的用法\"><a href=\"#4-在XHTML中的用法\" class=\"headerlink\" title=\"(4)在XHTML中的用法\"></a>(4)在XHTML中的用法</h2>HTML5正在快速的被接受和采用，建议遵循H5标准。<br>这里提一下<strong>CDATA片段：&lt;![CDATA[不需要被XML解析的内容]]&gt;</strong>。<h2 id=\"5-不推荐使用的语法\"><a href=\"#5-不推荐使用的语法\" class=\"headerlink\" title=\"(5)不推荐使用的语法\"></a>(5)不推荐使用的语法</h2><h1 id=\"嵌入代码与外部文件\"><a href=\"#嵌入代码与外部文件\" class=\"headerlink\" title=\"嵌入代码与外部文件\"></a>嵌入代码与外部文件</h1>一般认为最好的做法还是引入外部文件，也就是说将写好的js代码封装到文件里，这么做的好处有：<strong>可维护性、可缓存(加快页面加载速度)、适应未来</strong>。<h1 id=\"文档模式\"><a href=\"#文档模式\" class=\"headerlink\" title=\"文档模式\"></a>文档模式</h1>混杂模式和标准模式。<h1 id=\"lt-noscript-gt-模式\"><a href=\"#lt-noscript-gt-模式\" class=\"headerlink\" title=\"&lt;noscript&gt;模式\"></a>&lt;noscript&gt;模式</h1>&lt;noscript&gt;元素中的内容只会在不支持脚本和脚本被禁用的浏览器中显示出来，增加友好提示。<br>例如：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;noscript&gt;</span><br><span class=\"line\">    &lt;p&gt;本页面需要浏览器支持JavaScript&lt;/p&gt;</span><br><span class=\"line\">&lt;/noscript&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"JavaScript高级程序设计读书笔记-第3章","date":"2017-07-31T13:53:19.000Z","description":"JavaScript高级程序设计读书笔记--第3章基本概念","_content":"# 语法\n## (1)区分大小写\nECMAScript中的一切(变量、函数名和操作符)都**区分**大小写。\n## (2)标识符\n标识符：指变量、函数、属性的名字，或是函数的参数。\n标识符的书写规则如下：\n1. 第一个字符必须是字母、下划线_或美元符号。\n2. 其他字符可以是字母、下划线、美元符号或数字。\n\n>**注：标识符推荐驼峰法的命名规则如：newCode，不能把关键字、保留字、true、false、和null作为标识符。** \n\n## (3)注释\n* 单行注释：`//`\n* 块级注释：\n        /*\n        *\n        */\n## (4)严格模式\n启用严格模式:在脚本顶部添加\"use strict\"。它是一个编译指示，告诉支持的JavaScript引擎切换到严格模式。\n## (5)语句\nJavaScript有效语句以一个分号(;)结尾。\n代码块以{}标识。\n注：**建议不要省略分号！**。\n# 关键字和保留字\n* 具有特定用途的关键字：break do instanceof typeof case else new var catch finally return void continue for switch while debugger function this with default if throw delete in try\n* 不能用作标识符的保留字：abstract enum int short boolean export interface static byte extends long super char final native synchronized class float package throws const goto private transient debugger implements protected volatile double import pbulic let yield\n注：**使用关键字做标识符会导致\"Identifier Expected\"错误**。\n# 变量\nECMAScript中的变量是松散类型的，所谓松散类型就是可以用来保存任何类型的数据。\nECMAScript中使用var来声明变量，未经初始化的变量会保存一个特殊的值undefined。\n使用var声明的变量，是定义该变量作用域中的局部变量，也就是说在函数中使用var定义一个变量，在函数退出后，该变量就会销毁。如果不使用var定义变量(不推荐)，将会定义一个全局变量。\n# 数据类型\n## (1)typeof操作符\ntypeof是用来检测给定变量的数据类型的。\n使用typeof操作符返回的字符串有如下几种：\n* \"undefined\"--未定义\n* \"boolean\"--布尔值\n* \"string\"--字符串\n* \"number\"--数值\n* \"object\"--对象或null\n* \"function\"--函数\n例子：\n        var message = \"aaa\";\n        alert(typeof(message));\n        alert(typeof 1);\n## (2)Undefined类型\nUndefined类型只有一个值，就是undefined。使用var声明变量时未对其进行初始化，这个变量的值就是undefined。\n\n>注：**我们在声明变量时应尽量对其进行初始化，这样当我们遇到undefined时，就知道该变量是没有被声明，而不是没有被初始化。** \n\n## (3)Null类型\nNull类型也只有一个值，就是null。逻辑上来说null表示一个空对象指针，所以typeof(null)会返回Object。\n\n>注：**null == undefined，但null与undefined的用途不同，我们在声明对象时，应该把没有明确对象的变量值设为null。** \n\n## (4)Boolean类型\nBoolean类型有两个值：true和false。true不一定等于1，false也不一定等于0。\n运用转型函数Boolean()可以将一个值转换成对应的Boolean值。\n例如:\n        var message = \"hello world\";\n        alert(Boolean(message));\n各种数据类型转换规则一览表：\n<table> <tr> <th>数据类型</th> <th>转换为true的值</th> <th>转换为false的值</th></tr> <tr> <th>Boolean</th> <th>true</th> <th>false</th> </tr> <tr> <th>Number</th> <th>非0数值</th> <th>0和NaN</th> </tr> <tr> <th>String</th> <th>非空字符串</th> <th>\"\"</th> </tr> <tr> <th>Object</th> <th>任何对象</th> <th>null</th> </tr> <tr> <th>Undefined</th> <th> </th> <th>undefined</th> </tr> <table>\n## (5)Number类型\n### 1.浮点数值\n浮点数，即数值中必须有一个小数点，并且小数点后面必须有一位数字。\n对于那些极大或极小的浮点数，可以使用e表示法，如:\n` var floatNum = 3.12e7; //等于31200000`\n\n>注：**保存浮点数的内存空间是保存整数内存空间的2倍。** \n\n### 2.数值范围\nNumber.MIN_VALUE里保存着最小的数值，Number.MAX_VALUE里保存着最大的数值。\n如果某次计算结果超出了JavaScript的数值范围，则这个数值将自动转换为Infinity值。\nInfinity值无法再次进行计算。\n### 3.NaN\nNaN：即非数值(Not aNumber)，NaN与任何数值都不相等，包括NaN本身。\nECMAScript定义了一个叫isNaN()的函数，可以用来检测一个参数是不是“非数值”，例如：\n        alert(isNaN(\"blue\"));//true\n        alert(isNaN(10));//false\n### 4.数值转换\n三个方法：\n&emsp;&emsp;Number(任何类型):可以用于任何类型，\n&emsp;&emsp;parseInt(value,进制数):专门用于转换字符串，进制数可以不写，方法会自\n&emsp;&emsp;己判断。\n&emsp;&emsp;parseFloat(字符串,进制数):专门用于转换字符串，进制数可以不写，方法\n&emsp;&emsp;会自己判断。\n## (6)String类型\n### 1.字符字面量\n字符字面量又叫转义序列，用于表示非打印字符，也就是我们平时说的转义字符。常用字符字面量有如下几个：\n&emsp;&emsp;\\n 换行\n&emsp;&emsp;\\r 回车\n&emsp;&emsp;\\\\\\ 斜杠\n&emsp;&emsp;\\' 单引号\n&emsp;&emsp;\\\" 双引号\n&emsp;&emsp;\\b 退格\n### 2.字符串特点\nECMAScript中的字符串是不可变的，一旦创建就不能改变，要改变字符串的值，就需要把之前的字符串销毁，在重新定义一个字符串。\n注：字符串拼接效率低下的原因就是因为需要销毁原来的字符串，在重新定义字符串。\n### 3.转换为字符串\n字符串转换的方法有两种：\n&emsp;&emsp;toString()：几乎每个值都有的方法，obj.toString(进制数);进制数不传默\n&emsp;&emsp;认为十进制。\n&emsp;&emsp;String(value)：转型函数，value为任何类型，如果value有toString()方法\n&emsp;&emsp;则会执行toString()方法，并返回结果，如果value是null和undefined，则\n&emsp;&emsp;返回\"null\"和\"undefined\"。\n## (7)Object类型\nObject实例具有的属性和方法：\n&emsp;&emsp;constructor：构造函数，保存着用于创建当前对象的函数。\n&emsp;&emsp;hasOwnProperty(propertyName)：检查属性是否在实例中(并不是在实例的原\n&emsp;&emsp;型中)。必须传入字符串。\n&emsp;&emsp;isPrototypeOf(object)：检查传入的对象是否是当前对象的原型。\n&emsp;&emsp;propertyIsEnumerable(propertyName)：检查给定的属性是否能使用for-in\n&emsp;&emsp;语句来进行枚举。必须传入字符串。\n&emsp;&emsp;toLocaleString()：返回对象的字符串表示，字符串与浏览器的地区对应。\n&emsp;&emsp;toString():返回对象的字符串表示。\n&emsp;&emsp;valueOf()：返回对象的字符串、数值或布尔值，通常与toString()的返回值\n&emsp;&emsp;相等。\n# 操作符\n## (1)一元操作符\n递增和递减操作符：++和--。\n一元加和减操作符：+和-，加号放在数值前，没有任何影响，减号常用来表示负数，例如：-1。\n## (2)位操作符\n## (3)布尔操作符\n逻辑非：由！表示，返回一个布尔值。\n逻辑与：由&&表示，有两个操作数，属于短路操作。只要一个数为false，则返回false，\n两个操作数都为true，才返回true。\n逻辑或：由||表示，有两个操作数，也属于短路操作。只要一个数为true，则返回true，\n两个数都为false，才返回false。\n注：我们可以利用逻辑或来为变量赋值，避免变量被赋值为null或undefined，例如：\n`var obj = preObj || backObj;`\n## (4)乘性操作符\n乘法：由*表示，用于计算两个数的乘积。如果乘积超过了数值表示范围，则返回Infinity。\n除法：由/表示，执行第二个操作数除第一个操作数的计算，如果商超过了数值表示范围，\n也返回Infinity。\n## (5)加性操作符\n加法：由+表示，用于加法计算，还可用于字符串拼接和转换字符串。每个加法操作都是独立运行的，举例说明ECMAScript中一个常见的错误：\n        var num1 = 1;\n        var num2 = 2;\n        var str = \"str\" + num1 + num2; // 结果为str12\n        // 正确写法为\n        var str2 = \"str\" + (num1 + num2); // 结果为str3\n减法：由-表示，用于减法操作。\n## (6)关系操作符\n<、>、<=、>=这些是关系操作符，它们会返回一个布尔值，比较规则如下：\n* 两个数都是数值，则数值比较。\n* 两个数都是字符串，比较字符编码。\n* 一个是数值，会将另一个数转换为数值，执行比较。\n* 如果有对象，则会先调用valueOf()方法或toString()方法将对象转换，在再进行比较。\n\n>**注：任何操作数与NaN相比较都返回false。** \n\n## (7)相等操作符\n相等和不相等：由==和!=表示，它们会对操作数先进行强制类型转换，再进行比较。不推荐使用。\n全等和不全等：由===和!==表示，不进行强制类型转换，直接比较，推荐使用。\n## (8)条件操作符\n形如：variable = boolean_expression ? true_value : false_value;\n本质上，variable的值取决于boolean_expression表达式的值，如果为true，则取true_value，反之，则取false_value。\n## (9)赋值操作符\n由=表示，用于把等号右边的值赋值给等号左边的变量。\n## (10)逗号操作符\n使用逗号操作符可以在一条语句中执行多个操作，形如`var num1 = 1, num2 = 2;`\n# 语句\n## (1)if语句\n形如:\n```\n        if(condition){\n            statement\n        }\n```\n## (2)do-while语句\n后检测循环语句，先执行后测试条件，形如：\n```\n        do{\n            statement\n        }while(expression);\n```\n## (3)while语句\n前循环语句，先检测条件再执行，形如：\n```\n        while(expression){\n            statement\n        }\n```\n## (4)for语句\n前循环语句，形如：\n```\n        for(var i = 0; i < 10; i++){\n            statement\n        }\n```\n\n>注:**循环变量i在循环外部也能访问到。** \n\n## (5)for-in语句\n精准迭代语句，可用来枚举对象，形如：\n```\n        for(property in expression){\n            statement\n        }\n```\n## (7)break和continue语句\nbreak是停止循环，continue是立即退出循环，但重新进行。\n## (8)with语句\n将代码的作用域设置到一个特定的对象中，形如：\n```\n        with(expression){\n            statement\n        }\n```\n## (9)switch语句\n在进行多个数比较时，使用switch，switch使用的是全等操作符，并且可以在语句中使用任何数据类型，每个case可以是常量、表达式和变量，形如：\n```\n        switch(expression){\n            case value: statement\n                break;\n            case value: statement\n                break;\n            case value: statement\n                break;\n            default:statement\n        }\n```\n# 函数\n使用事项：要么让函数始终都有返回值，要么永远没有返回值。\n## (1)理解参数\n参数在ECMAScript中是用一个数组来表示的，ECMAScript不介意传递多少参数，也不在乎参数是什么类型，假设有一个函数有两个传递参数，那么在调用时可以传一个、两个或者不传都没事。命名的参数只是提供便利，但不是必须的。\n实际上在函数体内部可以通过arguments对象来访问参数数组，例如：arguments[1]获取第二个参数。\n\n>注：** ECMAScript中所有的参数传递的都是值，不能通过引用传递参数。传递对象时\n，是传递对象中的内存地址。** \n\n## (2)没有重载\nECMAScript函数是不能重载的，后定义的函数会覆盖前面定义的。","source":"_posts/JavaScript高级程序设计读书笔记-第3章.md","raw":"---\ntitle: JavaScript高级程序设计读书笔记-第3章\ndate: 2017-07-31 21:53:19\ncategories: JS高程笔记\ntags:\n     - 笔记\n     - JavaScript\ndescription: JavaScript高级程序设计读书笔记--第3章基本概念\n---\n# 语法\n## (1)区分大小写\nECMAScript中的一切(变量、函数名和操作符)都**区分**大小写。\n## (2)标识符\n标识符：指变量、函数、属性的名字，或是函数的参数。\n标识符的书写规则如下：\n1. 第一个字符必须是字母、下划线_或美元符号。\n2. 其他字符可以是字母、下划线、美元符号或数字。\n\n>**注：标识符推荐驼峰法的命名规则如：newCode，不能把关键字、保留字、true、false、和null作为标识符。** \n\n## (3)注释\n* 单行注释：`//`\n* 块级注释：\n        /*\n        *\n        */\n## (4)严格模式\n启用严格模式:在脚本顶部添加\"use strict\"。它是一个编译指示，告诉支持的JavaScript引擎切换到严格模式。\n## (5)语句\nJavaScript有效语句以一个分号(;)结尾。\n代码块以{}标识。\n注：**建议不要省略分号！**。\n# 关键字和保留字\n* 具有特定用途的关键字：break do instanceof typeof case else new var catch finally return void continue for switch while debugger function this with default if throw delete in try\n* 不能用作标识符的保留字：abstract enum int short boolean export interface static byte extends long super char final native synchronized class float package throws const goto private transient debugger implements protected volatile double import pbulic let yield\n注：**使用关键字做标识符会导致\"Identifier Expected\"错误**。\n# 变量\nECMAScript中的变量是松散类型的，所谓松散类型就是可以用来保存任何类型的数据。\nECMAScript中使用var来声明变量，未经初始化的变量会保存一个特殊的值undefined。\n使用var声明的变量，是定义该变量作用域中的局部变量，也就是说在函数中使用var定义一个变量，在函数退出后，该变量就会销毁。如果不使用var定义变量(不推荐)，将会定义一个全局变量。\n# 数据类型\n## (1)typeof操作符\ntypeof是用来检测给定变量的数据类型的。\n使用typeof操作符返回的字符串有如下几种：\n* \"undefined\"--未定义\n* \"boolean\"--布尔值\n* \"string\"--字符串\n* \"number\"--数值\n* \"object\"--对象或null\n* \"function\"--函数\n例子：\n        var message = \"aaa\";\n        alert(typeof(message));\n        alert(typeof 1);\n## (2)Undefined类型\nUndefined类型只有一个值，就是undefined。使用var声明变量时未对其进行初始化，这个变量的值就是undefined。\n\n>注：**我们在声明变量时应尽量对其进行初始化，这样当我们遇到undefined时，就知道该变量是没有被声明，而不是没有被初始化。** \n\n## (3)Null类型\nNull类型也只有一个值，就是null。逻辑上来说null表示一个空对象指针，所以typeof(null)会返回Object。\n\n>注：**null == undefined，但null与undefined的用途不同，我们在声明对象时，应该把没有明确对象的变量值设为null。** \n\n## (4)Boolean类型\nBoolean类型有两个值：true和false。true不一定等于1，false也不一定等于0。\n运用转型函数Boolean()可以将一个值转换成对应的Boolean值。\n例如:\n        var message = \"hello world\";\n        alert(Boolean(message));\n各种数据类型转换规则一览表：\n<table> <tr> <th>数据类型</th> <th>转换为true的值</th> <th>转换为false的值</th></tr> <tr> <th>Boolean</th> <th>true</th> <th>false</th> </tr> <tr> <th>Number</th> <th>非0数值</th> <th>0和NaN</th> </tr> <tr> <th>String</th> <th>非空字符串</th> <th>\"\"</th> </tr> <tr> <th>Object</th> <th>任何对象</th> <th>null</th> </tr> <tr> <th>Undefined</th> <th> </th> <th>undefined</th> </tr> <table>\n## (5)Number类型\n### 1.浮点数值\n浮点数，即数值中必须有一个小数点，并且小数点后面必须有一位数字。\n对于那些极大或极小的浮点数，可以使用e表示法，如:\n` var floatNum = 3.12e7; //等于31200000`\n\n>注：**保存浮点数的内存空间是保存整数内存空间的2倍。** \n\n### 2.数值范围\nNumber.MIN_VALUE里保存着最小的数值，Number.MAX_VALUE里保存着最大的数值。\n如果某次计算结果超出了JavaScript的数值范围，则这个数值将自动转换为Infinity值。\nInfinity值无法再次进行计算。\n### 3.NaN\nNaN：即非数值(Not aNumber)，NaN与任何数值都不相等，包括NaN本身。\nECMAScript定义了一个叫isNaN()的函数，可以用来检测一个参数是不是“非数值”，例如：\n        alert(isNaN(\"blue\"));//true\n        alert(isNaN(10));//false\n### 4.数值转换\n三个方法：\n&emsp;&emsp;Number(任何类型):可以用于任何类型，\n&emsp;&emsp;parseInt(value,进制数):专门用于转换字符串，进制数可以不写，方法会自\n&emsp;&emsp;己判断。\n&emsp;&emsp;parseFloat(字符串,进制数):专门用于转换字符串，进制数可以不写，方法\n&emsp;&emsp;会自己判断。\n## (6)String类型\n### 1.字符字面量\n字符字面量又叫转义序列，用于表示非打印字符，也就是我们平时说的转义字符。常用字符字面量有如下几个：\n&emsp;&emsp;\\n 换行\n&emsp;&emsp;\\r 回车\n&emsp;&emsp;\\\\\\ 斜杠\n&emsp;&emsp;\\' 单引号\n&emsp;&emsp;\\\" 双引号\n&emsp;&emsp;\\b 退格\n### 2.字符串特点\nECMAScript中的字符串是不可变的，一旦创建就不能改变，要改变字符串的值，就需要把之前的字符串销毁，在重新定义一个字符串。\n注：字符串拼接效率低下的原因就是因为需要销毁原来的字符串，在重新定义字符串。\n### 3.转换为字符串\n字符串转换的方法有两种：\n&emsp;&emsp;toString()：几乎每个值都有的方法，obj.toString(进制数);进制数不传默\n&emsp;&emsp;认为十进制。\n&emsp;&emsp;String(value)：转型函数，value为任何类型，如果value有toString()方法\n&emsp;&emsp;则会执行toString()方法，并返回结果，如果value是null和undefined，则\n&emsp;&emsp;返回\"null\"和\"undefined\"。\n## (7)Object类型\nObject实例具有的属性和方法：\n&emsp;&emsp;constructor：构造函数，保存着用于创建当前对象的函数。\n&emsp;&emsp;hasOwnProperty(propertyName)：检查属性是否在实例中(并不是在实例的原\n&emsp;&emsp;型中)。必须传入字符串。\n&emsp;&emsp;isPrototypeOf(object)：检查传入的对象是否是当前对象的原型。\n&emsp;&emsp;propertyIsEnumerable(propertyName)：检查给定的属性是否能使用for-in\n&emsp;&emsp;语句来进行枚举。必须传入字符串。\n&emsp;&emsp;toLocaleString()：返回对象的字符串表示，字符串与浏览器的地区对应。\n&emsp;&emsp;toString():返回对象的字符串表示。\n&emsp;&emsp;valueOf()：返回对象的字符串、数值或布尔值，通常与toString()的返回值\n&emsp;&emsp;相等。\n# 操作符\n## (1)一元操作符\n递增和递减操作符：++和--。\n一元加和减操作符：+和-，加号放在数值前，没有任何影响，减号常用来表示负数，例如：-1。\n## (2)位操作符\n## (3)布尔操作符\n逻辑非：由！表示，返回一个布尔值。\n逻辑与：由&&表示，有两个操作数，属于短路操作。只要一个数为false，则返回false，\n两个操作数都为true，才返回true。\n逻辑或：由||表示，有两个操作数，也属于短路操作。只要一个数为true，则返回true，\n两个数都为false，才返回false。\n注：我们可以利用逻辑或来为变量赋值，避免变量被赋值为null或undefined，例如：\n`var obj = preObj || backObj;`\n## (4)乘性操作符\n乘法：由*表示，用于计算两个数的乘积。如果乘积超过了数值表示范围，则返回Infinity。\n除法：由/表示，执行第二个操作数除第一个操作数的计算，如果商超过了数值表示范围，\n也返回Infinity。\n## (5)加性操作符\n加法：由+表示，用于加法计算，还可用于字符串拼接和转换字符串。每个加法操作都是独立运行的，举例说明ECMAScript中一个常见的错误：\n        var num1 = 1;\n        var num2 = 2;\n        var str = \"str\" + num1 + num2; // 结果为str12\n        // 正确写法为\n        var str2 = \"str\" + (num1 + num2); // 结果为str3\n减法：由-表示，用于减法操作。\n## (6)关系操作符\n<、>、<=、>=这些是关系操作符，它们会返回一个布尔值，比较规则如下：\n* 两个数都是数值，则数值比较。\n* 两个数都是字符串，比较字符编码。\n* 一个是数值，会将另一个数转换为数值，执行比较。\n* 如果有对象，则会先调用valueOf()方法或toString()方法将对象转换，在再进行比较。\n\n>**注：任何操作数与NaN相比较都返回false。** \n\n## (7)相等操作符\n相等和不相等：由==和!=表示，它们会对操作数先进行强制类型转换，再进行比较。不推荐使用。\n全等和不全等：由===和!==表示，不进行强制类型转换，直接比较，推荐使用。\n## (8)条件操作符\n形如：variable = boolean_expression ? true_value : false_value;\n本质上，variable的值取决于boolean_expression表达式的值，如果为true，则取true_value，反之，则取false_value。\n## (9)赋值操作符\n由=表示，用于把等号右边的值赋值给等号左边的变量。\n## (10)逗号操作符\n使用逗号操作符可以在一条语句中执行多个操作，形如`var num1 = 1, num2 = 2;`\n# 语句\n## (1)if语句\n形如:\n```\n        if(condition){\n            statement\n        }\n```\n## (2)do-while语句\n后检测循环语句，先执行后测试条件，形如：\n```\n        do{\n            statement\n        }while(expression);\n```\n## (3)while语句\n前循环语句，先检测条件再执行，形如：\n```\n        while(expression){\n            statement\n        }\n```\n## (4)for语句\n前循环语句，形如：\n```\n        for(var i = 0; i < 10; i++){\n            statement\n        }\n```\n\n>注:**循环变量i在循环外部也能访问到。** \n\n## (5)for-in语句\n精准迭代语句，可用来枚举对象，形如：\n```\n        for(property in expression){\n            statement\n        }\n```\n## (7)break和continue语句\nbreak是停止循环，continue是立即退出循环，但重新进行。\n## (8)with语句\n将代码的作用域设置到一个特定的对象中，形如：\n```\n        with(expression){\n            statement\n        }\n```\n## (9)switch语句\n在进行多个数比较时，使用switch，switch使用的是全等操作符，并且可以在语句中使用任何数据类型，每个case可以是常量、表达式和变量，形如：\n```\n        switch(expression){\n            case value: statement\n                break;\n            case value: statement\n                break;\n            case value: statement\n                break;\n            default:statement\n        }\n```\n# 函数\n使用事项：要么让函数始终都有返回值，要么永远没有返回值。\n## (1)理解参数\n参数在ECMAScript中是用一个数组来表示的，ECMAScript不介意传递多少参数，也不在乎参数是什么类型，假设有一个函数有两个传递参数，那么在调用时可以传一个、两个或者不传都没事。命名的参数只是提供便利，但不是必须的。\n实际上在函数体内部可以通过arguments对象来访问参数数组，例如：arguments[1]获取第二个参数。\n\n>注：** ECMAScript中所有的参数传递的都是值，不能通过引用传递参数。传递对象时\n，是传递对象中的内存地址。** \n\n## (2)没有重载\nECMAScript函数是不能重载的，后定义的函数会覆盖前面定义的。","slug":"JavaScript高级程序设计读书笔记-第3章","published":1,"updated":"2017-08-22T14:29:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjksf3cwf000sh8efjw462ma6","content":"<h1 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h1><h2 id=\"1-区分大小写\"><a href=\"#1-区分大小写\" class=\"headerlink\" title=\"(1)区分大小写\"></a>(1)区分大小写</h2><p>ECMAScript中的一切(变量、函数名和操作符)都<strong>区分</strong>大小写。</p>\n<h2 id=\"2-标识符\"><a href=\"#2-标识符\" class=\"headerlink\" title=\"(2)标识符\"></a>(2)标识符</h2><p>标识符：指变量、函数、属性的名字，或是函数的参数。<br>标识符的书写规则如下：</p>\n<ol>\n<li>第一个字符必须是字母、下划线_或美元符号。</li>\n<li>其他字符可以是字母、下划线、美元符号或数字。</li>\n</ol>\n<blockquote>\n<p><strong>注：标识符推荐驼峰法的命名规则如：newCode，不能把关键字、保留字、true、false、和null作为标识符。</strong> </p>\n</blockquote>\n<h2 id=\"3-注释\"><a href=\"#3-注释\" class=\"headerlink\" title=\"(3)注释\"></a>(3)注释</h2><ul>\n<li>单行注释：<code>//</code></li>\n<li>块级注释：<pre><code>/*\n*\n*/\n</code></pre><h2 id=\"4-严格模式\"><a href=\"#4-严格模式\" class=\"headerlink\" title=\"(4)严格模式\"></a>(4)严格模式</h2>启用严格模式:在脚本顶部添加”use strict”。它是一个编译指示，告诉支持的JavaScript引擎切换到严格模式。<h2 id=\"5-语句\"><a href=\"#5-语句\" class=\"headerlink\" title=\"(5)语句\"></a>(5)语句</h2>JavaScript有效语句以一个分号(;)结尾。<br>代码块以{}标识。<br>注：<strong>建议不要省略分号！</strong>。<h1 id=\"关键字和保留字\"><a href=\"#关键字和保留字\" class=\"headerlink\" title=\"关键字和保留字\"></a>关键字和保留字</h1></li>\n<li>具有特定用途的关键字：break do instanceof typeof case else new var catch finally return void continue for switch while debugger function this with default if throw delete in try</li>\n<li>不能用作标识符的保留字：abstract enum int short boolean export interface static byte extends long super char final native synchronized class float package throws const goto private transient debugger implements protected volatile double import pbulic let yield<br>注：<strong>使用关键字做标识符会导致”Identifier Expected”错误</strong>。<h1 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h1>ECMAScript中的变量是松散类型的，所谓松散类型就是可以用来保存任何类型的数据。<br>ECMAScript中使用var来声明变量，未经初始化的变量会保存一个特殊的值undefined。<br>使用var声明的变量，是定义该变量作用域中的局部变量，也就是说在函数中使用var定义一个变量，在函数退出后，该变量就会销毁。如果不使用var定义变量(不推荐)，将会定义一个全局变量。<h1 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h1><h2 id=\"1-typeof操作符\"><a href=\"#1-typeof操作符\" class=\"headerlink\" title=\"(1)typeof操作符\"></a>(1)typeof操作符</h2>typeof是用来检测给定变量的数据类型的。<br>使用typeof操作符返回的字符串有如下几种：</li>\n<li>“undefined”–未定义</li>\n<li>“boolean”–布尔值</li>\n<li>“string”–字符串</li>\n<li>“number”–数值</li>\n<li>“object”–对象或null</li>\n<li>“function”–函数<br>例子：<pre><code>var message = &quot;aaa&quot;;\nalert(typeof(message));\nalert(typeof 1);\n</code></pre><h2 id=\"2-Undefined类型\"><a href=\"#2-Undefined类型\" class=\"headerlink\" title=\"(2)Undefined类型\"></a>(2)Undefined类型</h2>Undefined类型只有一个值，就是undefined。使用var声明变量时未对其进行初始化，这个变量的值就是undefined。</li>\n</ul>\n<blockquote>\n<p>注：<strong>我们在声明变量时应尽量对其进行初始化，这样当我们遇到undefined时，就知道该变量是没有被声明，而不是没有被初始化。</strong> </p>\n</blockquote>\n<h2 id=\"3-Null类型\"><a href=\"#3-Null类型\" class=\"headerlink\" title=\"(3)Null类型\"></a>(3)Null类型</h2><p>Null类型也只有一个值，就是null。逻辑上来说null表示一个空对象指针，所以typeof(null)会返回Object。</p>\n<blockquote>\n<p>注：<strong>null == undefined，但null与undefined的用途不同，我们在声明对象时，应该把没有明确对象的变量值设为null。</strong> </p>\n</blockquote>\n<h2 id=\"4-Boolean类型\"><a href=\"#4-Boolean类型\" class=\"headerlink\" title=\"(4)Boolean类型\"></a>(4)Boolean类型</h2><p>Boolean类型有两个值：true和false。true不一定等于1，false也不一定等于0。<br>运用转型函数Boolean()可以将一个值转换成对应的Boolean值。<br>例如:<br>        var message = “hello world”;<br>        alert(Boolean(message));<br>各种数据类型转换规则一览表：</p>\n<p><table> <tr> <th>数据类型</th> <th>转换为true的值</th> <th>转换为false的值</th></tr> <tr> <th>Boolean</th> <th>true</th> <th>false</th> </tr> <tr> <th>Number</th> <th>非0数值</th> <th>0和NaN</th> </tr> <tr> <th>String</th> <th>非空字符串</th> <th>“”</th> </tr> <tr> <th>Object</th> <th>任何对象</th> <th>null</th> </tr> <tr> <th>Undefined</th> <th> </th> <th>undefined</th> </tr> <table></table></table></p>\n<h2 id=\"5-Number类型\"><a href=\"#5-Number类型\" class=\"headerlink\" title=\"(5)Number类型\"></a>(5)Number类型</h2><h3 id=\"1-浮点数值\"><a href=\"#1-浮点数值\" class=\"headerlink\" title=\"1.浮点数值\"></a>1.浮点数值</h3><p>浮点数，即数值中必须有一个小数点，并且小数点后面必须有一位数字。<br>对于那些极大或极小的浮点数，可以使用e表示法，如:<br><code>var floatNum = 3.12e7; //等于31200000</code></p>\n<blockquote>\n<p>注：<strong>保存浮点数的内存空间是保存整数内存空间的2倍。</strong> </p>\n</blockquote>\n<h3 id=\"2-数值范围\"><a href=\"#2-数值范围\" class=\"headerlink\" title=\"2.数值范围\"></a>2.数值范围</h3><p>Number.MIN_VALUE里保存着最小的数值，Number.MAX_VALUE里保存着最大的数值。<br>如果某次计算结果超出了JavaScript的数值范围，则这个数值将自动转换为Infinity值。<br>Infinity值无法再次进行计算。</p>\n<h3 id=\"3-NaN\"><a href=\"#3-NaN\" class=\"headerlink\" title=\"3.NaN\"></a>3.NaN</h3><p>NaN：即非数值(Not aNumber)，NaN与任何数值都不相等，包括NaN本身。<br>ECMAScript定义了一个叫isNaN()的函数，可以用来检测一个参数是不是“非数值”，例如：<br>        alert(isNaN(“blue”));//true<br>        alert(isNaN(10));//false</p>\n<h3 id=\"4-数值转换\"><a href=\"#4-数值转换\" class=\"headerlink\" title=\"4.数值转换\"></a>4.数值转换</h3><p>三个方法：<br>&emsp;&emsp;Number(任何类型):可以用于任何类型，<br>&emsp;&emsp;parseInt(value,进制数):专门用于转换字符串，进制数可以不写，方法会自<br>&emsp;&emsp;己判断。<br>&emsp;&emsp;parseFloat(字符串,进制数):专门用于转换字符串，进制数可以不写，方法<br>&emsp;&emsp;会自己判断。</p>\n<h2 id=\"6-String类型\"><a href=\"#6-String类型\" class=\"headerlink\" title=\"(6)String类型\"></a>(6)String类型</h2><h3 id=\"1-字符字面量\"><a href=\"#1-字符字面量\" class=\"headerlink\" title=\"1.字符字面量\"></a>1.字符字面量</h3><p>字符字面量又叫转义序列，用于表示非打印字符，也就是我们平时说的转义字符。常用字符字面量有如下几个：<br>&emsp;&emsp;\\n 换行<br>&emsp;&emsp;\\r 回车<br>&emsp;&emsp;\\\\ 斜杠<br>&emsp;&emsp;\\’ 单引号<br>&emsp;&emsp;\\” 双引号<br>&emsp;&emsp;\\b 退格</p>\n<h3 id=\"2-字符串特点\"><a href=\"#2-字符串特点\" class=\"headerlink\" title=\"2.字符串特点\"></a>2.字符串特点</h3><p>ECMAScript中的字符串是不可变的，一旦创建就不能改变，要改变字符串的值，就需要把之前的字符串销毁，在重新定义一个字符串。<br>注：字符串拼接效率低下的原因就是因为需要销毁原来的字符串，在重新定义字符串。</p>\n<h3 id=\"3-转换为字符串\"><a href=\"#3-转换为字符串\" class=\"headerlink\" title=\"3.转换为字符串\"></a>3.转换为字符串</h3><p>字符串转换的方法有两种：<br>&emsp;&emsp;toString()：几乎每个值都有的方法，obj.toString(进制数);进制数不传默<br>&emsp;&emsp;认为十进制。<br>&emsp;&emsp;String(value)：转型函数，value为任何类型，如果value有toString()方法<br>&emsp;&emsp;则会执行toString()方法，并返回结果，如果value是null和undefined，则<br>&emsp;&emsp;返回”null”和”undefined”。</p>\n<h2 id=\"7-Object类型\"><a href=\"#7-Object类型\" class=\"headerlink\" title=\"(7)Object类型\"></a>(7)Object类型</h2><p>Object实例具有的属性和方法：<br>&emsp;&emsp;constructor：构造函数，保存着用于创建当前对象的函数。<br>&emsp;&emsp;hasOwnProperty(propertyName)：检查属性是否在实例中(并不是在实例的原<br>&emsp;&emsp;型中)。必须传入字符串。<br>&emsp;&emsp;isPrototypeOf(object)：检查传入的对象是否是当前对象的原型。<br>&emsp;&emsp;propertyIsEnumerable(propertyName)：检查给定的属性是否能使用for-in<br>&emsp;&emsp;语句来进行枚举。必须传入字符串。<br>&emsp;&emsp;toLocaleString()：返回对象的字符串表示，字符串与浏览器的地区对应。<br>&emsp;&emsp;toString():返回对象的字符串表示。<br>&emsp;&emsp;valueOf()：返回对象的字符串、数值或布尔值，通常与toString()的返回值<br>&emsp;&emsp;相等。</p>\n<h1 id=\"操作符\"><a href=\"#操作符\" class=\"headerlink\" title=\"操作符\"></a>操作符</h1><h2 id=\"1-一元操作符\"><a href=\"#1-一元操作符\" class=\"headerlink\" title=\"(1)一元操作符\"></a>(1)一元操作符</h2><p>递增和递减操作符：++和–。<br>一元加和减操作符：+和-，加号放在数值前，没有任何影响，减号常用来表示负数，例如：-1。</p>\n<h2 id=\"2-位操作符\"><a href=\"#2-位操作符\" class=\"headerlink\" title=\"(2)位操作符\"></a>(2)位操作符</h2><h2 id=\"3-布尔操作符\"><a href=\"#3-布尔操作符\" class=\"headerlink\" title=\"(3)布尔操作符\"></a>(3)布尔操作符</h2><p>逻辑非：由！表示，返回一个布尔值。<br>逻辑与：由&amp;&amp;表示，有两个操作数，属于短路操作。只要一个数为false，则返回false，<br>两个操作数都为true，才返回true。<br>逻辑或：由||表示，有两个操作数，也属于短路操作。只要一个数为true，则返回true，<br>两个数都为false，才返回false。<br>注：我们可以利用逻辑或来为变量赋值，避免变量被赋值为null或undefined，例如：<br><code>var obj = preObj || backObj;</code></p>\n<h2 id=\"4-乘性操作符\"><a href=\"#4-乘性操作符\" class=\"headerlink\" title=\"(4)乘性操作符\"></a>(4)乘性操作符</h2><p>乘法：由*表示，用于计算两个数的乘积。如果乘积超过了数值表示范围，则返回Infinity。<br>除法：由/表示，执行第二个操作数除第一个操作数的计算，如果商超过了数值表示范围，<br>也返回Infinity。</p>\n<h2 id=\"5-加性操作符\"><a href=\"#5-加性操作符\" class=\"headerlink\" title=\"(5)加性操作符\"></a>(5)加性操作符</h2><p>加法：由+表示，用于加法计算，还可用于字符串拼接和转换字符串。每个加法操作都是独立运行的，举例说明ECMAScript中一个常见的错误：<br>        var num1 = 1;<br>        var num2 = 2;<br>        var str = “str” + num1 + num2; // 结果为str12<br>        // 正确写法为<br>        var str2 = “str” + (num1 + num2); // 结果为str3<br>减法：由-表示，用于减法操作。</p>\n<h2 id=\"6-关系操作符\"><a href=\"#6-关系操作符\" class=\"headerlink\" title=\"(6)关系操作符\"></a>(6)关系操作符</h2><p>&lt;、&gt;、&lt;=、&gt;=这些是关系操作符，它们会返回一个布尔值，比较规则如下：</p>\n<ul>\n<li>两个数都是数值，则数值比较。</li>\n<li>两个数都是字符串，比较字符编码。</li>\n<li>一个是数值，会将另一个数转换为数值，执行比较。</li>\n<li>如果有对象，则会先调用valueOf()方法或toString()方法将对象转换，在再进行比较。</li>\n</ul>\n<blockquote>\n<p><strong>注：任何操作数与NaN相比较都返回false。</strong> </p>\n</blockquote>\n<h2 id=\"7-相等操作符\"><a href=\"#7-相等操作符\" class=\"headerlink\" title=\"(7)相等操作符\"></a>(7)相等操作符</h2><p>相等和不相等：由==和!=表示，它们会对操作数先进行强制类型转换，再进行比较。不推荐使用。<br>全等和不全等：由===和!==表示，不进行强制类型转换，直接比较，推荐使用。</p>\n<h2 id=\"8-条件操作符\"><a href=\"#8-条件操作符\" class=\"headerlink\" title=\"(8)条件操作符\"></a>(8)条件操作符</h2><p>形如：variable = boolean_expression ? true_value : false_value;<br>本质上，variable的值取决于boolean_expression表达式的值，如果为true，则取true_value，反之，则取false_value。</p>\n<h2 id=\"9-赋值操作符\"><a href=\"#9-赋值操作符\" class=\"headerlink\" title=\"(9)赋值操作符\"></a>(9)赋值操作符</h2><p>由=表示，用于把等号右边的值赋值给等号左边的变量。</p>\n<h2 id=\"10-逗号操作符\"><a href=\"#10-逗号操作符\" class=\"headerlink\" title=\"(10)逗号操作符\"></a>(10)逗号操作符</h2><p>使用逗号操作符可以在一条语句中执行多个操作，形如<code>var num1 = 1, num2 = 2;</code></p>\n<h1 id=\"语句\"><a href=\"#语句\" class=\"headerlink\" title=\"语句\"></a>语句</h1><h2 id=\"1-if语句\"><a href=\"#1-if语句\" class=\"headerlink\" title=\"(1)if语句\"></a>(1)if语句</h2><p>形如:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(condition)&#123;</span><br><span class=\"line\">    statement</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2-do-while语句\"><a href=\"#2-do-while语句\" class=\"headerlink\" title=\"(2)do-while语句\"></a>(2)do-while语句</h2><p>后检测循环语句，先执行后测试条件，形如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">do&#123;</span><br><span class=\"line\">    statement</span><br><span class=\"line\">&#125;while(expression);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-while语句\"><a href=\"#3-while语句\" class=\"headerlink\" title=\"(3)while语句\"></a>(3)while语句</h2><p>前循环语句，先检测条件再执行，形如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while(expression)&#123;</span><br><span class=\"line\">    statement</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4-for语句\"><a href=\"#4-for语句\" class=\"headerlink\" title=\"(4)for语句\"></a>(4)for语句</h2><p>前循环语句，形如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for(var i = 0; i &lt; 10; i++)&#123;</span><br><span class=\"line\">    statement</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注:<strong>循环变量i在循环外部也能访问到。</strong> </p>\n</blockquote>\n<h2 id=\"5-for-in语句\"><a href=\"#5-for-in语句\" class=\"headerlink\" title=\"(5)for-in语句\"></a>(5)for-in语句</h2><p>精准迭代语句，可用来枚举对象，形如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for(property in expression)&#123;</span><br><span class=\"line\">    statement</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"7-break和continue语句\"><a href=\"#7-break和continue语句\" class=\"headerlink\" title=\"(7)break和continue语句\"></a>(7)break和continue语句</h2><p>break是停止循环，continue是立即退出循环，但重新进行。</p>\n<h2 id=\"8-with语句\"><a href=\"#8-with语句\" class=\"headerlink\" title=\"(8)with语句\"></a>(8)with语句</h2><p>将代码的作用域设置到一个特定的对象中，形如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">with(expression)&#123;</span><br><span class=\"line\">    statement</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"9-switch语句\"><a href=\"#9-switch语句\" class=\"headerlink\" title=\"(9)switch语句\"></a>(9)switch语句</h2><p>在进行多个数比较时，使用switch，switch使用的是全等操作符，并且可以在语句中使用任何数据类型，每个case可以是常量、表达式和变量，形如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">switch(expression)&#123;</span><br><span class=\"line\">    case value: statement</span><br><span class=\"line\">        break;</span><br><span class=\"line\">    case value: statement</span><br><span class=\"line\">        break;</span><br><span class=\"line\">    case value: statement</span><br><span class=\"line\">        break;</span><br><span class=\"line\">    default:statement</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h1><p>使用事项：要么让函数始终都有返回值，要么永远没有返回值。</p>\n<h2 id=\"1-理解参数\"><a href=\"#1-理解参数\" class=\"headerlink\" title=\"(1)理解参数\"></a>(1)理解参数</h2><p>参数在ECMAScript中是用一个数组来表示的，ECMAScript不介意传递多少参数，也不在乎参数是什么类型，假设有一个函数有两个传递参数，那么在调用时可以传一个、两个或者不传都没事。命名的参数只是提供便利，但不是必须的。<br>实际上在函数体内部可以通过arguments对象来访问参数数组，例如：arguments[1]获取第二个参数。</p>\n<blockquote>\n<p>注：<strong> ECMAScript中所有的参数传递的都是值，不能通过引用传递参数。传递对象时<br>，是传递对象中的内存地址。</strong> </p>\n</blockquote>\n<h2 id=\"2-没有重载\"><a href=\"#2-没有重载\" class=\"headerlink\" title=\"(2)没有重载\"></a>(2)没有重载</h2><p>ECMAScript函数是不能重载的，后定义的函数会覆盖前面定义的。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h1><h2 id=\"1-区分大小写\"><a href=\"#1-区分大小写\" class=\"headerlink\" title=\"(1)区分大小写\"></a>(1)区分大小写</h2><p>ECMAScript中的一切(变量、函数名和操作符)都<strong>区分</strong>大小写。</p>\n<h2 id=\"2-标识符\"><a href=\"#2-标识符\" class=\"headerlink\" title=\"(2)标识符\"></a>(2)标识符</h2><p>标识符：指变量、函数、属性的名字，或是函数的参数。<br>标识符的书写规则如下：</p>\n<ol>\n<li>第一个字符必须是字母、下划线_或美元符号。</li>\n<li>其他字符可以是字母、下划线、美元符号或数字。</li>\n</ol>\n<blockquote>\n<p><strong>注：标识符推荐驼峰法的命名规则如：newCode，不能把关键字、保留字、true、false、和null作为标识符。</strong> </p>\n</blockquote>\n<h2 id=\"3-注释\"><a href=\"#3-注释\" class=\"headerlink\" title=\"(3)注释\"></a>(3)注释</h2><ul>\n<li>单行注释：<code>//</code></li>\n<li>块级注释：<pre><code>/*\n*\n*/\n</code></pre><h2 id=\"4-严格模式\"><a href=\"#4-严格模式\" class=\"headerlink\" title=\"(4)严格模式\"></a>(4)严格模式</h2>启用严格模式:在脚本顶部添加”use strict”。它是一个编译指示，告诉支持的JavaScript引擎切换到严格模式。<h2 id=\"5-语句\"><a href=\"#5-语句\" class=\"headerlink\" title=\"(5)语句\"></a>(5)语句</h2>JavaScript有效语句以一个分号(;)结尾。<br>代码块以{}标识。<br>注：<strong>建议不要省略分号！</strong>。<h1 id=\"关键字和保留字\"><a href=\"#关键字和保留字\" class=\"headerlink\" title=\"关键字和保留字\"></a>关键字和保留字</h1></li>\n<li>具有特定用途的关键字：break do instanceof typeof case else new var catch finally return void continue for switch while debugger function this with default if throw delete in try</li>\n<li>不能用作标识符的保留字：abstract enum int short boolean export interface static byte extends long super char final native synchronized class float package throws const goto private transient debugger implements protected volatile double import pbulic let yield<br>注：<strong>使用关键字做标识符会导致”Identifier Expected”错误</strong>。<h1 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h1>ECMAScript中的变量是松散类型的，所谓松散类型就是可以用来保存任何类型的数据。<br>ECMAScript中使用var来声明变量，未经初始化的变量会保存一个特殊的值undefined。<br>使用var声明的变量，是定义该变量作用域中的局部变量，也就是说在函数中使用var定义一个变量，在函数退出后，该变量就会销毁。如果不使用var定义变量(不推荐)，将会定义一个全局变量。<h1 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h1><h2 id=\"1-typeof操作符\"><a href=\"#1-typeof操作符\" class=\"headerlink\" title=\"(1)typeof操作符\"></a>(1)typeof操作符</h2>typeof是用来检测给定变量的数据类型的。<br>使用typeof操作符返回的字符串有如下几种：</li>\n<li>“undefined”–未定义</li>\n<li>“boolean”–布尔值</li>\n<li>“string”–字符串</li>\n<li>“number”–数值</li>\n<li>“object”–对象或null</li>\n<li>“function”–函数<br>例子：<pre><code>var message = &quot;aaa&quot;;\nalert(typeof(message));\nalert(typeof 1);\n</code></pre><h2 id=\"2-Undefined类型\"><a href=\"#2-Undefined类型\" class=\"headerlink\" title=\"(2)Undefined类型\"></a>(2)Undefined类型</h2>Undefined类型只有一个值，就是undefined。使用var声明变量时未对其进行初始化，这个变量的值就是undefined。</li>\n</ul>\n<blockquote>\n<p>注：<strong>我们在声明变量时应尽量对其进行初始化，这样当我们遇到undefined时，就知道该变量是没有被声明，而不是没有被初始化。</strong> </p>\n</blockquote>\n<h2 id=\"3-Null类型\"><a href=\"#3-Null类型\" class=\"headerlink\" title=\"(3)Null类型\"></a>(3)Null类型</h2><p>Null类型也只有一个值，就是null。逻辑上来说null表示一个空对象指针，所以typeof(null)会返回Object。</p>\n<blockquote>\n<p>注：<strong>null == undefined，但null与undefined的用途不同，我们在声明对象时，应该把没有明确对象的变量值设为null。</strong> </p>\n</blockquote>\n<h2 id=\"4-Boolean类型\"><a href=\"#4-Boolean类型\" class=\"headerlink\" title=\"(4)Boolean类型\"></a>(4)Boolean类型</h2><p>Boolean类型有两个值：true和false。true不一定等于1，false也不一定等于0。<br>运用转型函数Boolean()可以将一个值转换成对应的Boolean值。<br>例如:<br>        var message = “hello world”;<br>        alert(Boolean(message));<br>各种数据类型转换规则一览表：</p>\n<p><table> <tr> <th>数据类型</th> <th>转换为true的值</th> <th>转换为false的值</th></tr> <tr> <th>Boolean</th> <th>true</th> <th>false</th> </tr> <tr> <th>Number</th> <th>非0数值</th> <th>0和NaN</th> </tr> <tr> <th>String</th> <th>非空字符串</th> <th>“”</th> </tr> <tr> <th>Object</th> <th>任何对象</th> <th>null</th> </tr> <tr> <th>Undefined</th> <th> </th> <th>undefined</th> </tr> <table></table></table></p>\n<h2 id=\"5-Number类型\"><a href=\"#5-Number类型\" class=\"headerlink\" title=\"(5)Number类型\"></a>(5)Number类型</h2><h3 id=\"1-浮点数值\"><a href=\"#1-浮点数值\" class=\"headerlink\" title=\"1.浮点数值\"></a>1.浮点数值</h3><p>浮点数，即数值中必须有一个小数点，并且小数点后面必须有一位数字。<br>对于那些极大或极小的浮点数，可以使用e表示法，如:<br><code>var floatNum = 3.12e7; //等于31200000</code></p>\n<blockquote>\n<p>注：<strong>保存浮点数的内存空间是保存整数内存空间的2倍。</strong> </p>\n</blockquote>\n<h3 id=\"2-数值范围\"><a href=\"#2-数值范围\" class=\"headerlink\" title=\"2.数值范围\"></a>2.数值范围</h3><p>Number.MIN_VALUE里保存着最小的数值，Number.MAX_VALUE里保存着最大的数值。<br>如果某次计算结果超出了JavaScript的数值范围，则这个数值将自动转换为Infinity值。<br>Infinity值无法再次进行计算。</p>\n<h3 id=\"3-NaN\"><a href=\"#3-NaN\" class=\"headerlink\" title=\"3.NaN\"></a>3.NaN</h3><p>NaN：即非数值(Not aNumber)，NaN与任何数值都不相等，包括NaN本身。<br>ECMAScript定义了一个叫isNaN()的函数，可以用来检测一个参数是不是“非数值”，例如：<br>        alert(isNaN(“blue”));//true<br>        alert(isNaN(10));//false</p>\n<h3 id=\"4-数值转换\"><a href=\"#4-数值转换\" class=\"headerlink\" title=\"4.数值转换\"></a>4.数值转换</h3><p>三个方法：<br>&emsp;&emsp;Number(任何类型):可以用于任何类型，<br>&emsp;&emsp;parseInt(value,进制数):专门用于转换字符串，进制数可以不写，方法会自<br>&emsp;&emsp;己判断。<br>&emsp;&emsp;parseFloat(字符串,进制数):专门用于转换字符串，进制数可以不写，方法<br>&emsp;&emsp;会自己判断。</p>\n<h2 id=\"6-String类型\"><a href=\"#6-String类型\" class=\"headerlink\" title=\"(6)String类型\"></a>(6)String类型</h2><h3 id=\"1-字符字面量\"><a href=\"#1-字符字面量\" class=\"headerlink\" title=\"1.字符字面量\"></a>1.字符字面量</h3><p>字符字面量又叫转义序列，用于表示非打印字符，也就是我们平时说的转义字符。常用字符字面量有如下几个：<br>&emsp;&emsp;\\n 换行<br>&emsp;&emsp;\\r 回车<br>&emsp;&emsp;\\\\ 斜杠<br>&emsp;&emsp;\\’ 单引号<br>&emsp;&emsp;\\” 双引号<br>&emsp;&emsp;\\b 退格</p>\n<h3 id=\"2-字符串特点\"><a href=\"#2-字符串特点\" class=\"headerlink\" title=\"2.字符串特点\"></a>2.字符串特点</h3><p>ECMAScript中的字符串是不可变的，一旦创建就不能改变，要改变字符串的值，就需要把之前的字符串销毁，在重新定义一个字符串。<br>注：字符串拼接效率低下的原因就是因为需要销毁原来的字符串，在重新定义字符串。</p>\n<h3 id=\"3-转换为字符串\"><a href=\"#3-转换为字符串\" class=\"headerlink\" title=\"3.转换为字符串\"></a>3.转换为字符串</h3><p>字符串转换的方法有两种：<br>&emsp;&emsp;toString()：几乎每个值都有的方法，obj.toString(进制数);进制数不传默<br>&emsp;&emsp;认为十进制。<br>&emsp;&emsp;String(value)：转型函数，value为任何类型，如果value有toString()方法<br>&emsp;&emsp;则会执行toString()方法，并返回结果，如果value是null和undefined，则<br>&emsp;&emsp;返回”null”和”undefined”。</p>\n<h2 id=\"7-Object类型\"><a href=\"#7-Object类型\" class=\"headerlink\" title=\"(7)Object类型\"></a>(7)Object类型</h2><p>Object实例具有的属性和方法：<br>&emsp;&emsp;constructor：构造函数，保存着用于创建当前对象的函数。<br>&emsp;&emsp;hasOwnProperty(propertyName)：检查属性是否在实例中(并不是在实例的原<br>&emsp;&emsp;型中)。必须传入字符串。<br>&emsp;&emsp;isPrototypeOf(object)：检查传入的对象是否是当前对象的原型。<br>&emsp;&emsp;propertyIsEnumerable(propertyName)：检查给定的属性是否能使用for-in<br>&emsp;&emsp;语句来进行枚举。必须传入字符串。<br>&emsp;&emsp;toLocaleString()：返回对象的字符串表示，字符串与浏览器的地区对应。<br>&emsp;&emsp;toString():返回对象的字符串表示。<br>&emsp;&emsp;valueOf()：返回对象的字符串、数值或布尔值，通常与toString()的返回值<br>&emsp;&emsp;相等。</p>\n<h1 id=\"操作符\"><a href=\"#操作符\" class=\"headerlink\" title=\"操作符\"></a>操作符</h1><h2 id=\"1-一元操作符\"><a href=\"#1-一元操作符\" class=\"headerlink\" title=\"(1)一元操作符\"></a>(1)一元操作符</h2><p>递增和递减操作符：++和–。<br>一元加和减操作符：+和-，加号放在数值前，没有任何影响，减号常用来表示负数，例如：-1。</p>\n<h2 id=\"2-位操作符\"><a href=\"#2-位操作符\" class=\"headerlink\" title=\"(2)位操作符\"></a>(2)位操作符</h2><h2 id=\"3-布尔操作符\"><a href=\"#3-布尔操作符\" class=\"headerlink\" title=\"(3)布尔操作符\"></a>(3)布尔操作符</h2><p>逻辑非：由！表示，返回一个布尔值。<br>逻辑与：由&amp;&amp;表示，有两个操作数，属于短路操作。只要一个数为false，则返回false，<br>两个操作数都为true，才返回true。<br>逻辑或：由||表示，有两个操作数，也属于短路操作。只要一个数为true，则返回true，<br>两个数都为false，才返回false。<br>注：我们可以利用逻辑或来为变量赋值，避免变量被赋值为null或undefined，例如：<br><code>var obj = preObj || backObj;</code></p>\n<h2 id=\"4-乘性操作符\"><a href=\"#4-乘性操作符\" class=\"headerlink\" title=\"(4)乘性操作符\"></a>(4)乘性操作符</h2><p>乘法：由*表示，用于计算两个数的乘积。如果乘积超过了数值表示范围，则返回Infinity。<br>除法：由/表示，执行第二个操作数除第一个操作数的计算，如果商超过了数值表示范围，<br>也返回Infinity。</p>\n<h2 id=\"5-加性操作符\"><a href=\"#5-加性操作符\" class=\"headerlink\" title=\"(5)加性操作符\"></a>(5)加性操作符</h2><p>加法：由+表示，用于加法计算，还可用于字符串拼接和转换字符串。每个加法操作都是独立运行的，举例说明ECMAScript中一个常见的错误：<br>        var num1 = 1;<br>        var num2 = 2;<br>        var str = “str” + num1 + num2; // 结果为str12<br>        // 正确写法为<br>        var str2 = “str” + (num1 + num2); // 结果为str3<br>减法：由-表示，用于减法操作。</p>\n<h2 id=\"6-关系操作符\"><a href=\"#6-关系操作符\" class=\"headerlink\" title=\"(6)关系操作符\"></a>(6)关系操作符</h2><p>&lt;、&gt;、&lt;=、&gt;=这些是关系操作符，它们会返回一个布尔值，比较规则如下：</p>\n<ul>\n<li>两个数都是数值，则数值比较。</li>\n<li>两个数都是字符串，比较字符编码。</li>\n<li>一个是数值，会将另一个数转换为数值，执行比较。</li>\n<li>如果有对象，则会先调用valueOf()方法或toString()方法将对象转换，在再进行比较。</li>\n</ul>\n<blockquote>\n<p><strong>注：任何操作数与NaN相比较都返回false。</strong> </p>\n</blockquote>\n<h2 id=\"7-相等操作符\"><a href=\"#7-相等操作符\" class=\"headerlink\" title=\"(7)相等操作符\"></a>(7)相等操作符</h2><p>相等和不相等：由==和!=表示，它们会对操作数先进行强制类型转换，再进行比较。不推荐使用。<br>全等和不全等：由===和!==表示，不进行强制类型转换，直接比较，推荐使用。</p>\n<h2 id=\"8-条件操作符\"><a href=\"#8-条件操作符\" class=\"headerlink\" title=\"(8)条件操作符\"></a>(8)条件操作符</h2><p>形如：variable = boolean_expression ? true_value : false_value;<br>本质上，variable的值取决于boolean_expression表达式的值，如果为true，则取true_value，反之，则取false_value。</p>\n<h2 id=\"9-赋值操作符\"><a href=\"#9-赋值操作符\" class=\"headerlink\" title=\"(9)赋值操作符\"></a>(9)赋值操作符</h2><p>由=表示，用于把等号右边的值赋值给等号左边的变量。</p>\n<h2 id=\"10-逗号操作符\"><a href=\"#10-逗号操作符\" class=\"headerlink\" title=\"(10)逗号操作符\"></a>(10)逗号操作符</h2><p>使用逗号操作符可以在一条语句中执行多个操作，形如<code>var num1 = 1, num2 = 2;</code></p>\n<h1 id=\"语句\"><a href=\"#语句\" class=\"headerlink\" title=\"语句\"></a>语句</h1><h2 id=\"1-if语句\"><a href=\"#1-if语句\" class=\"headerlink\" title=\"(1)if语句\"></a>(1)if语句</h2><p>形如:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(condition)&#123;</span><br><span class=\"line\">    statement</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2-do-while语句\"><a href=\"#2-do-while语句\" class=\"headerlink\" title=\"(2)do-while语句\"></a>(2)do-while语句</h2><p>后检测循环语句，先执行后测试条件，形如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">do&#123;</span><br><span class=\"line\">    statement</span><br><span class=\"line\">&#125;while(expression);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-while语句\"><a href=\"#3-while语句\" class=\"headerlink\" title=\"(3)while语句\"></a>(3)while语句</h2><p>前循环语句，先检测条件再执行，形如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while(expression)&#123;</span><br><span class=\"line\">    statement</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4-for语句\"><a href=\"#4-for语句\" class=\"headerlink\" title=\"(4)for语句\"></a>(4)for语句</h2><p>前循环语句，形如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for(var i = 0; i &lt; 10; i++)&#123;</span><br><span class=\"line\">    statement</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注:<strong>循环变量i在循环外部也能访问到。</strong> </p>\n</blockquote>\n<h2 id=\"5-for-in语句\"><a href=\"#5-for-in语句\" class=\"headerlink\" title=\"(5)for-in语句\"></a>(5)for-in语句</h2><p>精准迭代语句，可用来枚举对象，形如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for(property in expression)&#123;</span><br><span class=\"line\">    statement</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"7-break和continue语句\"><a href=\"#7-break和continue语句\" class=\"headerlink\" title=\"(7)break和continue语句\"></a>(7)break和continue语句</h2><p>break是停止循环，continue是立即退出循环，但重新进行。</p>\n<h2 id=\"8-with语句\"><a href=\"#8-with语句\" class=\"headerlink\" title=\"(8)with语句\"></a>(8)with语句</h2><p>将代码的作用域设置到一个特定的对象中，形如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">with(expression)&#123;</span><br><span class=\"line\">    statement</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"9-switch语句\"><a href=\"#9-switch语句\" class=\"headerlink\" title=\"(9)switch语句\"></a>(9)switch语句</h2><p>在进行多个数比较时，使用switch，switch使用的是全等操作符，并且可以在语句中使用任何数据类型，每个case可以是常量、表达式和变量，形如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">switch(expression)&#123;</span><br><span class=\"line\">    case value: statement</span><br><span class=\"line\">        break;</span><br><span class=\"line\">    case value: statement</span><br><span class=\"line\">        break;</span><br><span class=\"line\">    case value: statement</span><br><span class=\"line\">        break;</span><br><span class=\"line\">    default:statement</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h1><p>使用事项：要么让函数始终都有返回值，要么永远没有返回值。</p>\n<h2 id=\"1-理解参数\"><a href=\"#1-理解参数\" class=\"headerlink\" title=\"(1)理解参数\"></a>(1)理解参数</h2><p>参数在ECMAScript中是用一个数组来表示的，ECMAScript不介意传递多少参数，也不在乎参数是什么类型，假设有一个函数有两个传递参数，那么在调用时可以传一个、两个或者不传都没事。命名的参数只是提供便利，但不是必须的。<br>实际上在函数体内部可以通过arguments对象来访问参数数组，例如：arguments[1]获取第二个参数。</p>\n<blockquote>\n<p>注：<strong> ECMAScript中所有的参数传递的都是值，不能通过引用传递参数。传递对象时<br>，是传递对象中的内存地址。</strong> </p>\n</blockquote>\n<h2 id=\"2-没有重载\"><a href=\"#2-没有重载\" class=\"headerlink\" title=\"(2)没有重载\"></a>(2)没有重载</h2><p>ECMAScript函数是不能重载的，后定义的函数会覆盖前面定义的。</p>\n"},{"title":"JavaScript高级程序设计读书笔记-第4章","date":"2017-08-21T15:06:14.000Z","description":"JavaScript高级程序设计读书笔记--第4章变量、作用域和内存问题","_content":"# 基本类型和引用类型的值\nECMAScript规定了5种基本类型：Undefined、Null、Boolean、Number和String。\n\n>注：**String在ECMAScript中不是对象。** \n\n## 1、动态的属性\n对于引用类型的值，我们可以为其添加属性和方法，也可以动态的改变和删除其属性和方法，例如：\n```\nvar person = new Object();\nperson.name = \"tom\"; // 动态添加属性\ndelete person.name; // 动态删除属性\n```\n\n>注：只能作用于引用类型。 \n\n## 2、复制变量值\n基本类型复制：复制基本类型会在被复制成功的变量上创建新值。两个变量可以参与任何\n操作而不受影响。\n引用类型复制：复制引用类型是创建一个指针，指向被复制的对象，两个变量操作同一个对象。\n## 3、传递参数\nECMAScript中所有函数的参数都是按值传递的，基本类型值传递如同基本类型变量复制一样，引用类型传递如同引用类型变量复制一样(传递的是地址)。\n可以把基本类型传递的参数想象成局部变量。\n>注：**如果传入的参数变量是引用类型，则对该参数的操作会影响函数外部的变量**。 \n\n## 4、检测类型\ntypeof：检测基本类型，可以确定一个变量是字符串、数值、布尔值还是undefined，检测函数时会返回\"function\"，但如果变量是null和对象，则会返回\"object\"。\ninstanceof：检测引用类型，返回值是true和false，检测基本类型始终返回false，具体使用如下所示：\n```\nalert(person instanceof Object); // 是Object吗\nalert(person instanceof Array); // 是数组吗\nalert(person instanceof RegExp); // 是正则吗\n```\n# 执行环境及作用域\n全局执行环境是最外围的一个执行环境，根据ECMAScript实现所在的宿主环境不同，其执行环境对象也不一样，在Web浏览器中，全局执行环境为window对象。\n因此，所有的全局变量和函数都是作为window对象的属性和方法创建的。每个函数也有自己的执行环境，当函数执行时，函数的环境就会被推入一个环境栈中，再函数执行完毕，栈将其环境弹出。\n当代码在一个环境中执行时，会创建变量对象的作用域链，其作用时保证所有函数和变量的有序访问。\n**每个环境都可以向上搜索作用域链，所以内部环境可以通过作用域链访问所有的外部环境，外部环境不能访问内部环境的任何变量和函数。**\n## 1、延长作用域链\ntry-catch语句的catch块\n## 2、没有块级作用域\nJavaScript没有块级作用域，在if或for中声明的变量会添加到当前的执行环境中。\n在函数中没有使用var声明变量，该变量就会添加到全局环境中(一定要先声明变量)。\n标识符的搜索顺序：先从当前的执行环境中寻找，如果没有再向上搜索作用域链，一直到找到该标识符或到了全局环境。\n# 垃圾收集\n## 1、标记清除\n最常用的垃圾收集方式。垃圾收集器在运行的时候会给存储在内存中的变量都加上标记，然后，去掉环境中的变量以及被环境中变量所引用的的变量的标记。而在此之后再被加上标记的变量被视为准备删除的变量。\n## 2、引用计数\n不太常见的垃圾收集策略。\n>注：会导致循环引用 \n\n## 3、性能问题\n垃圾收集器是周期性运行的，在IE中可以调用window.CollectGarbage()来立即执行\n垃圾收集。在Opera7及更高版本中调用window.opera.collect()也会启动垃圾收集。\n>注：不建议手动触发垃圾收集过程。 \n\n## 4、管理内存\n确保占用最少的内存可以让页面获得更好的性能，所以一旦有数据不再有用，最好将其设置为null来释放其引用。\n这一做法适用于大多数全局变量和全局对象的属性，不过解除一个值的引用并不意味着自动回收该值所在的内存，而是让其脱离执行环境，方便垃圾收集器运行时将其回收。\n","source":"_posts/JavaScript高级程序设计读书笔记-第4章.md","raw":"---\ntitle: JavaScript高级程序设计读书笔记-第4章\ndate: 2017-08-21 23:06:14\ncategories: JS高程笔记\ntags:\n     - 笔记\n     - JavaScript\ndescription: JavaScript高级程序设计读书笔记--第4章变量、作用域和内存问题\n---\n# 基本类型和引用类型的值\nECMAScript规定了5种基本类型：Undefined、Null、Boolean、Number和String。\n\n>注：**String在ECMAScript中不是对象。** \n\n## 1、动态的属性\n对于引用类型的值，我们可以为其添加属性和方法，也可以动态的改变和删除其属性和方法，例如：\n```\nvar person = new Object();\nperson.name = \"tom\"; // 动态添加属性\ndelete person.name; // 动态删除属性\n```\n\n>注：只能作用于引用类型。 \n\n## 2、复制变量值\n基本类型复制：复制基本类型会在被复制成功的变量上创建新值。两个变量可以参与任何\n操作而不受影响。\n引用类型复制：复制引用类型是创建一个指针，指向被复制的对象，两个变量操作同一个对象。\n## 3、传递参数\nECMAScript中所有函数的参数都是按值传递的，基本类型值传递如同基本类型变量复制一样，引用类型传递如同引用类型变量复制一样(传递的是地址)。\n可以把基本类型传递的参数想象成局部变量。\n>注：**如果传入的参数变量是引用类型，则对该参数的操作会影响函数外部的变量**。 \n\n## 4、检测类型\ntypeof：检测基本类型，可以确定一个变量是字符串、数值、布尔值还是undefined，检测函数时会返回\"function\"，但如果变量是null和对象，则会返回\"object\"。\ninstanceof：检测引用类型，返回值是true和false，检测基本类型始终返回false，具体使用如下所示：\n```\nalert(person instanceof Object); // 是Object吗\nalert(person instanceof Array); // 是数组吗\nalert(person instanceof RegExp); // 是正则吗\n```\n# 执行环境及作用域\n全局执行环境是最外围的一个执行环境，根据ECMAScript实现所在的宿主环境不同，其执行环境对象也不一样，在Web浏览器中，全局执行环境为window对象。\n因此，所有的全局变量和函数都是作为window对象的属性和方法创建的。每个函数也有自己的执行环境，当函数执行时，函数的环境就会被推入一个环境栈中，再函数执行完毕，栈将其环境弹出。\n当代码在一个环境中执行时，会创建变量对象的作用域链，其作用时保证所有函数和变量的有序访问。\n**每个环境都可以向上搜索作用域链，所以内部环境可以通过作用域链访问所有的外部环境，外部环境不能访问内部环境的任何变量和函数。**\n## 1、延长作用域链\ntry-catch语句的catch块\n## 2、没有块级作用域\nJavaScript没有块级作用域，在if或for中声明的变量会添加到当前的执行环境中。\n在函数中没有使用var声明变量，该变量就会添加到全局环境中(一定要先声明变量)。\n标识符的搜索顺序：先从当前的执行环境中寻找，如果没有再向上搜索作用域链，一直到找到该标识符或到了全局环境。\n# 垃圾收集\n## 1、标记清除\n最常用的垃圾收集方式。垃圾收集器在运行的时候会给存储在内存中的变量都加上标记，然后，去掉环境中的变量以及被环境中变量所引用的的变量的标记。而在此之后再被加上标记的变量被视为准备删除的变量。\n## 2、引用计数\n不太常见的垃圾收集策略。\n>注：会导致循环引用 \n\n## 3、性能问题\n垃圾收集器是周期性运行的，在IE中可以调用window.CollectGarbage()来立即执行\n垃圾收集。在Opera7及更高版本中调用window.opera.collect()也会启动垃圾收集。\n>注：不建议手动触发垃圾收集过程。 \n\n## 4、管理内存\n确保占用最少的内存可以让页面获得更好的性能，所以一旦有数据不再有用，最好将其设置为null来释放其引用。\n这一做法适用于大多数全局变量和全局对象的属性，不过解除一个值的引用并不意味着自动回收该值所在的内存，而是让其脱离执行环境，方便垃圾收集器运行时将其回收。\n","slug":"JavaScript高级程序设计读书笔记-第4章","published":1,"updated":"2017-08-31T15:21:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjksf3cwh000wh8efbtadffsu","content":"<h1 id=\"基本类型和引用类型的值\"><a href=\"#基本类型和引用类型的值\" class=\"headerlink\" title=\"基本类型和引用类型的值\"></a>基本类型和引用类型的值</h1><p>ECMAScript规定了5种基本类型：Undefined、Null、Boolean、Number和String。</p>\n<blockquote>\n<p>注：<strong>String在ECMAScript中不是对象。</strong> </p>\n</blockquote>\n<h2 id=\"1、动态的属性\"><a href=\"#1、动态的属性\" class=\"headerlink\" title=\"1、动态的属性\"></a>1、动态的属性</h2><p>对于引用类型的值，我们可以为其添加属性和方法，也可以动态的改变和删除其属性和方法，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var person = new Object();</span><br><span class=\"line\">person.name = &quot;tom&quot;; // 动态添加属性</span><br><span class=\"line\">delete person.name; // 动态删除属性</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注：只能作用于引用类型。 </p>\n</blockquote>\n<h2 id=\"2、复制变量值\"><a href=\"#2、复制变量值\" class=\"headerlink\" title=\"2、复制变量值\"></a>2、复制变量值</h2><p>基本类型复制：复制基本类型会在被复制成功的变量上创建新值。两个变量可以参与任何<br>操作而不受影响。<br>引用类型复制：复制引用类型是创建一个指针，指向被复制的对象，两个变量操作同一个对象。</p>\n<h2 id=\"3、传递参数\"><a href=\"#3、传递参数\" class=\"headerlink\" title=\"3、传递参数\"></a>3、传递参数</h2><p>ECMAScript中所有函数的参数都是按值传递的，基本类型值传递如同基本类型变量复制一样，引用类型传递如同引用类型变量复制一样(传递的是地址)。<br>可以把基本类型传递的参数想象成局部变量。</p>\n<blockquote>\n<p>注：<strong>如果传入的参数变量是引用类型，则对该参数的操作会影响函数外部的变量</strong>。 </p>\n</blockquote>\n<h2 id=\"4、检测类型\"><a href=\"#4、检测类型\" class=\"headerlink\" title=\"4、检测类型\"></a>4、检测类型</h2><p>typeof：检测基本类型，可以确定一个变量是字符串、数值、布尔值还是undefined，检测函数时会返回”function”，但如果变量是null和对象，则会返回”object”。<br>instanceof：检测引用类型，返回值是true和false，检测基本类型始终返回false，具体使用如下所示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(person instanceof Object); // 是Object吗</span><br><span class=\"line\">alert(person instanceof Array); // 是数组吗</span><br><span class=\"line\">alert(person instanceof RegExp); // 是正则吗</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"执行环境及作用域\"><a href=\"#执行环境及作用域\" class=\"headerlink\" title=\"执行环境及作用域\"></a>执行环境及作用域</h1><p>全局执行环境是最外围的一个执行环境，根据ECMAScript实现所在的宿主环境不同，其执行环境对象也不一样，在Web浏览器中，全局执行环境为window对象。<br>因此，所有的全局变量和函数都是作为window对象的属性和方法创建的。每个函数也有自己的执行环境，当函数执行时，函数的环境就会被推入一个环境栈中，再函数执行完毕，栈将其环境弹出。<br>当代码在一个环境中执行时，会创建变量对象的作用域链，其作用时保证所有函数和变量的有序访问。<br><strong>每个环境都可以向上搜索作用域链，所以内部环境可以通过作用域链访问所有的外部环境，外部环境不能访问内部环境的任何变量和函数。</strong></p>\n<h2 id=\"1、延长作用域链\"><a href=\"#1、延长作用域链\" class=\"headerlink\" title=\"1、延长作用域链\"></a>1、延长作用域链</h2><p>try-catch语句的catch块</p>\n<h2 id=\"2、没有块级作用域\"><a href=\"#2、没有块级作用域\" class=\"headerlink\" title=\"2、没有块级作用域\"></a>2、没有块级作用域</h2><p>JavaScript没有块级作用域，在if或for中声明的变量会添加到当前的执行环境中。<br>在函数中没有使用var声明变量，该变量就会添加到全局环境中(一定要先声明变量)。<br>标识符的搜索顺序：先从当前的执行环境中寻找，如果没有再向上搜索作用域链，一直到找到该标识符或到了全局环境。</p>\n<h1 id=\"垃圾收集\"><a href=\"#垃圾收集\" class=\"headerlink\" title=\"垃圾收集\"></a>垃圾收集</h1><h2 id=\"1、标记清除\"><a href=\"#1、标记清除\" class=\"headerlink\" title=\"1、标记清除\"></a>1、标记清除</h2><p>最常用的垃圾收集方式。垃圾收集器在运行的时候会给存储在内存中的变量都加上标记，然后，去掉环境中的变量以及被环境中变量所引用的的变量的标记。而在此之后再被加上标记的变量被视为准备删除的变量。</p>\n<h2 id=\"2、引用计数\"><a href=\"#2、引用计数\" class=\"headerlink\" title=\"2、引用计数\"></a>2、引用计数</h2><p>不太常见的垃圾收集策略。</p>\n<blockquote>\n<p>注：会导致循环引用 </p>\n</blockquote>\n<h2 id=\"3、性能问题\"><a href=\"#3、性能问题\" class=\"headerlink\" title=\"3、性能问题\"></a>3、性能问题</h2><p>垃圾收集器是周期性运行的，在IE中可以调用window.CollectGarbage()来立即执行<br>垃圾收集。在Opera7及更高版本中调用window.opera.collect()也会启动垃圾收集。</p>\n<blockquote>\n<p>注：不建议手动触发垃圾收集过程。 </p>\n</blockquote>\n<h2 id=\"4、管理内存\"><a href=\"#4、管理内存\" class=\"headerlink\" title=\"4、管理内存\"></a>4、管理内存</h2><p>确保占用最少的内存可以让页面获得更好的性能，所以一旦有数据不再有用，最好将其设置为null来释放其引用。<br>这一做法适用于大多数全局变量和全局对象的属性，不过解除一个值的引用并不意味着自动回收该值所在的内存，而是让其脱离执行环境，方便垃圾收集器运行时将其回收。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"基本类型和引用类型的值\"><a href=\"#基本类型和引用类型的值\" class=\"headerlink\" title=\"基本类型和引用类型的值\"></a>基本类型和引用类型的值</h1><p>ECMAScript规定了5种基本类型：Undefined、Null、Boolean、Number和String。</p>\n<blockquote>\n<p>注：<strong>String在ECMAScript中不是对象。</strong> </p>\n</blockquote>\n<h2 id=\"1、动态的属性\"><a href=\"#1、动态的属性\" class=\"headerlink\" title=\"1、动态的属性\"></a>1、动态的属性</h2><p>对于引用类型的值，我们可以为其添加属性和方法，也可以动态的改变和删除其属性和方法，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var person = new Object();</span><br><span class=\"line\">person.name = &quot;tom&quot;; // 动态添加属性</span><br><span class=\"line\">delete person.name; // 动态删除属性</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注：只能作用于引用类型。 </p>\n</blockquote>\n<h2 id=\"2、复制变量值\"><a href=\"#2、复制变量值\" class=\"headerlink\" title=\"2、复制变量值\"></a>2、复制变量值</h2><p>基本类型复制：复制基本类型会在被复制成功的变量上创建新值。两个变量可以参与任何<br>操作而不受影响。<br>引用类型复制：复制引用类型是创建一个指针，指向被复制的对象，两个变量操作同一个对象。</p>\n<h2 id=\"3、传递参数\"><a href=\"#3、传递参数\" class=\"headerlink\" title=\"3、传递参数\"></a>3、传递参数</h2><p>ECMAScript中所有函数的参数都是按值传递的，基本类型值传递如同基本类型变量复制一样，引用类型传递如同引用类型变量复制一样(传递的是地址)。<br>可以把基本类型传递的参数想象成局部变量。</p>\n<blockquote>\n<p>注：<strong>如果传入的参数变量是引用类型，则对该参数的操作会影响函数外部的变量</strong>。 </p>\n</blockquote>\n<h2 id=\"4、检测类型\"><a href=\"#4、检测类型\" class=\"headerlink\" title=\"4、检测类型\"></a>4、检测类型</h2><p>typeof：检测基本类型，可以确定一个变量是字符串、数值、布尔值还是undefined，检测函数时会返回”function”，但如果变量是null和对象，则会返回”object”。<br>instanceof：检测引用类型，返回值是true和false，检测基本类型始终返回false，具体使用如下所示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(person instanceof Object); // 是Object吗</span><br><span class=\"line\">alert(person instanceof Array); // 是数组吗</span><br><span class=\"line\">alert(person instanceof RegExp); // 是正则吗</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"执行环境及作用域\"><a href=\"#执行环境及作用域\" class=\"headerlink\" title=\"执行环境及作用域\"></a>执行环境及作用域</h1><p>全局执行环境是最外围的一个执行环境，根据ECMAScript实现所在的宿主环境不同，其执行环境对象也不一样，在Web浏览器中，全局执行环境为window对象。<br>因此，所有的全局变量和函数都是作为window对象的属性和方法创建的。每个函数也有自己的执行环境，当函数执行时，函数的环境就会被推入一个环境栈中，再函数执行完毕，栈将其环境弹出。<br>当代码在一个环境中执行时，会创建变量对象的作用域链，其作用时保证所有函数和变量的有序访问。<br><strong>每个环境都可以向上搜索作用域链，所以内部环境可以通过作用域链访问所有的外部环境，外部环境不能访问内部环境的任何变量和函数。</strong></p>\n<h2 id=\"1、延长作用域链\"><a href=\"#1、延长作用域链\" class=\"headerlink\" title=\"1、延长作用域链\"></a>1、延长作用域链</h2><p>try-catch语句的catch块</p>\n<h2 id=\"2、没有块级作用域\"><a href=\"#2、没有块级作用域\" class=\"headerlink\" title=\"2、没有块级作用域\"></a>2、没有块级作用域</h2><p>JavaScript没有块级作用域，在if或for中声明的变量会添加到当前的执行环境中。<br>在函数中没有使用var声明变量，该变量就会添加到全局环境中(一定要先声明变量)。<br>标识符的搜索顺序：先从当前的执行环境中寻找，如果没有再向上搜索作用域链，一直到找到该标识符或到了全局环境。</p>\n<h1 id=\"垃圾收集\"><a href=\"#垃圾收集\" class=\"headerlink\" title=\"垃圾收集\"></a>垃圾收集</h1><h2 id=\"1、标记清除\"><a href=\"#1、标记清除\" class=\"headerlink\" title=\"1、标记清除\"></a>1、标记清除</h2><p>最常用的垃圾收集方式。垃圾收集器在运行的时候会给存储在内存中的变量都加上标记，然后，去掉环境中的变量以及被环境中变量所引用的的变量的标记。而在此之后再被加上标记的变量被视为准备删除的变量。</p>\n<h2 id=\"2、引用计数\"><a href=\"#2、引用计数\" class=\"headerlink\" title=\"2、引用计数\"></a>2、引用计数</h2><p>不太常见的垃圾收集策略。</p>\n<blockquote>\n<p>注：会导致循环引用 </p>\n</blockquote>\n<h2 id=\"3、性能问题\"><a href=\"#3、性能问题\" class=\"headerlink\" title=\"3、性能问题\"></a>3、性能问题</h2><p>垃圾收集器是周期性运行的，在IE中可以调用window.CollectGarbage()来立即执行<br>垃圾收集。在Opera7及更高版本中调用window.opera.collect()也会启动垃圾收集。</p>\n<blockquote>\n<p>注：不建议手动触发垃圾收集过程。 </p>\n</blockquote>\n<h2 id=\"4、管理内存\"><a href=\"#4、管理内存\" class=\"headerlink\" title=\"4、管理内存\"></a>4、管理内存</h2><p>确保占用最少的内存可以让页面获得更好的性能，所以一旦有数据不再有用，最好将其设置为null来释放其引用。<br>这一做法适用于大多数全局变量和全局对象的属性，不过解除一个值的引用并不意味着自动回收该值所在的内存，而是让其脱离执行环境，方便垃圾收集器运行时将其回收。</p>\n"},{"title":"JavaScript高级程序设计读书笔记-第5章","date":"2017-09-05T14:51:08.000Z","description":"JavaScript高级程序设计读书笔记--第5章引用类型","_content":"# Object类型\n引用类型是一种数据结构，用于将数据和功能组织在一起。\n我们看到的绝大多数的类型值都是Object类型的实例，创建Object实例的方式有两种：\n1. new操作符跟Object构造函数 `var person = new Object();`\n2. 对象字面量表示法 ` var person = {};`\n\n>注：通过字面量定义对象时，实际上不会调用Object的构造函数。\n\n访问对象属性方法有两种：\n1. 点表示法(推荐) `person.name`\n2. 方括号表示法 `person[\"name\"]`\n\n# Array类型\n数组也是对象的一种，有两种创建方式：\n1. 使用Array的构造函数\n2. 字面量表示法(推荐)\n\n>注：数组的length属性不是只读的，可以调用Array.length移除元素或向数组中添加新项。 \n\n## 1、检测数组\nArray.isArray()方法，返回true或false。\n\n## 2、转换方法\n1. toString()方法返回数组中的每一项以逗号拼接而成的字符串。\n2. valueOf()方法返回的是数组本身。\n3. toLocaleString()方法与toString()相同，只不过返回的是每一项调用toLocaleString()的返回值。\n4. join()方法使用指定的分隔符来构建字符串。例如：array.join(\"|\");如果join的传入值为空或为undefined，则默认使用逗号作为分隔符。\n\n## 3、栈方法\n1. push()方法可以接收任意数量的参数，并把它们添加到数组末尾，返回修改后数组的长度(进栈方法)。\n2. pop()方法可以从数组末尾移除一项，并返回移除的项(出栈方法)。\n\n## 4、队列方法\n1. shift()方法移除数组第一项并返回该项(出队方法)。\n2. unshift()方法向数组前端添加任意项并返回新数组的长度(入队方法)。\n\n## 5、重排序方法\n1. reverse()方法会反转数组项的顺序。\n2. sort()方法在默认情况下按升序排列数组，比较的是字符串，sort()方法还可以传入一个比较函数来自定义比较顺序。\n\n>注：reverse()和sort()的返回值是经过排序后的数组。\n\n## 6、操作方法\n1. concat()方法可以基于当前数组中的所有项创建一个新数组，这个方法会先创建当前数组的副本，然后将接收到的参数添加到这个副本的末尾。\n2. slice()方法基于当前数组中的一个或多个项创建一个新数组，slice()不会影响原数组，它可以接收一到两个参数，即要返回项的起始和结束位置。\n3. splice()方法可以向数组中部插入项，并会对原始数组产生影响，返回一个数组。该返回的数组中包含原始数组中删除的项。用法如下：\n```\n//删除前两项\narray.splice(0,2);\n//从位置2开始插入字符串\narray.splice(2,0,\"red\",\"green\");\n//删除位置2的项并从位置2开始插入字符串\narray.splice(2,1,\"red\",\"green\");\n```\n\n## 7、位置方法\n1. indexOf()方法从数组的开头向后查找，没找到返回-1。\n2. lastIndexOf()方法从数组的末尾向前查找，没找到返回-1。\n\n>注：indexOf()和lastIndexOf()在查找时使用的是全等操作符===。\n\n## 8、迭代方法\n1. every()方法对数组中的每一项运行给定函数，如果该函数对每一项都返回true，则返回true。\n\n```\nvar num = {1,1,1,1,1,1};\nvar result = num.every(function(item, index, array){\n    return (item > 2);\n})\nalert(result); // false\n```\n2. filter()方法对数组中的每一项运行给定函数，返回该函数会**返回true的项**所组成的数组(过滤)。\n\n```\nvar num = {1,2,3,4,5,1};\nvar result = num.filter(function(item, index, array){\n    return (item > 2);\n})\nalert(result); // [3,4,5]\n```\n3. forEach()方法对数组中每一项运行给定函数，没有返回值，会对原始数组产生影响。\n\n```\nvar num = [1,1,1,1,1];\nnum.forEach(function(item, index, array){\n    // something happens\n})\n```\n4. map()方法对数组中每一项运行给定函数，返回每次函数调用的结果组成的数组(批量操作)。\n\n```\nvar num = [11,1,1,1,1];\nvar result = num.map(function(item, index, array){\n    return item * 2;\n});\nalert(result); // [22,2,2,2,2]\n```\n5. some()方法对数组中每一项运行给定函数，如果该函数对任一项返回true，则返回true。\n\n```\nvar num = [1,2,1,1];\nvar result = num.some(function(item, index, array){\n    return item > 2;\n})\nalert(result); // true\n```\n\n## 9、归并方法\n1. reduce()方法会从第一项开始，逐个遍历到最后，迭代数组所有项，然后构建一个最终返回值。\n\n```\nvar values = [1,2,3,4,5];\nvar sum = values.reduce(function(prev, cur, index, array){\n    // prev表示前面的累加值\n    return prev + cur;\n});\nalert(sum); // 15\n```\n2. reduceRight()方法会从最后一项开始，向前遍历到第一项，迭代数组所有项，然后构建一个最终返回值。\n\n```\nvar values = [1,2,3,4,5];\nvar sum = values.reduceRight(function(prev, cur, index, array){\n    // prev表示前面的累加值\n    return prev + cur;\n});\nalert(sum); // 15\n```\n\n# Date类型\n创建日期对象`var date = new Date(); `\n新创建的日期对象在不传入参数的前提下，自动获得当前的日期和时间。\nECMAScript提供了两个返回毫秒值的方法：\n1. Date.parse()方法：接收一个表示日期的字符串，如果传入的字符串不能表示日期，则返回NaN。\n2. Date.UTC()方法：接收的第一个参数是年份，第二个参数是基于0的月份，第三个是月中哪一天，第四个是小时数(0到23)，最后两个是分钟和毫秒数。例如：\n\n```\nvar time = new Date(Date.UTC(2000, 0));// 2000年1月1日午夜零时\n```\nECMAScript5中提供了Date.now()方法，返回表示调用这个方法时的日期和时间的毫秒数，我们可以借用这个方法来获得时间戳，如下所示：\n\n```\nvar start = Date.now();\nvar stop = Date.now();\nvar res = start - stop;\n```\n\n## 1、继承的方法\nDate类型也重写了toLocaleString()、toString()和valueOf()方法，着重说下valueOf()方法，该方法不返回字符串，而是返回日期的毫秒值，因此可以使用比较操作符来比较日期。\n\n## 2、日期格式化方法\n1. toDateString()方法：以特定的格式显示星期几、月、日和年。\n2. toTimeString()方法：以特定的格式显示时、分、秒和时区。\n3. toLocaleDateString()方法：以特定的地区格式显示星期几、月、日和年。\n4. toLocaleTimeString()方法：以特定的地区格式显示时、分、秒。\n5. toUTCString()方法：以特定的格式显示完整的UTC日期。\n\n## 3、日期/时间组件方法\n常用的几个：\n1. getTime()方法：返回日期的毫秒数，与valueOf()方法返回相同。\n2. setTime()方法：以毫秒数设置日期。\n3. getDate()方法：返回月份中的天数。\n4. getDay()方法：获得星期几(0表示周日)。\n5. getFullYear()方法：返回4位数的年份。\n\n# RegExp类型\n创建一个正则表达式`var expression = /pattern/flags `\nflags有三个标志：\n1. g：表示全局模式，即模式将被应用于所有字符串。\n2. i：表示不区分大小写模式。\n3. m：表示多行模式，即在到达一行文本末尾时还会继续查找下一行中是否存在于模式匹配的项。\n示例如下:\n\n```\n// 匹配字符串中所有'at'的实例\nvar pattern1 = /at/g;\n// 匹配第一个'bat'或'cat'，不区分大小写\nvar pattern2 = /[bc]at/i;\n```\n\n>注：使用字面量创建正则表达式不需要加引号，正则表达式中所有的元字符都必须使用\\转义。 \n\n## 1、RegExp实例属性\n1. global:布尔值，是否设置了g标志。\n2. ignoreCase:布尔值，是否设置了i标志。\n3. lastIndex:整数，表示开始搜索下一个匹配项的字符位置，从0算起。\n4. multiline:布尔值，是否设置了m标志\n5. source:正则表达式的字符串表示，按照字面量形式而非传入构造函数中的字符串模式返回。\n例如：\n\n```\nvar pattern =/\\[bc\\]at/i;\nconsole.log(pattern.global); // false\nconsole.log(pattern.ingoreCase); // true\nconsole.log(pattern.lastIndex); // 0\nconsole.log(pattern.multiline); // false\nconsole.log(pattern,source); // \"\\[bc\\]at\"\n```\n\n## 2、RegExp实例方法\n1. exec()方法：接受一个参数，即要进行捕获的字符串，返回包含第一个匹配项信息的数组，如果没有匹配项则返回null。\n例如：\n\n```\nvar text = \"mom and dad and baby\";\nvar pattern = /mom( and dad( and baby)?)?/gi;\nvar matches = pattern.exec(text);\nconsole.log(matches[0]); // \"mom and dad and baby\"\nconsole.log(matches[1]); // \"and dad and baby\"\nconsole.log(matches[2]); // \"and baby\"\n```\n对于exec()，即使在模式中设置了全局标志，它每次也只返回一个匹配项，**在不设置全局标志的情况下，在同一字符串上多次调用exec()将始终返回第一个匹配项**。如果设置了全局标志，每次调用exec()则都会在字符串中继续查找新的匹配项。如下所示：\n\n```\nvar text = \"cat bat sat fat\";\nvar pattern = /.at/gi;\nvar matches = pattern.exec(text);\nconsole.log(matches[0]); // cat\nmatches = pattern.exec(text);\nconsole.log(matches[0]); // bat\n```\n2. test()方法：接受一个字符串，如果该字符串参数与模式相匹配返回true，否则返回false。经常被用在if语句中，例如：\n```\nvar text = \"000-00-0000\";\nvar pattern = /\\d{3}-\\d{2}-\\d{4}/;\nif(pattern.test(text)){\n    console.log(\"text is text\");\n}\n```\n3. toLocaleString()与toString()方法：返回正则表达式的字面量形式的字符串。\n4. valueOf()方法：返回正则表达式本身。\n\n## 3、RegExp构造函数属性\n## 4、模式的局限性\n# Function类型\n函数实际上就是对象，每个函数都是Function的实例。由于函数是对象，所以函数名是指向函数对象的指针，声明一个函数有三种方式：\n1. 函数声明：\n```\nfunction sum(num1, num2){\n    return num1 + num2;\n}\n```\n2. 函数表达式：\n```\nvar sum = function(num1, num2){\n    return num1 + num2;\n};\n```\n3. 构造函数(不推荐)：\n```\nvar sum = new Function(\"num1\", \"num2\", \"return num1 + num2\");\n```\n\n## 1、没有重载\n由于函数名是指针，所有创建相同的函数名会覆盖前面所创建的函数名。\n## 2、函数声明与函数表达式\n解析器会率先读取函数声明，并使其在执行任何代码之前可用(提升机制)；至于函数表达式，则必须等到解析器执行到它所在的代码行，才会被真正的解释执行。\n例如：\n```\nalert(sum(1,1));// 可以执行\nfunction sum(num1, num2){\n    return num1 + num2;\n}\n\nalert(sum1(1,1)); // 会产生错误\nvar sum1 = function(num1, num2){\n    return num1 + num2;\n};\n```\n\n## 3、作为值的函数\n因为函数名本身是变量，所以函数也可作为值来使用，如下所示：\n```\nfunction callSomeFunction(someFunction, someArgument){\n    return someFunction(someArgument);\n}\n\nfunction add10(num){\n    return num + 10;\n}\n\nvar result = callSomeFunction(add10, 10);\nconsole.log(result); // 20\n```\n我们可以用函数中返回另一个函数这种技术来为对象数组排序，如下所示：\n```\nfunction createComparisonFunction(propertyName){\n    return function(object1, object2){\n        var value1 = object1[propertyName];\n        var value2 = object2[propertyName];\n        if(value1 < value2){\n            return -1;\n        }else if(value1 > value2){\n            return 1;\n        }else{\n            return 0;\n        }\n    }\n}\nvar data = [{name: \"zhang\", age: 18}, {name: \"li\", age: 19}];\ndate.sort(createComparisonFunction(name));\nalert(data[0].name); // li\n```\n\n## 4、函数的内部属性\n函数的内部有两个特殊的对象：arguments和this。\n1. arguments对象：类数组对象，包含着传入函数的所有参数，还有一个callee属性，该属性是一个指针，指向拥有这个arguments对象的函数。例如：\n```\nfunction factorial(num){\n    if(num <= 1){\n        return 1;\n    }else{\n        return num * arguments.callee(num - 1);\n    }\n}\n```\n2. this对象：函数执行的环境对象，全局函数this对象的引用就是window。\n3. caller对象：保存着调用当前函数的引用，如果是在全局作用域中调用当前函数，则它的值为null。\n\n## 5、函数属性和方法\n1. length属性：表示函数希望接受命名参数的个数。\n```\nfunction sayName(name){\n    alert(name);\n}\nconsole.log(sayName.length); // 1\n```\n2. prototype属性：保存所有实例方法，例如toString()、valueOf()等。\n3. apply()方法：设置函数体内this的值，接收两个参数，第一个为运行函数的作用域，第二个为参数数组，也可以为arguments对象。例如:\n```\nfunction sum(num1, num2){\n    return num1 + num2;\n}\nfunction callSum(num1, num2){\n    return sum.apply(this, [num1, num2]);\n}\nconsole.log(callSum()); // 20\n```\n4. call()方法：与apply类型，但接收参数不同，第一个为this值，其余参数必须逐个列举出来，例如：\n```\nfunction sum(num1, num2){\n    return num1 + num2;\n}\nfunction callSum(num1, num2){\n    return sum.call(this, num1, num2);\n}\nalert(callSum(10, 10)); // 20\n```\n5. bind()方法：创建一个函数的实例，其this值会被绑定到传给bind()函数的值，例如：\n```\nwindow.color = \"red\";\nvar o = {\n    color: \"blue\"\n};\nfunction sayColor(){\n    alert(this.color);\n}\nvar objectSayColor = sayColor.bind(o);\nobjectSayColor(); // blue\n```\n\n# 基本包装类型\n基本包装类型与引用类型的区别在于对象的生存期，引用类型的实例在执行流离开当前作用域之前一直保存在内存中，而基本包装类型在内存中存只存在执行声明时的一瞬间，然后被立即销毁，所以基本包装类型不能在运行时添加属性和方法。\n## 1、Boolean类型\n建议永远不要使用\n基本类型和引用类型的布尔值有两个区别：\n1. typeof对基本类型使用返回\"boolean\"，而对引用类型返回\"object\"。\n2. instanceof测试Boolean会返回true，而测试基本类型会返回false。\n\n## 2、Number类型\ntoFixed()方法：按照指定小数位返回数值的字符串表示，适合处理货币值。例如：\n```\nvar num = 10;\nconsole.log(num.toFixed(2)); // \"10.00\"\n```\n\ntoPrecision()方法：返回固定大小格式，接收一个参数，该参数为表示所以数值位数，例如：\n```\nvar num = 99;\nalert(num.toPrecision(1)); // \"1e+2\"\nalert(num.toPrecision(2)); // \"99\"\nalert(num.toPrecision(3)); // \"99.0\"\n```\n\n## 3、String类型\n字符串的对象包装类型，有length属性，表示字符串中多少个字符数。\n1. 字符方法：charAt()接收一个参数返回指定位置的字符，charCodeAt()接收一个参数返回指定位置的字符编码。charAt()可以被字符串加方括号的形式代替(string[?])。\n2. 字符串操作方法：concat()将一个或多个字符串拼接起来，返回拼接得到的新字符串，推荐使用+拼接字符串。slice(开始位置，结束位置)，substring(开始位置，结束位置)，substr(开始位置，截取个数)。如果传入的参数是负值，则slice()会将负值与字符串长度相加；substr()将负的第一个参数加上字符串长度，将负的第二个参数转换为0；substring()会把所有的负值转换为0.例如：\n```\nvar str = \"hello world\";\nalert(str.slice(3)); // \"lo world\"\nalert(str.substring(3)); // \"lo world\"\nalert(str.substr(3)); // \"lo world\"\nalert(str.slice(3, 7)); // \"lo w\"\nalert(str.substring(3, 7)); // \"lo w\"\nalert(str.substr(3, 7)); // \"lo worl\"\nalert(str.slice(-3)); // \"rld\"\nalert(str.substring(-3)); // \"hello world\"\nalert(str.substr(-3)); // \"rld\"\nalert(str.slice(3, -4)); // \"lo w\"\nalert(str.substring(3, -4)); // \"hel\"\nalert(str.substr(3, -4)); // \"\"\n```\n3. 字符串位置方法：indexOf()从开头搜索返回搜索到的子字符串位置，lastIndexOf()从末尾搜索返回搜索到子字符串的位置。这两个方法都接收可选的第二个参数，表示从字符串中哪个位置开始搜索。例如：\n```\nvar str = \"hello world\";\nalert(str.index(\"o\", 6)) // 7\nalert(str.lastIndexOf(\"o\", 6)) // 4\n\nvar string = \"Lorem ipsum dolor sit amet, constectetur adipisicing elit\";\nvar positions = new Array();\nvar pos = string.indexOf(\"e\");\n\nwhile(pos > 1){\n    positions.push(pos);\n    pos = string.indexOf(\"e\",pos + 1);\n}\n```\n4. trim()方法：创建一个字符串副本，删除前置及后缀所有空格，返回字符串副本。\n5. 字符串大小写转换方法：toLowerCase()和toUpperCase()，还有两个针对地区的大小写转换方法toLocaleLowerCase()和toLocaleUpperCase()。\n6. 字符串的模式匹配方法：match()方法接收一个正则表达式参数，返回一个字符串捕获数组。\nsearch()方法接收一个正则表达式参数，返回字符串中第一个匹配的索引项。replace()方法接收两个参数，第一个参数可以是字符串或正则表达式，第二个参数可以是一个字符串或一个函数，并返回一个新字符串。split()方法接收一个分隔符，将字符串分割成字符数组返回，还可以接收第二个参数，用于指定分割数组的大小。这四个方法示例如下：\n```\nvar str = \"hello world\";\nalert(str.toUpperCase()); // \"HELLO WORLD\"\nalert(str.toLowerCase()); // \"hello world\"\nalert(str.toLocaleUpperCase()); // \"HELLO WORLD\"\nalert(str.toLocaleLowerCase()); // \"hello world\"\n\nvar text = \"cat bat sat fat\";\nvar matches = text.match(/.at/);\nconsole.log(matches[0]); // \"cat\"\n\nvar result = text.replace(\"at\", \"end\");\nconsole.log(result); // \"cond bat sat fat\"\nresult = text.replace(/at/g \"ond\");\nconsole.log(result); // \"cond bond sond fond\"\n\nfunction htmlEscape(text){\n    return text.replace(/[<>\"&]/g, function(match, pos, originalText){\n        // match为匹配项\n        switch(match){\n            case \"<\":\n                return \"&lt\";\n            case \">\":\n                return \"&gt\";\n            case \"&\":\n                return \"&amp\";\n            case \"<\":\n                return \"&quot\";\n        }\n    });\n}\n\nvar test = \"red,blue,black\";\nvar arr = test.split(\",\", 2);\nalert(arr); // [\"red\", \"blue\"]\n```\n7. localeCompare()方法：比较两个字符串，返回-1、0和1，返回值取决于比较参数。例如：\n```\nvar str = \"yellow\";\nalert(str.localeCompare(\"brick\")); // 1\n```\n8. fromCharCode()方法：字符串的静态方法，根据一个或多个编码返回字符串。\n9. HTML方法：尽量不使用。\n\n# 单体内置对象\n## 1、Global对象\n1. URI编码方法：encodeURI()和encodeURIComponent()对URI进行编码，encodeURI()用于整个URI，不会对本身属于URI的特殊字符进行编码，例如冒号、正斜杠、问号和井字号。encodeURIComponent()用于URI中的某一段进行编码，会对它发现的任何非标准字符进行编码。与这两个方法与之相对就是decodeURI()和decodeURIComponent()这两个解码方法。例如：\n```\nvar uri = \"http://www.wrox.com/illegal value.htm#start\";\nalert(encodeURI(uri)); // \"http://www.wrox.com/illegal%20value.htm#start\"\nalert(encodeURIComponent(uri)); // \"http%3A%2F%2Fwww.wrox.com%2Fillegal%20..\"\n```\n2. eval()方法：慎用！\n3. Global对象的属性：undefined NaN Infinity Object Array Function Boolean String Number Date RegExp Error EvalError RangeError ReferenceError SyntaxError TypeError URIError\n4. window对象：在浏览器中将Global对象作为window对象的一部分加以实现。\n\n\n## 2、Math对象\n1. Math对象常用属性：Math.PI圆周率的值。\n2. min()和max()方法：确定一组数据的最大最下值。例如：\n```\nvar min = Math.min(1,2,3,4);\nalert(min); // 1\n```\n3. 舍入方法：Math.ceil()向上取整，Math.floor()向下取整，Math.round()四舍五入。\n4. random()方法：返回大于等于0小于1的一个随机数。例如：\n```\nvar num = Math.floor(Math.random() * 10 + 5); // 返回5-10的随机数\n```\n5. 其他方法：Math.abs()取绝对值，Math.sqrt()取平方根。\n","source":"_posts/JavaScript高级程序设计读书笔记-第5章.md","raw":"---\ntitle: JavaScript高级程序设计读书笔记-第5章\ndate: 2017-09-05 22:51:08\ncategories: JS高程笔记\ntags:\n     - 笔记\n     - JavaScript\ndescription: JavaScript高级程序设计读书笔记--第5章引用类型\n---\n# Object类型\n引用类型是一种数据结构，用于将数据和功能组织在一起。\n我们看到的绝大多数的类型值都是Object类型的实例，创建Object实例的方式有两种：\n1. new操作符跟Object构造函数 `var person = new Object();`\n2. 对象字面量表示法 ` var person = {};`\n\n>注：通过字面量定义对象时，实际上不会调用Object的构造函数。\n\n访问对象属性方法有两种：\n1. 点表示法(推荐) `person.name`\n2. 方括号表示法 `person[\"name\"]`\n\n# Array类型\n数组也是对象的一种，有两种创建方式：\n1. 使用Array的构造函数\n2. 字面量表示法(推荐)\n\n>注：数组的length属性不是只读的，可以调用Array.length移除元素或向数组中添加新项。 \n\n## 1、检测数组\nArray.isArray()方法，返回true或false。\n\n## 2、转换方法\n1. toString()方法返回数组中的每一项以逗号拼接而成的字符串。\n2. valueOf()方法返回的是数组本身。\n3. toLocaleString()方法与toString()相同，只不过返回的是每一项调用toLocaleString()的返回值。\n4. join()方法使用指定的分隔符来构建字符串。例如：array.join(\"|\");如果join的传入值为空或为undefined，则默认使用逗号作为分隔符。\n\n## 3、栈方法\n1. push()方法可以接收任意数量的参数，并把它们添加到数组末尾，返回修改后数组的长度(进栈方法)。\n2. pop()方法可以从数组末尾移除一项，并返回移除的项(出栈方法)。\n\n## 4、队列方法\n1. shift()方法移除数组第一项并返回该项(出队方法)。\n2. unshift()方法向数组前端添加任意项并返回新数组的长度(入队方法)。\n\n## 5、重排序方法\n1. reverse()方法会反转数组项的顺序。\n2. sort()方法在默认情况下按升序排列数组，比较的是字符串，sort()方法还可以传入一个比较函数来自定义比较顺序。\n\n>注：reverse()和sort()的返回值是经过排序后的数组。\n\n## 6、操作方法\n1. concat()方法可以基于当前数组中的所有项创建一个新数组，这个方法会先创建当前数组的副本，然后将接收到的参数添加到这个副本的末尾。\n2. slice()方法基于当前数组中的一个或多个项创建一个新数组，slice()不会影响原数组，它可以接收一到两个参数，即要返回项的起始和结束位置。\n3. splice()方法可以向数组中部插入项，并会对原始数组产生影响，返回一个数组。该返回的数组中包含原始数组中删除的项。用法如下：\n```\n//删除前两项\narray.splice(0,2);\n//从位置2开始插入字符串\narray.splice(2,0,\"red\",\"green\");\n//删除位置2的项并从位置2开始插入字符串\narray.splice(2,1,\"red\",\"green\");\n```\n\n## 7、位置方法\n1. indexOf()方法从数组的开头向后查找，没找到返回-1。\n2. lastIndexOf()方法从数组的末尾向前查找，没找到返回-1。\n\n>注：indexOf()和lastIndexOf()在查找时使用的是全等操作符===。\n\n## 8、迭代方法\n1. every()方法对数组中的每一项运行给定函数，如果该函数对每一项都返回true，则返回true。\n\n```\nvar num = {1,1,1,1,1,1};\nvar result = num.every(function(item, index, array){\n    return (item > 2);\n})\nalert(result); // false\n```\n2. filter()方法对数组中的每一项运行给定函数，返回该函数会**返回true的项**所组成的数组(过滤)。\n\n```\nvar num = {1,2,3,4,5,1};\nvar result = num.filter(function(item, index, array){\n    return (item > 2);\n})\nalert(result); // [3,4,5]\n```\n3. forEach()方法对数组中每一项运行给定函数，没有返回值，会对原始数组产生影响。\n\n```\nvar num = [1,1,1,1,1];\nnum.forEach(function(item, index, array){\n    // something happens\n})\n```\n4. map()方法对数组中每一项运行给定函数，返回每次函数调用的结果组成的数组(批量操作)。\n\n```\nvar num = [11,1,1,1,1];\nvar result = num.map(function(item, index, array){\n    return item * 2;\n});\nalert(result); // [22,2,2,2,2]\n```\n5. some()方法对数组中每一项运行给定函数，如果该函数对任一项返回true，则返回true。\n\n```\nvar num = [1,2,1,1];\nvar result = num.some(function(item, index, array){\n    return item > 2;\n})\nalert(result); // true\n```\n\n## 9、归并方法\n1. reduce()方法会从第一项开始，逐个遍历到最后，迭代数组所有项，然后构建一个最终返回值。\n\n```\nvar values = [1,2,3,4,5];\nvar sum = values.reduce(function(prev, cur, index, array){\n    // prev表示前面的累加值\n    return prev + cur;\n});\nalert(sum); // 15\n```\n2. reduceRight()方法会从最后一项开始，向前遍历到第一项，迭代数组所有项，然后构建一个最终返回值。\n\n```\nvar values = [1,2,3,4,5];\nvar sum = values.reduceRight(function(prev, cur, index, array){\n    // prev表示前面的累加值\n    return prev + cur;\n});\nalert(sum); // 15\n```\n\n# Date类型\n创建日期对象`var date = new Date(); `\n新创建的日期对象在不传入参数的前提下，自动获得当前的日期和时间。\nECMAScript提供了两个返回毫秒值的方法：\n1. Date.parse()方法：接收一个表示日期的字符串，如果传入的字符串不能表示日期，则返回NaN。\n2. Date.UTC()方法：接收的第一个参数是年份，第二个参数是基于0的月份，第三个是月中哪一天，第四个是小时数(0到23)，最后两个是分钟和毫秒数。例如：\n\n```\nvar time = new Date(Date.UTC(2000, 0));// 2000年1月1日午夜零时\n```\nECMAScript5中提供了Date.now()方法，返回表示调用这个方法时的日期和时间的毫秒数，我们可以借用这个方法来获得时间戳，如下所示：\n\n```\nvar start = Date.now();\nvar stop = Date.now();\nvar res = start - stop;\n```\n\n## 1、继承的方法\nDate类型也重写了toLocaleString()、toString()和valueOf()方法，着重说下valueOf()方法，该方法不返回字符串，而是返回日期的毫秒值，因此可以使用比较操作符来比较日期。\n\n## 2、日期格式化方法\n1. toDateString()方法：以特定的格式显示星期几、月、日和年。\n2. toTimeString()方法：以特定的格式显示时、分、秒和时区。\n3. toLocaleDateString()方法：以特定的地区格式显示星期几、月、日和年。\n4. toLocaleTimeString()方法：以特定的地区格式显示时、分、秒。\n5. toUTCString()方法：以特定的格式显示完整的UTC日期。\n\n## 3、日期/时间组件方法\n常用的几个：\n1. getTime()方法：返回日期的毫秒数，与valueOf()方法返回相同。\n2. setTime()方法：以毫秒数设置日期。\n3. getDate()方法：返回月份中的天数。\n4. getDay()方法：获得星期几(0表示周日)。\n5. getFullYear()方法：返回4位数的年份。\n\n# RegExp类型\n创建一个正则表达式`var expression = /pattern/flags `\nflags有三个标志：\n1. g：表示全局模式，即模式将被应用于所有字符串。\n2. i：表示不区分大小写模式。\n3. m：表示多行模式，即在到达一行文本末尾时还会继续查找下一行中是否存在于模式匹配的项。\n示例如下:\n\n```\n// 匹配字符串中所有'at'的实例\nvar pattern1 = /at/g;\n// 匹配第一个'bat'或'cat'，不区分大小写\nvar pattern2 = /[bc]at/i;\n```\n\n>注：使用字面量创建正则表达式不需要加引号，正则表达式中所有的元字符都必须使用\\转义。 \n\n## 1、RegExp实例属性\n1. global:布尔值，是否设置了g标志。\n2. ignoreCase:布尔值，是否设置了i标志。\n3. lastIndex:整数，表示开始搜索下一个匹配项的字符位置，从0算起。\n4. multiline:布尔值，是否设置了m标志\n5. source:正则表达式的字符串表示，按照字面量形式而非传入构造函数中的字符串模式返回。\n例如：\n\n```\nvar pattern =/\\[bc\\]at/i;\nconsole.log(pattern.global); // false\nconsole.log(pattern.ingoreCase); // true\nconsole.log(pattern.lastIndex); // 0\nconsole.log(pattern.multiline); // false\nconsole.log(pattern,source); // \"\\[bc\\]at\"\n```\n\n## 2、RegExp实例方法\n1. exec()方法：接受一个参数，即要进行捕获的字符串，返回包含第一个匹配项信息的数组，如果没有匹配项则返回null。\n例如：\n\n```\nvar text = \"mom and dad and baby\";\nvar pattern = /mom( and dad( and baby)?)?/gi;\nvar matches = pattern.exec(text);\nconsole.log(matches[0]); // \"mom and dad and baby\"\nconsole.log(matches[1]); // \"and dad and baby\"\nconsole.log(matches[2]); // \"and baby\"\n```\n对于exec()，即使在模式中设置了全局标志，它每次也只返回一个匹配项，**在不设置全局标志的情况下，在同一字符串上多次调用exec()将始终返回第一个匹配项**。如果设置了全局标志，每次调用exec()则都会在字符串中继续查找新的匹配项。如下所示：\n\n```\nvar text = \"cat bat sat fat\";\nvar pattern = /.at/gi;\nvar matches = pattern.exec(text);\nconsole.log(matches[0]); // cat\nmatches = pattern.exec(text);\nconsole.log(matches[0]); // bat\n```\n2. test()方法：接受一个字符串，如果该字符串参数与模式相匹配返回true，否则返回false。经常被用在if语句中，例如：\n```\nvar text = \"000-00-0000\";\nvar pattern = /\\d{3}-\\d{2}-\\d{4}/;\nif(pattern.test(text)){\n    console.log(\"text is text\");\n}\n```\n3. toLocaleString()与toString()方法：返回正则表达式的字面量形式的字符串。\n4. valueOf()方法：返回正则表达式本身。\n\n## 3、RegExp构造函数属性\n## 4、模式的局限性\n# Function类型\n函数实际上就是对象，每个函数都是Function的实例。由于函数是对象，所以函数名是指向函数对象的指针，声明一个函数有三种方式：\n1. 函数声明：\n```\nfunction sum(num1, num2){\n    return num1 + num2;\n}\n```\n2. 函数表达式：\n```\nvar sum = function(num1, num2){\n    return num1 + num2;\n};\n```\n3. 构造函数(不推荐)：\n```\nvar sum = new Function(\"num1\", \"num2\", \"return num1 + num2\");\n```\n\n## 1、没有重载\n由于函数名是指针，所有创建相同的函数名会覆盖前面所创建的函数名。\n## 2、函数声明与函数表达式\n解析器会率先读取函数声明，并使其在执行任何代码之前可用(提升机制)；至于函数表达式，则必须等到解析器执行到它所在的代码行，才会被真正的解释执行。\n例如：\n```\nalert(sum(1,1));// 可以执行\nfunction sum(num1, num2){\n    return num1 + num2;\n}\n\nalert(sum1(1,1)); // 会产生错误\nvar sum1 = function(num1, num2){\n    return num1 + num2;\n};\n```\n\n## 3、作为值的函数\n因为函数名本身是变量，所以函数也可作为值来使用，如下所示：\n```\nfunction callSomeFunction(someFunction, someArgument){\n    return someFunction(someArgument);\n}\n\nfunction add10(num){\n    return num + 10;\n}\n\nvar result = callSomeFunction(add10, 10);\nconsole.log(result); // 20\n```\n我们可以用函数中返回另一个函数这种技术来为对象数组排序，如下所示：\n```\nfunction createComparisonFunction(propertyName){\n    return function(object1, object2){\n        var value1 = object1[propertyName];\n        var value2 = object2[propertyName];\n        if(value1 < value2){\n            return -1;\n        }else if(value1 > value2){\n            return 1;\n        }else{\n            return 0;\n        }\n    }\n}\nvar data = [{name: \"zhang\", age: 18}, {name: \"li\", age: 19}];\ndate.sort(createComparisonFunction(name));\nalert(data[0].name); // li\n```\n\n## 4、函数的内部属性\n函数的内部有两个特殊的对象：arguments和this。\n1. arguments对象：类数组对象，包含着传入函数的所有参数，还有一个callee属性，该属性是一个指针，指向拥有这个arguments对象的函数。例如：\n```\nfunction factorial(num){\n    if(num <= 1){\n        return 1;\n    }else{\n        return num * arguments.callee(num - 1);\n    }\n}\n```\n2. this对象：函数执行的环境对象，全局函数this对象的引用就是window。\n3. caller对象：保存着调用当前函数的引用，如果是在全局作用域中调用当前函数，则它的值为null。\n\n## 5、函数属性和方法\n1. length属性：表示函数希望接受命名参数的个数。\n```\nfunction sayName(name){\n    alert(name);\n}\nconsole.log(sayName.length); // 1\n```\n2. prototype属性：保存所有实例方法，例如toString()、valueOf()等。\n3. apply()方法：设置函数体内this的值，接收两个参数，第一个为运行函数的作用域，第二个为参数数组，也可以为arguments对象。例如:\n```\nfunction sum(num1, num2){\n    return num1 + num2;\n}\nfunction callSum(num1, num2){\n    return sum.apply(this, [num1, num2]);\n}\nconsole.log(callSum()); // 20\n```\n4. call()方法：与apply类型，但接收参数不同，第一个为this值，其余参数必须逐个列举出来，例如：\n```\nfunction sum(num1, num2){\n    return num1 + num2;\n}\nfunction callSum(num1, num2){\n    return sum.call(this, num1, num2);\n}\nalert(callSum(10, 10)); // 20\n```\n5. bind()方法：创建一个函数的实例，其this值会被绑定到传给bind()函数的值，例如：\n```\nwindow.color = \"red\";\nvar o = {\n    color: \"blue\"\n};\nfunction sayColor(){\n    alert(this.color);\n}\nvar objectSayColor = sayColor.bind(o);\nobjectSayColor(); // blue\n```\n\n# 基本包装类型\n基本包装类型与引用类型的区别在于对象的生存期，引用类型的实例在执行流离开当前作用域之前一直保存在内存中，而基本包装类型在内存中存只存在执行声明时的一瞬间，然后被立即销毁，所以基本包装类型不能在运行时添加属性和方法。\n## 1、Boolean类型\n建议永远不要使用\n基本类型和引用类型的布尔值有两个区别：\n1. typeof对基本类型使用返回\"boolean\"，而对引用类型返回\"object\"。\n2. instanceof测试Boolean会返回true，而测试基本类型会返回false。\n\n## 2、Number类型\ntoFixed()方法：按照指定小数位返回数值的字符串表示，适合处理货币值。例如：\n```\nvar num = 10;\nconsole.log(num.toFixed(2)); // \"10.00\"\n```\n\ntoPrecision()方法：返回固定大小格式，接收一个参数，该参数为表示所以数值位数，例如：\n```\nvar num = 99;\nalert(num.toPrecision(1)); // \"1e+2\"\nalert(num.toPrecision(2)); // \"99\"\nalert(num.toPrecision(3)); // \"99.0\"\n```\n\n## 3、String类型\n字符串的对象包装类型，有length属性，表示字符串中多少个字符数。\n1. 字符方法：charAt()接收一个参数返回指定位置的字符，charCodeAt()接收一个参数返回指定位置的字符编码。charAt()可以被字符串加方括号的形式代替(string[?])。\n2. 字符串操作方法：concat()将一个或多个字符串拼接起来，返回拼接得到的新字符串，推荐使用+拼接字符串。slice(开始位置，结束位置)，substring(开始位置，结束位置)，substr(开始位置，截取个数)。如果传入的参数是负值，则slice()会将负值与字符串长度相加；substr()将负的第一个参数加上字符串长度，将负的第二个参数转换为0；substring()会把所有的负值转换为0.例如：\n```\nvar str = \"hello world\";\nalert(str.slice(3)); // \"lo world\"\nalert(str.substring(3)); // \"lo world\"\nalert(str.substr(3)); // \"lo world\"\nalert(str.slice(3, 7)); // \"lo w\"\nalert(str.substring(3, 7)); // \"lo w\"\nalert(str.substr(3, 7)); // \"lo worl\"\nalert(str.slice(-3)); // \"rld\"\nalert(str.substring(-3)); // \"hello world\"\nalert(str.substr(-3)); // \"rld\"\nalert(str.slice(3, -4)); // \"lo w\"\nalert(str.substring(3, -4)); // \"hel\"\nalert(str.substr(3, -4)); // \"\"\n```\n3. 字符串位置方法：indexOf()从开头搜索返回搜索到的子字符串位置，lastIndexOf()从末尾搜索返回搜索到子字符串的位置。这两个方法都接收可选的第二个参数，表示从字符串中哪个位置开始搜索。例如：\n```\nvar str = \"hello world\";\nalert(str.index(\"o\", 6)) // 7\nalert(str.lastIndexOf(\"o\", 6)) // 4\n\nvar string = \"Lorem ipsum dolor sit amet, constectetur adipisicing elit\";\nvar positions = new Array();\nvar pos = string.indexOf(\"e\");\n\nwhile(pos > 1){\n    positions.push(pos);\n    pos = string.indexOf(\"e\",pos + 1);\n}\n```\n4. trim()方法：创建一个字符串副本，删除前置及后缀所有空格，返回字符串副本。\n5. 字符串大小写转换方法：toLowerCase()和toUpperCase()，还有两个针对地区的大小写转换方法toLocaleLowerCase()和toLocaleUpperCase()。\n6. 字符串的模式匹配方法：match()方法接收一个正则表达式参数，返回一个字符串捕获数组。\nsearch()方法接收一个正则表达式参数，返回字符串中第一个匹配的索引项。replace()方法接收两个参数，第一个参数可以是字符串或正则表达式，第二个参数可以是一个字符串或一个函数，并返回一个新字符串。split()方法接收一个分隔符，将字符串分割成字符数组返回，还可以接收第二个参数，用于指定分割数组的大小。这四个方法示例如下：\n```\nvar str = \"hello world\";\nalert(str.toUpperCase()); // \"HELLO WORLD\"\nalert(str.toLowerCase()); // \"hello world\"\nalert(str.toLocaleUpperCase()); // \"HELLO WORLD\"\nalert(str.toLocaleLowerCase()); // \"hello world\"\n\nvar text = \"cat bat sat fat\";\nvar matches = text.match(/.at/);\nconsole.log(matches[0]); // \"cat\"\n\nvar result = text.replace(\"at\", \"end\");\nconsole.log(result); // \"cond bat sat fat\"\nresult = text.replace(/at/g \"ond\");\nconsole.log(result); // \"cond bond sond fond\"\n\nfunction htmlEscape(text){\n    return text.replace(/[<>\"&]/g, function(match, pos, originalText){\n        // match为匹配项\n        switch(match){\n            case \"<\":\n                return \"&lt\";\n            case \">\":\n                return \"&gt\";\n            case \"&\":\n                return \"&amp\";\n            case \"<\":\n                return \"&quot\";\n        }\n    });\n}\n\nvar test = \"red,blue,black\";\nvar arr = test.split(\",\", 2);\nalert(arr); // [\"red\", \"blue\"]\n```\n7. localeCompare()方法：比较两个字符串，返回-1、0和1，返回值取决于比较参数。例如：\n```\nvar str = \"yellow\";\nalert(str.localeCompare(\"brick\")); // 1\n```\n8. fromCharCode()方法：字符串的静态方法，根据一个或多个编码返回字符串。\n9. HTML方法：尽量不使用。\n\n# 单体内置对象\n## 1、Global对象\n1. URI编码方法：encodeURI()和encodeURIComponent()对URI进行编码，encodeURI()用于整个URI，不会对本身属于URI的特殊字符进行编码，例如冒号、正斜杠、问号和井字号。encodeURIComponent()用于URI中的某一段进行编码，会对它发现的任何非标准字符进行编码。与这两个方法与之相对就是decodeURI()和decodeURIComponent()这两个解码方法。例如：\n```\nvar uri = \"http://www.wrox.com/illegal value.htm#start\";\nalert(encodeURI(uri)); // \"http://www.wrox.com/illegal%20value.htm#start\"\nalert(encodeURIComponent(uri)); // \"http%3A%2F%2Fwww.wrox.com%2Fillegal%20..\"\n```\n2. eval()方法：慎用！\n3. Global对象的属性：undefined NaN Infinity Object Array Function Boolean String Number Date RegExp Error EvalError RangeError ReferenceError SyntaxError TypeError URIError\n4. window对象：在浏览器中将Global对象作为window对象的一部分加以实现。\n\n\n## 2、Math对象\n1. Math对象常用属性：Math.PI圆周率的值。\n2. min()和max()方法：确定一组数据的最大最下值。例如：\n```\nvar min = Math.min(1,2,3,4);\nalert(min); // 1\n```\n3. 舍入方法：Math.ceil()向上取整，Math.floor()向下取整，Math.round()四舍五入。\n4. random()方法：返回大于等于0小于1的一个随机数。例如：\n```\nvar num = Math.floor(Math.random() * 10 + 5); // 返回5-10的随机数\n```\n5. 其他方法：Math.abs()取绝对值，Math.sqrt()取平方根。\n","slug":"JavaScript高级程序设计读书笔记-第5章","published":1,"updated":"2017-09-28T15:04:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjksf3cwi0010h8ef6yd0i5xj","content":"<h1 id=\"Object类型\"><a href=\"#Object类型\" class=\"headerlink\" title=\"Object类型\"></a>Object类型</h1><p>引用类型是一种数据结构，用于将数据和功能组织在一起。<br>我们看到的绝大多数的类型值都是Object类型的实例，创建Object实例的方式有两种：</p>\n<ol>\n<li>new操作符跟Object构造函数 <code>var person = new Object();</code></li>\n<li>对象字面量表示法 <code>var person = {};</code></li>\n</ol>\n<blockquote>\n<p>注：通过字面量定义对象时，实际上不会调用Object的构造函数。</p>\n</blockquote>\n<p>访问对象属性方法有两种：</p>\n<ol>\n<li>点表示法(推荐) <code>person.name</code></li>\n<li>方括号表示法 <code>person[&quot;name&quot;]</code></li>\n</ol>\n<h1 id=\"Array类型\"><a href=\"#Array类型\" class=\"headerlink\" title=\"Array类型\"></a>Array类型</h1><p>数组也是对象的一种，有两种创建方式：</p>\n<ol>\n<li>使用Array的构造函数</li>\n<li>字面量表示法(推荐)</li>\n</ol>\n<blockquote>\n<p>注：数组的length属性不是只读的，可以调用Array.length移除元素或向数组中添加新项。 </p>\n</blockquote>\n<h2 id=\"1、检测数组\"><a href=\"#1、检测数组\" class=\"headerlink\" title=\"1、检测数组\"></a>1、检测数组</h2><p>Array.isArray()方法，返回true或false。</p>\n<h2 id=\"2、转换方法\"><a href=\"#2、转换方法\" class=\"headerlink\" title=\"2、转换方法\"></a>2、转换方法</h2><ol>\n<li>toString()方法返回数组中的每一项以逗号拼接而成的字符串。</li>\n<li>valueOf()方法返回的是数组本身。</li>\n<li>toLocaleString()方法与toString()相同，只不过返回的是每一项调用toLocaleString()的返回值。</li>\n<li>join()方法使用指定的分隔符来构建字符串。例如：array.join(“|”);如果join的传入值为空或为undefined，则默认使用逗号作为分隔符。</li>\n</ol>\n<h2 id=\"3、栈方法\"><a href=\"#3、栈方法\" class=\"headerlink\" title=\"3、栈方法\"></a>3、栈方法</h2><ol>\n<li>push()方法可以接收任意数量的参数，并把它们添加到数组末尾，返回修改后数组的长度(进栈方法)。</li>\n<li>pop()方法可以从数组末尾移除一项，并返回移除的项(出栈方法)。</li>\n</ol>\n<h2 id=\"4、队列方法\"><a href=\"#4、队列方法\" class=\"headerlink\" title=\"4、队列方法\"></a>4、队列方法</h2><ol>\n<li>shift()方法移除数组第一项并返回该项(出队方法)。</li>\n<li>unshift()方法向数组前端添加任意项并返回新数组的长度(入队方法)。</li>\n</ol>\n<h2 id=\"5、重排序方法\"><a href=\"#5、重排序方法\" class=\"headerlink\" title=\"5、重排序方法\"></a>5、重排序方法</h2><ol>\n<li>reverse()方法会反转数组项的顺序。</li>\n<li>sort()方法在默认情况下按升序排列数组，比较的是字符串，sort()方法还可以传入一个比较函数来自定义比较顺序。</li>\n</ol>\n<blockquote>\n<p>注：reverse()和sort()的返回值是经过排序后的数组。</p>\n</blockquote>\n<h2 id=\"6、操作方法\"><a href=\"#6、操作方法\" class=\"headerlink\" title=\"6、操作方法\"></a>6、操作方法</h2><ol>\n<li>concat()方法可以基于当前数组中的所有项创建一个新数组，这个方法会先创建当前数组的副本，然后将接收到的参数添加到这个副本的末尾。</li>\n<li>slice()方法基于当前数组中的一个或多个项创建一个新数组，slice()不会影响原数组，它可以接收一到两个参数，即要返回项的起始和结束位置。</li>\n<li>splice()方法可以向数组中部插入项，并会对原始数组产生影响，返回一个数组。该返回的数组中包含原始数组中删除的项。用法如下：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//删除前两项</span><br><span class=\"line\">array.splice(0,2);</span><br><span class=\"line\">//从位置2开始插入字符串</span><br><span class=\"line\">array.splice(2,0,&quot;red&quot;,&quot;green&quot;);</span><br><span class=\"line\">//删除位置2的项并从位置2开始插入字符串</span><br><span class=\"line\">array.splice(2,1,&quot;red&quot;,&quot;green&quot;);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"7、位置方法\"><a href=\"#7、位置方法\" class=\"headerlink\" title=\"7、位置方法\"></a>7、位置方法</h2><ol>\n<li>indexOf()方法从数组的开头向后查找，没找到返回-1。</li>\n<li>lastIndexOf()方法从数组的末尾向前查找，没找到返回-1。</li>\n</ol>\n<blockquote>\n<p>注：indexOf()和lastIndexOf()在查找时使用的是全等操作符===。</p>\n</blockquote>\n<h2 id=\"8、迭代方法\"><a href=\"#8、迭代方法\" class=\"headerlink\" title=\"8、迭代方法\"></a>8、迭代方法</h2><ol>\n<li>every()方法对数组中的每一项运行给定函数，如果该函数对每一项都返回true，则返回true。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var num = &#123;1,1,1,1,1,1&#125;;</span><br><span class=\"line\">var result = num.every(function(item, index, array)&#123;</span><br><span class=\"line\">    return (item &gt; 2);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">alert(result); // false</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>filter()方法对数组中的每一项运行给定函数，返回该函数会<strong>返回true的项</strong>所组成的数组(过滤)。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var num = &#123;1,2,3,4,5,1&#125;;</span><br><span class=\"line\">var result = num.filter(function(item, index, array)&#123;</span><br><span class=\"line\">    return (item &gt; 2);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">alert(result); // [3,4,5]</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>forEach()方法对数组中每一项运行给定函数，没有返回值，会对原始数组产生影响。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var num = [1,1,1,1,1];</span><br><span class=\"line\">num.forEach(function(item, index, array)&#123;</span><br><span class=\"line\">    // something happens</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>map()方法对数组中每一项运行给定函数，返回每次函数调用的结果组成的数组(批量操作)。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var num = [11,1,1,1,1];</span><br><span class=\"line\">var result = num.map(function(item, index, array)&#123;</span><br><span class=\"line\">    return item * 2;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">alert(result); // [22,2,2,2,2]</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>some()方法对数组中每一项运行给定函数，如果该函数对任一项返回true，则返回true。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var num = [1,2,1,1];</span><br><span class=\"line\">var result = num.some(function(item, index, array)&#123;</span><br><span class=\"line\">    return item &gt; 2;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">alert(result); // true</span><br></pre></td></tr></table></figure>\n<h2 id=\"9、归并方法\"><a href=\"#9、归并方法\" class=\"headerlink\" title=\"9、归并方法\"></a>9、归并方法</h2><ol>\n<li>reduce()方法会从第一项开始，逐个遍历到最后，迭代数组所有项，然后构建一个最终返回值。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var values = [1,2,3,4,5];</span><br><span class=\"line\">var sum = values.reduce(function(prev, cur, index, array)&#123;</span><br><span class=\"line\">    // prev表示前面的累加值</span><br><span class=\"line\">    return prev + cur;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">alert(sum); // 15</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>reduceRight()方法会从最后一项开始，向前遍历到第一项，迭代数组所有项，然后构建一个最终返回值。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var values = [1,2,3,4,5];</span><br><span class=\"line\">var sum = values.reduceRight(function(prev, cur, index, array)&#123;</span><br><span class=\"line\">    // prev表示前面的累加值</span><br><span class=\"line\">    return prev + cur;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">alert(sum); // 15</span><br></pre></td></tr></table></figure>\n<h1 id=\"Date类型\"><a href=\"#Date类型\" class=\"headerlink\" title=\"Date类型\"></a>Date类型</h1><p>创建日期对象<code>var date = new Date();</code><br>新创建的日期对象在不传入参数的前提下，自动获得当前的日期和时间。<br>ECMAScript提供了两个返回毫秒值的方法：</p>\n<ol>\n<li>Date.parse()方法：接收一个表示日期的字符串，如果传入的字符串不能表示日期，则返回NaN。</li>\n<li>Date.UTC()方法：接收的第一个参数是年份，第二个参数是基于0的月份，第三个是月中哪一天，第四个是小时数(0到23)，最后两个是分钟和毫秒数。例如：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var time = new Date(Date.UTC(2000, 0));// 2000年1月1日午夜零时</span><br></pre></td></tr></table></figure>\n<p>ECMAScript5中提供了Date.now()方法，返回表示调用这个方法时的日期和时间的毫秒数，我们可以借用这个方法来获得时间戳，如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var start = Date.now();</span><br><span class=\"line\">var stop = Date.now();</span><br><span class=\"line\">var res = start - stop;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1、继承的方法\"><a href=\"#1、继承的方法\" class=\"headerlink\" title=\"1、继承的方法\"></a>1、继承的方法</h2><p>Date类型也重写了toLocaleString()、toString()和valueOf()方法，着重说下valueOf()方法，该方法不返回字符串，而是返回日期的毫秒值，因此可以使用比较操作符来比较日期。</p>\n<h2 id=\"2、日期格式化方法\"><a href=\"#2、日期格式化方法\" class=\"headerlink\" title=\"2、日期格式化方法\"></a>2、日期格式化方法</h2><ol>\n<li>toDateString()方法：以特定的格式显示星期几、月、日和年。</li>\n<li>toTimeString()方法：以特定的格式显示时、分、秒和时区。</li>\n<li>toLocaleDateString()方法：以特定的地区格式显示星期几、月、日和年。</li>\n<li>toLocaleTimeString()方法：以特定的地区格式显示时、分、秒。</li>\n<li>toUTCString()方法：以特定的格式显示完整的UTC日期。</li>\n</ol>\n<h2 id=\"3、日期-时间组件方法\"><a href=\"#3、日期-时间组件方法\" class=\"headerlink\" title=\"3、日期/时间组件方法\"></a>3、日期/时间组件方法</h2><p>常用的几个：</p>\n<ol>\n<li>getTime()方法：返回日期的毫秒数，与valueOf()方法返回相同。</li>\n<li>setTime()方法：以毫秒数设置日期。</li>\n<li>getDate()方法：返回月份中的天数。</li>\n<li>getDay()方法：获得星期几(0表示周日)。</li>\n<li>getFullYear()方法：返回4位数的年份。</li>\n</ol>\n<h1 id=\"RegExp类型\"><a href=\"#RegExp类型\" class=\"headerlink\" title=\"RegExp类型\"></a>RegExp类型</h1><p>创建一个正则表达式<code>var expression = /pattern/flags</code><br>flags有三个标志：</p>\n<ol>\n<li>g：表示全局模式，即模式将被应用于所有字符串。</li>\n<li>i：表示不区分大小写模式。</li>\n<li>m：表示多行模式，即在到达一行文本末尾时还会继续查找下一行中是否存在于模式匹配的项。<br>示例如下:</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 匹配字符串中所有&apos;at&apos;的实例</span><br><span class=\"line\">var pattern1 = /at/g;</span><br><span class=\"line\">// 匹配第一个&apos;bat&apos;或&apos;cat&apos;，不区分大小写</span><br><span class=\"line\">var pattern2 = /[bc]at/i;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注：使用字面量创建正则表达式不需要加引号，正则表达式中所有的元字符都必须使用\\转义。 </p>\n</blockquote>\n<h2 id=\"1、RegExp实例属性\"><a href=\"#1、RegExp实例属性\" class=\"headerlink\" title=\"1、RegExp实例属性\"></a>1、RegExp实例属性</h2><ol>\n<li>global:布尔值，是否设置了g标志。</li>\n<li>ignoreCase:布尔值，是否设置了i标志。</li>\n<li>lastIndex:整数，表示开始搜索下一个匹配项的字符位置，从0算起。</li>\n<li>multiline:布尔值，是否设置了m标志</li>\n<li>source:正则表达式的字符串表示，按照字面量形式而非传入构造函数中的字符串模式返回。<br>例如：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var pattern =/\\[bc\\]at/i;</span><br><span class=\"line\">console.log(pattern.global); // false</span><br><span class=\"line\">console.log(pattern.ingoreCase); // true</span><br><span class=\"line\">console.log(pattern.lastIndex); // 0</span><br><span class=\"line\">console.log(pattern.multiline); // false</span><br><span class=\"line\">console.log(pattern,source); // &quot;\\[bc\\]at&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2、RegExp实例方法\"><a href=\"#2、RegExp实例方法\" class=\"headerlink\" title=\"2、RegExp实例方法\"></a>2、RegExp实例方法</h2><ol>\n<li>exec()方法：接受一个参数，即要进行捕获的字符串，返回包含第一个匹配项信息的数组，如果没有匹配项则返回null。<br>例如：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var text = &quot;mom and dad and baby&quot;;</span><br><span class=\"line\">var pattern = /mom( and dad( and baby)?)?/gi;</span><br><span class=\"line\">var matches = pattern.exec(text);</span><br><span class=\"line\">console.log(matches[0]); // &quot;mom and dad and baby&quot;</span><br><span class=\"line\">console.log(matches[1]); // &quot;and dad and baby&quot;</span><br><span class=\"line\">console.log(matches[2]); // &quot;and baby&quot;</span><br></pre></td></tr></table></figure>\n<p>对于exec()，即使在模式中设置了全局标志，它每次也只返回一个匹配项，<strong>在不设置全局标志的情况下，在同一字符串上多次调用exec()将始终返回第一个匹配项</strong>。如果设置了全局标志，每次调用exec()则都会在字符串中继续查找新的匹配项。如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var text = &quot;cat bat sat fat&quot;;</span><br><span class=\"line\">var pattern = /.at/gi;</span><br><span class=\"line\">var matches = pattern.exec(text);</span><br><span class=\"line\">console.log(matches[0]); // cat</span><br><span class=\"line\">matches = pattern.exec(text);</span><br><span class=\"line\">console.log(matches[0]); // bat</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li><p>test()方法：接受一个字符串，如果该字符串参数与模式相匹配返回true，否则返回false。经常被用在if语句中，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var text = &quot;000-00-0000&quot;;</span><br><span class=\"line\">var pattern = /\\d&#123;3&#125;-\\d&#123;2&#125;-\\d&#123;4&#125;/;</span><br><span class=\"line\">if(pattern.test(text))&#123;</span><br><span class=\"line\">    console.log(&quot;text is text&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>toLocaleString()与toString()方法：返回正则表达式的字面量形式的字符串。</p>\n</li>\n<li>valueOf()方法：返回正则表达式本身。</li>\n</ol>\n<h2 id=\"3、RegExp构造函数属性\"><a href=\"#3、RegExp构造函数属性\" class=\"headerlink\" title=\"3、RegExp构造函数属性\"></a>3、RegExp构造函数属性</h2><h2 id=\"4、模式的局限性\"><a href=\"#4、模式的局限性\" class=\"headerlink\" title=\"4、模式的局限性\"></a>4、模式的局限性</h2><h1 id=\"Function类型\"><a href=\"#Function类型\" class=\"headerlink\" title=\"Function类型\"></a>Function类型</h1><p>函数实际上就是对象，每个函数都是Function的实例。由于函数是对象，所以函数名是指向函数对象的指针，声明一个函数有三种方式：</p>\n<ol>\n<li><p>函数声明：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function sum(num1, num2)&#123;</span><br><span class=\"line\">    return num1 + num2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>函数表达式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var sum = function(num1, num2)&#123;</span><br><span class=\"line\">    return num1 + num2;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>构造函数(不推荐)：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var sum = new Function(&quot;num1&quot;, &quot;num2&quot;, &quot;return num1 + num2&quot;);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"1、没有重载\"><a href=\"#1、没有重载\" class=\"headerlink\" title=\"1、没有重载\"></a>1、没有重载</h2><p>由于函数名是指针，所有创建相同的函数名会覆盖前面所创建的函数名。</p>\n<h2 id=\"2、函数声明与函数表达式\"><a href=\"#2、函数声明与函数表达式\" class=\"headerlink\" title=\"2、函数声明与函数表达式\"></a>2、函数声明与函数表达式</h2><p>解析器会率先读取函数声明，并使其在执行任何代码之前可用(提升机制)；至于函数表达式，则必须等到解析器执行到它所在的代码行，才会被真正的解释执行。<br>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(sum(1,1));// 可以执行</span><br><span class=\"line\">function sum(num1, num2)&#123;</span><br><span class=\"line\">    return num1 + num2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">alert(sum1(1,1)); // 会产生错误</span><br><span class=\"line\">var sum1 = function(num1, num2)&#123;</span><br><span class=\"line\">    return num1 + num2;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3、作为值的函数\"><a href=\"#3、作为值的函数\" class=\"headerlink\" title=\"3、作为值的函数\"></a>3、作为值的函数</h2><p>因为函数名本身是变量，所以函数也可作为值来使用，如下所示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function callSomeFunction(someFunction, someArgument)&#123;</span><br><span class=\"line\">    return someFunction(someArgument);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function add10(num)&#123;</span><br><span class=\"line\">    return num + 10;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var result = callSomeFunction(add10, 10);</span><br><span class=\"line\">console.log(result); // 20</span><br></pre></td></tr></table></figure></p>\n<p>我们可以用函数中返回另一个函数这种技术来为对象数组排序，如下所示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function createComparisonFunction(propertyName)&#123;</span><br><span class=\"line\">    return function(object1, object2)&#123;</span><br><span class=\"line\">        var value1 = object1[propertyName];</span><br><span class=\"line\">        var value2 = object2[propertyName];</span><br><span class=\"line\">        if(value1 &lt; value2)&#123;</span><br><span class=\"line\">            return -1;</span><br><span class=\"line\">        &#125;else if(value1 &gt; value2)&#123;</span><br><span class=\"line\">            return 1;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            return 0;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var data = [&#123;name: &quot;zhang&quot;, age: 18&#125;, &#123;name: &quot;li&quot;, age: 19&#125;];</span><br><span class=\"line\">date.sort(createComparisonFunction(name));</span><br><span class=\"line\">alert(data[0].name); // li</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4、函数的内部属性\"><a href=\"#4、函数的内部属性\" class=\"headerlink\" title=\"4、函数的内部属性\"></a>4、函数的内部属性</h2><p>函数的内部有两个特殊的对象：arguments和this。</p>\n<ol>\n<li><p>arguments对象：类数组对象，包含着传入函数的所有参数，还有一个callee属性，该属性是一个指针，指向拥有这个arguments对象的函数。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function factorial(num)&#123;</span><br><span class=\"line\">    if(num &lt;= 1)&#123;</span><br><span class=\"line\">        return 1;</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        return num * arguments.callee(num - 1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>this对象：函数执行的环境对象，全局函数this对象的引用就是window。</p>\n</li>\n<li>caller对象：保存着调用当前函数的引用，如果是在全局作用域中调用当前函数，则它的值为null。</li>\n</ol>\n<h2 id=\"5、函数属性和方法\"><a href=\"#5、函数属性和方法\" class=\"headerlink\" title=\"5、函数属性和方法\"></a>5、函数属性和方法</h2><ol>\n<li><p>length属性：表示函数希望接受命名参数的个数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function sayName(name)&#123;</span><br><span class=\"line\">    alert(name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(sayName.length); // 1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>prototype属性：保存所有实例方法，例如toString()、valueOf()等。</p>\n</li>\n<li><p>apply()方法：设置函数体内this的值，接收两个参数，第一个为运行函数的作用域，第二个为参数数组，也可以为arguments对象。例如:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function sum(num1, num2)&#123;</span><br><span class=\"line\">    return num1 + num2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function callSum(num1, num2)&#123;</span><br><span class=\"line\">    return sum.apply(this, [num1, num2]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(callSum()); // 20</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>call()方法：与apply类型，但接收参数不同，第一个为this值，其余参数必须逐个列举出来，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function sum(num1, num2)&#123;</span><br><span class=\"line\">    return num1 + num2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function callSum(num1, num2)&#123;</span><br><span class=\"line\">    return sum.call(this, num1, num2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">alert(callSum(10, 10)); // 20</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>bind()方法：创建一个函数的实例，其this值会被绑定到传给bind()函数的值，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.color = &quot;red&quot;;</span><br><span class=\"line\">var o = &#123;</span><br><span class=\"line\">    color: &quot;blue&quot;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">function sayColor()&#123;</span><br><span class=\"line\">    alert(this.color);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var objectSayColor = sayColor.bind(o);</span><br><span class=\"line\">objectSayColor(); // blue</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"基本包装类型\"><a href=\"#基本包装类型\" class=\"headerlink\" title=\"基本包装类型\"></a>基本包装类型</h1><p>基本包装类型与引用类型的区别在于对象的生存期，引用类型的实例在执行流离开当前作用域之前一直保存在内存中，而基本包装类型在内存中存只存在执行声明时的一瞬间，然后被立即销毁，所以基本包装类型不能在运行时添加属性和方法。</p>\n<h2 id=\"1、Boolean类型\"><a href=\"#1、Boolean类型\" class=\"headerlink\" title=\"1、Boolean类型\"></a>1、Boolean类型</h2><p>建议永远不要使用<br>基本类型和引用类型的布尔值有两个区别：</p>\n<ol>\n<li>typeof对基本类型使用返回”boolean”，而对引用类型返回”object”。</li>\n<li>instanceof测试Boolean会返回true，而测试基本类型会返回false。</li>\n</ol>\n<h2 id=\"2、Number类型\"><a href=\"#2、Number类型\" class=\"headerlink\" title=\"2、Number类型\"></a>2、Number类型</h2><p>toFixed()方法：按照指定小数位返回数值的字符串表示，适合处理货币值。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var num = 10;</span><br><span class=\"line\">console.log(num.toFixed(2)); // &quot;10.00&quot;</span><br></pre></td></tr></table></figure></p>\n<p>toPrecision()方法：返回固定大小格式，接收一个参数，该参数为表示所以数值位数，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var num = 99;</span><br><span class=\"line\">alert(num.toPrecision(1)); // &quot;1e+2&quot;</span><br><span class=\"line\">alert(num.toPrecision(2)); // &quot;99&quot;</span><br><span class=\"line\">alert(num.toPrecision(3)); // &quot;99.0&quot;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3、String类型\"><a href=\"#3、String类型\" class=\"headerlink\" title=\"3、String类型\"></a>3、String类型</h2><p>字符串的对象包装类型，有length属性，表示字符串中多少个字符数。</p>\n<ol>\n<li>字符方法：charAt()接收一个参数返回指定位置的字符，charCodeAt()接收一个参数返回指定位置的字符编码。charAt()可以被字符串加方括号的形式代替(string[?])。</li>\n<li><p>字符串操作方法：concat()将一个或多个字符串拼接起来，返回拼接得到的新字符串，推荐使用+拼接字符串。slice(开始位置，结束位置)，substring(开始位置，结束位置)，substr(开始位置，截取个数)。如果传入的参数是负值，则slice()会将负值与字符串长度相加；substr()将负的第一个参数加上字符串长度，将负的第二个参数转换为0；substring()会把所有的负值转换为0.例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str = &quot;hello world&quot;;</span><br><span class=\"line\">alert(str.slice(3)); // &quot;lo world&quot;</span><br><span class=\"line\">alert(str.substring(3)); // &quot;lo world&quot;</span><br><span class=\"line\">alert(str.substr(3)); // &quot;lo world&quot;</span><br><span class=\"line\">alert(str.slice(3, 7)); // &quot;lo w&quot;</span><br><span class=\"line\">alert(str.substring(3, 7)); // &quot;lo w&quot;</span><br><span class=\"line\">alert(str.substr(3, 7)); // &quot;lo worl&quot;</span><br><span class=\"line\">alert(str.slice(-3)); // &quot;rld&quot;</span><br><span class=\"line\">alert(str.substring(-3)); // &quot;hello world&quot;</span><br><span class=\"line\">alert(str.substr(-3)); // &quot;rld&quot;</span><br><span class=\"line\">alert(str.slice(3, -4)); // &quot;lo w&quot;</span><br><span class=\"line\">alert(str.substring(3, -4)); // &quot;hel&quot;</span><br><span class=\"line\">alert(str.substr(3, -4)); // &quot;&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>字符串位置方法：indexOf()从开头搜索返回搜索到的子字符串位置，lastIndexOf()从末尾搜索返回搜索到子字符串的位置。这两个方法都接收可选的第二个参数，表示从字符串中哪个位置开始搜索。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str = &quot;hello world&quot;;</span><br><span class=\"line\">alert(str.index(&quot;o&quot;, 6)) // 7</span><br><span class=\"line\">alert(str.lastIndexOf(&quot;o&quot;, 6)) // 4</span><br><span class=\"line\"></span><br><span class=\"line\">var string = &quot;Lorem ipsum dolor sit amet, constectetur adipisicing elit&quot;;</span><br><span class=\"line\">var positions = new Array();</span><br><span class=\"line\">var pos = string.indexOf(&quot;e&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">while(pos &gt; 1)&#123;</span><br><span class=\"line\">    positions.push(pos);</span><br><span class=\"line\">    pos = string.indexOf(&quot;e&quot;,pos + 1);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>trim()方法：创建一个字符串副本，删除前置及后缀所有空格，返回字符串副本。</p>\n</li>\n<li>字符串大小写转换方法：toLowerCase()和toUpperCase()，还有两个针对地区的大小写转换方法toLocaleLowerCase()和toLocaleUpperCase()。</li>\n<li><p>字符串的模式匹配方法：match()方法接收一个正则表达式参数，返回一个字符串捕获数组。<br>search()方法接收一个正则表达式参数，返回字符串中第一个匹配的索引项。replace()方法接收两个参数，第一个参数可以是字符串或正则表达式，第二个参数可以是一个字符串或一个函数，并返回一个新字符串。split()方法接收一个分隔符，将字符串分割成字符数组返回，还可以接收第二个参数，用于指定分割数组的大小。这四个方法示例如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str = &quot;hello world&quot;;</span><br><span class=\"line\">alert(str.toUpperCase()); // &quot;HELLO WORLD&quot;</span><br><span class=\"line\">alert(str.toLowerCase()); // &quot;hello world&quot;</span><br><span class=\"line\">alert(str.toLocaleUpperCase()); // &quot;HELLO WORLD&quot;</span><br><span class=\"line\">alert(str.toLocaleLowerCase()); // &quot;hello world&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">var text = &quot;cat bat sat fat&quot;;</span><br><span class=\"line\">var matches = text.match(/.at/);</span><br><span class=\"line\">console.log(matches[0]); // &quot;cat&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">var result = text.replace(&quot;at&quot;, &quot;end&quot;);</span><br><span class=\"line\">console.log(result); // &quot;cond bat sat fat&quot;</span><br><span class=\"line\">result = text.replace(/at/g &quot;ond&quot;);</span><br><span class=\"line\">console.log(result); // &quot;cond bond sond fond&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">function htmlEscape(text)&#123;</span><br><span class=\"line\">    return text.replace(/[&lt;&gt;&quot;&amp;]/g, function(match, pos, originalText)&#123;</span><br><span class=\"line\">        // match为匹配项</span><br><span class=\"line\">        switch(match)&#123;</span><br><span class=\"line\">            case &quot;&lt;&quot;:</span><br><span class=\"line\">                return &quot;&amp;lt&quot;;</span><br><span class=\"line\">            case &quot;&gt;&quot;:</span><br><span class=\"line\">                return &quot;&amp;gt&quot;;</span><br><span class=\"line\">            case &quot;&amp;&quot;:</span><br><span class=\"line\">                return &quot;&amp;amp&quot;;</span><br><span class=\"line\">            case &quot;&lt;&quot;:</span><br><span class=\"line\">                return &quot;&amp;quot&quot;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var test = &quot;red,blue,black&quot;;</span><br><span class=\"line\">var arr = test.split(&quot;,&quot;, 2);</span><br><span class=\"line\">alert(arr); // [&quot;red&quot;, &quot;blue&quot;]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>localeCompare()方法：比较两个字符串，返回-1、0和1，返回值取决于比较参数。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str = &quot;yellow&quot;;</span><br><span class=\"line\">alert(str.localeCompare(&quot;brick&quot;)); // 1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>fromCharCode()方法：字符串的静态方法，根据一个或多个编码返回字符串。</p>\n</li>\n<li>HTML方法：尽量不使用。</li>\n</ol>\n<h1 id=\"单体内置对象\"><a href=\"#单体内置对象\" class=\"headerlink\" title=\"单体内置对象\"></a>单体内置对象</h1><h2 id=\"1、Global对象\"><a href=\"#1、Global对象\" class=\"headerlink\" title=\"1、Global对象\"></a>1、Global对象</h2><ol>\n<li><p>URI编码方法：encodeURI()和encodeURIComponent()对URI进行编码，encodeURI()用于整个URI，不会对本身属于URI的特殊字符进行编码，例如冒号、正斜杠、问号和井字号。encodeURIComponent()用于URI中的某一段进行编码，会对它发现的任何非标准字符进行编码。与这两个方法与之相对就是decodeURI()和decodeURIComponent()这两个解码方法。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var uri = &quot;http://www.wrox.com/illegal value.htm#start&quot;;</span><br><span class=\"line\">alert(encodeURI(uri)); // &quot;http://www.wrox.com/illegal%20value.htm#start&quot;</span><br><span class=\"line\">alert(encodeURIComponent(uri)); // &quot;http%3A%2F%2Fwww.wrox.com%2Fillegal%20..&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>eval()方法：慎用！</p>\n</li>\n<li>Global对象的属性：undefined NaN Infinity Object Array Function Boolean String Number Date RegExp Error EvalError RangeError ReferenceError SyntaxError TypeError URIError</li>\n<li>window对象：在浏览器中将Global对象作为window对象的一部分加以实现。</li>\n</ol>\n<h2 id=\"2、Math对象\"><a href=\"#2、Math对象\" class=\"headerlink\" title=\"2、Math对象\"></a>2、Math对象</h2><ol>\n<li>Math对象常用属性：Math.PI圆周率的值。</li>\n<li><p>min()和max()方法：确定一组数据的最大最下值。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var min = Math.min(1,2,3,4);</span><br><span class=\"line\">alert(min); // 1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>舍入方法：Math.ceil()向上取整，Math.floor()向下取整，Math.round()四舍五入。</p>\n</li>\n<li><p>random()方法：返回大于等于0小于1的一个随机数。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var num = Math.floor(Math.random() * 10 + 5); // 返回5-10的随机数</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>其他方法：Math.abs()取绝对值，Math.sqrt()取平方根。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Object类型\"><a href=\"#Object类型\" class=\"headerlink\" title=\"Object类型\"></a>Object类型</h1><p>引用类型是一种数据结构，用于将数据和功能组织在一起。<br>我们看到的绝大多数的类型值都是Object类型的实例，创建Object实例的方式有两种：</p>\n<ol>\n<li>new操作符跟Object构造函数 <code>var person = new Object();</code></li>\n<li>对象字面量表示法 <code>var person = {};</code></li>\n</ol>\n<blockquote>\n<p>注：通过字面量定义对象时，实际上不会调用Object的构造函数。</p>\n</blockquote>\n<p>访问对象属性方法有两种：</p>\n<ol>\n<li>点表示法(推荐) <code>person.name</code></li>\n<li>方括号表示法 <code>person[&quot;name&quot;]</code></li>\n</ol>\n<h1 id=\"Array类型\"><a href=\"#Array类型\" class=\"headerlink\" title=\"Array类型\"></a>Array类型</h1><p>数组也是对象的一种，有两种创建方式：</p>\n<ol>\n<li>使用Array的构造函数</li>\n<li>字面量表示法(推荐)</li>\n</ol>\n<blockquote>\n<p>注：数组的length属性不是只读的，可以调用Array.length移除元素或向数组中添加新项。 </p>\n</blockquote>\n<h2 id=\"1、检测数组\"><a href=\"#1、检测数组\" class=\"headerlink\" title=\"1、检测数组\"></a>1、检测数组</h2><p>Array.isArray()方法，返回true或false。</p>\n<h2 id=\"2、转换方法\"><a href=\"#2、转换方法\" class=\"headerlink\" title=\"2、转换方法\"></a>2、转换方法</h2><ol>\n<li>toString()方法返回数组中的每一项以逗号拼接而成的字符串。</li>\n<li>valueOf()方法返回的是数组本身。</li>\n<li>toLocaleString()方法与toString()相同，只不过返回的是每一项调用toLocaleString()的返回值。</li>\n<li>join()方法使用指定的分隔符来构建字符串。例如：array.join(“|”);如果join的传入值为空或为undefined，则默认使用逗号作为分隔符。</li>\n</ol>\n<h2 id=\"3、栈方法\"><a href=\"#3、栈方法\" class=\"headerlink\" title=\"3、栈方法\"></a>3、栈方法</h2><ol>\n<li>push()方法可以接收任意数量的参数，并把它们添加到数组末尾，返回修改后数组的长度(进栈方法)。</li>\n<li>pop()方法可以从数组末尾移除一项，并返回移除的项(出栈方法)。</li>\n</ol>\n<h2 id=\"4、队列方法\"><a href=\"#4、队列方法\" class=\"headerlink\" title=\"4、队列方法\"></a>4、队列方法</h2><ol>\n<li>shift()方法移除数组第一项并返回该项(出队方法)。</li>\n<li>unshift()方法向数组前端添加任意项并返回新数组的长度(入队方法)。</li>\n</ol>\n<h2 id=\"5、重排序方法\"><a href=\"#5、重排序方法\" class=\"headerlink\" title=\"5、重排序方法\"></a>5、重排序方法</h2><ol>\n<li>reverse()方法会反转数组项的顺序。</li>\n<li>sort()方法在默认情况下按升序排列数组，比较的是字符串，sort()方法还可以传入一个比较函数来自定义比较顺序。</li>\n</ol>\n<blockquote>\n<p>注：reverse()和sort()的返回值是经过排序后的数组。</p>\n</blockquote>\n<h2 id=\"6、操作方法\"><a href=\"#6、操作方法\" class=\"headerlink\" title=\"6、操作方法\"></a>6、操作方法</h2><ol>\n<li>concat()方法可以基于当前数组中的所有项创建一个新数组，这个方法会先创建当前数组的副本，然后将接收到的参数添加到这个副本的末尾。</li>\n<li>slice()方法基于当前数组中的一个或多个项创建一个新数组，slice()不会影响原数组，它可以接收一到两个参数，即要返回项的起始和结束位置。</li>\n<li>splice()方法可以向数组中部插入项，并会对原始数组产生影响，返回一个数组。该返回的数组中包含原始数组中删除的项。用法如下：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//删除前两项</span><br><span class=\"line\">array.splice(0,2);</span><br><span class=\"line\">//从位置2开始插入字符串</span><br><span class=\"line\">array.splice(2,0,&quot;red&quot;,&quot;green&quot;);</span><br><span class=\"line\">//删除位置2的项并从位置2开始插入字符串</span><br><span class=\"line\">array.splice(2,1,&quot;red&quot;,&quot;green&quot;);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"7、位置方法\"><a href=\"#7、位置方法\" class=\"headerlink\" title=\"7、位置方法\"></a>7、位置方法</h2><ol>\n<li>indexOf()方法从数组的开头向后查找，没找到返回-1。</li>\n<li>lastIndexOf()方法从数组的末尾向前查找，没找到返回-1。</li>\n</ol>\n<blockquote>\n<p>注：indexOf()和lastIndexOf()在查找时使用的是全等操作符===。</p>\n</blockquote>\n<h2 id=\"8、迭代方法\"><a href=\"#8、迭代方法\" class=\"headerlink\" title=\"8、迭代方法\"></a>8、迭代方法</h2><ol>\n<li>every()方法对数组中的每一项运行给定函数，如果该函数对每一项都返回true，则返回true。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var num = &#123;1,1,1,1,1,1&#125;;</span><br><span class=\"line\">var result = num.every(function(item, index, array)&#123;</span><br><span class=\"line\">    return (item &gt; 2);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">alert(result); // false</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>filter()方法对数组中的每一项运行给定函数，返回该函数会<strong>返回true的项</strong>所组成的数组(过滤)。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var num = &#123;1,2,3,4,5,1&#125;;</span><br><span class=\"line\">var result = num.filter(function(item, index, array)&#123;</span><br><span class=\"line\">    return (item &gt; 2);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">alert(result); // [3,4,5]</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>forEach()方法对数组中每一项运行给定函数，没有返回值，会对原始数组产生影响。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var num = [1,1,1,1,1];</span><br><span class=\"line\">num.forEach(function(item, index, array)&#123;</span><br><span class=\"line\">    // something happens</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>map()方法对数组中每一项运行给定函数，返回每次函数调用的结果组成的数组(批量操作)。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var num = [11,1,1,1,1];</span><br><span class=\"line\">var result = num.map(function(item, index, array)&#123;</span><br><span class=\"line\">    return item * 2;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">alert(result); // [22,2,2,2,2]</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>some()方法对数组中每一项运行给定函数，如果该函数对任一项返回true，则返回true。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var num = [1,2,1,1];</span><br><span class=\"line\">var result = num.some(function(item, index, array)&#123;</span><br><span class=\"line\">    return item &gt; 2;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">alert(result); // true</span><br></pre></td></tr></table></figure>\n<h2 id=\"9、归并方法\"><a href=\"#9、归并方法\" class=\"headerlink\" title=\"9、归并方法\"></a>9、归并方法</h2><ol>\n<li>reduce()方法会从第一项开始，逐个遍历到最后，迭代数组所有项，然后构建一个最终返回值。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var values = [1,2,3,4,5];</span><br><span class=\"line\">var sum = values.reduce(function(prev, cur, index, array)&#123;</span><br><span class=\"line\">    // prev表示前面的累加值</span><br><span class=\"line\">    return prev + cur;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">alert(sum); // 15</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>reduceRight()方法会从最后一项开始，向前遍历到第一项，迭代数组所有项，然后构建一个最终返回值。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var values = [1,2,3,4,5];</span><br><span class=\"line\">var sum = values.reduceRight(function(prev, cur, index, array)&#123;</span><br><span class=\"line\">    // prev表示前面的累加值</span><br><span class=\"line\">    return prev + cur;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">alert(sum); // 15</span><br></pre></td></tr></table></figure>\n<h1 id=\"Date类型\"><a href=\"#Date类型\" class=\"headerlink\" title=\"Date类型\"></a>Date类型</h1><p>创建日期对象<code>var date = new Date();</code><br>新创建的日期对象在不传入参数的前提下，自动获得当前的日期和时间。<br>ECMAScript提供了两个返回毫秒值的方法：</p>\n<ol>\n<li>Date.parse()方法：接收一个表示日期的字符串，如果传入的字符串不能表示日期，则返回NaN。</li>\n<li>Date.UTC()方法：接收的第一个参数是年份，第二个参数是基于0的月份，第三个是月中哪一天，第四个是小时数(0到23)，最后两个是分钟和毫秒数。例如：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var time = new Date(Date.UTC(2000, 0));// 2000年1月1日午夜零时</span><br></pre></td></tr></table></figure>\n<p>ECMAScript5中提供了Date.now()方法，返回表示调用这个方法时的日期和时间的毫秒数，我们可以借用这个方法来获得时间戳，如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var start = Date.now();</span><br><span class=\"line\">var stop = Date.now();</span><br><span class=\"line\">var res = start - stop;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1、继承的方法\"><a href=\"#1、继承的方法\" class=\"headerlink\" title=\"1、继承的方法\"></a>1、继承的方法</h2><p>Date类型也重写了toLocaleString()、toString()和valueOf()方法，着重说下valueOf()方法，该方法不返回字符串，而是返回日期的毫秒值，因此可以使用比较操作符来比较日期。</p>\n<h2 id=\"2、日期格式化方法\"><a href=\"#2、日期格式化方法\" class=\"headerlink\" title=\"2、日期格式化方法\"></a>2、日期格式化方法</h2><ol>\n<li>toDateString()方法：以特定的格式显示星期几、月、日和年。</li>\n<li>toTimeString()方法：以特定的格式显示时、分、秒和时区。</li>\n<li>toLocaleDateString()方法：以特定的地区格式显示星期几、月、日和年。</li>\n<li>toLocaleTimeString()方法：以特定的地区格式显示时、分、秒。</li>\n<li>toUTCString()方法：以特定的格式显示完整的UTC日期。</li>\n</ol>\n<h2 id=\"3、日期-时间组件方法\"><a href=\"#3、日期-时间组件方法\" class=\"headerlink\" title=\"3、日期/时间组件方法\"></a>3、日期/时间组件方法</h2><p>常用的几个：</p>\n<ol>\n<li>getTime()方法：返回日期的毫秒数，与valueOf()方法返回相同。</li>\n<li>setTime()方法：以毫秒数设置日期。</li>\n<li>getDate()方法：返回月份中的天数。</li>\n<li>getDay()方法：获得星期几(0表示周日)。</li>\n<li>getFullYear()方法：返回4位数的年份。</li>\n</ol>\n<h1 id=\"RegExp类型\"><a href=\"#RegExp类型\" class=\"headerlink\" title=\"RegExp类型\"></a>RegExp类型</h1><p>创建一个正则表达式<code>var expression = /pattern/flags</code><br>flags有三个标志：</p>\n<ol>\n<li>g：表示全局模式，即模式将被应用于所有字符串。</li>\n<li>i：表示不区分大小写模式。</li>\n<li>m：表示多行模式，即在到达一行文本末尾时还会继续查找下一行中是否存在于模式匹配的项。<br>示例如下:</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 匹配字符串中所有&apos;at&apos;的实例</span><br><span class=\"line\">var pattern1 = /at/g;</span><br><span class=\"line\">// 匹配第一个&apos;bat&apos;或&apos;cat&apos;，不区分大小写</span><br><span class=\"line\">var pattern2 = /[bc]at/i;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注：使用字面量创建正则表达式不需要加引号，正则表达式中所有的元字符都必须使用\\转义。 </p>\n</blockquote>\n<h2 id=\"1、RegExp实例属性\"><a href=\"#1、RegExp实例属性\" class=\"headerlink\" title=\"1、RegExp实例属性\"></a>1、RegExp实例属性</h2><ol>\n<li>global:布尔值，是否设置了g标志。</li>\n<li>ignoreCase:布尔值，是否设置了i标志。</li>\n<li>lastIndex:整数，表示开始搜索下一个匹配项的字符位置，从0算起。</li>\n<li>multiline:布尔值，是否设置了m标志</li>\n<li>source:正则表达式的字符串表示，按照字面量形式而非传入构造函数中的字符串模式返回。<br>例如：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var pattern =/\\[bc\\]at/i;</span><br><span class=\"line\">console.log(pattern.global); // false</span><br><span class=\"line\">console.log(pattern.ingoreCase); // true</span><br><span class=\"line\">console.log(pattern.lastIndex); // 0</span><br><span class=\"line\">console.log(pattern.multiline); // false</span><br><span class=\"line\">console.log(pattern,source); // &quot;\\[bc\\]at&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2、RegExp实例方法\"><a href=\"#2、RegExp实例方法\" class=\"headerlink\" title=\"2、RegExp实例方法\"></a>2、RegExp实例方法</h2><ol>\n<li>exec()方法：接受一个参数，即要进行捕获的字符串，返回包含第一个匹配项信息的数组，如果没有匹配项则返回null。<br>例如：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var text = &quot;mom and dad and baby&quot;;</span><br><span class=\"line\">var pattern = /mom( and dad( and baby)?)?/gi;</span><br><span class=\"line\">var matches = pattern.exec(text);</span><br><span class=\"line\">console.log(matches[0]); // &quot;mom and dad and baby&quot;</span><br><span class=\"line\">console.log(matches[1]); // &quot;and dad and baby&quot;</span><br><span class=\"line\">console.log(matches[2]); // &quot;and baby&quot;</span><br></pre></td></tr></table></figure>\n<p>对于exec()，即使在模式中设置了全局标志，它每次也只返回一个匹配项，<strong>在不设置全局标志的情况下，在同一字符串上多次调用exec()将始终返回第一个匹配项</strong>。如果设置了全局标志，每次调用exec()则都会在字符串中继续查找新的匹配项。如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var text = &quot;cat bat sat fat&quot;;</span><br><span class=\"line\">var pattern = /.at/gi;</span><br><span class=\"line\">var matches = pattern.exec(text);</span><br><span class=\"line\">console.log(matches[0]); // cat</span><br><span class=\"line\">matches = pattern.exec(text);</span><br><span class=\"line\">console.log(matches[0]); // bat</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li><p>test()方法：接受一个字符串，如果该字符串参数与模式相匹配返回true，否则返回false。经常被用在if语句中，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var text = &quot;000-00-0000&quot;;</span><br><span class=\"line\">var pattern = /\\d&#123;3&#125;-\\d&#123;2&#125;-\\d&#123;4&#125;/;</span><br><span class=\"line\">if(pattern.test(text))&#123;</span><br><span class=\"line\">    console.log(&quot;text is text&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>toLocaleString()与toString()方法：返回正则表达式的字面量形式的字符串。</p>\n</li>\n<li>valueOf()方法：返回正则表达式本身。</li>\n</ol>\n<h2 id=\"3、RegExp构造函数属性\"><a href=\"#3、RegExp构造函数属性\" class=\"headerlink\" title=\"3、RegExp构造函数属性\"></a>3、RegExp构造函数属性</h2><h2 id=\"4、模式的局限性\"><a href=\"#4、模式的局限性\" class=\"headerlink\" title=\"4、模式的局限性\"></a>4、模式的局限性</h2><h1 id=\"Function类型\"><a href=\"#Function类型\" class=\"headerlink\" title=\"Function类型\"></a>Function类型</h1><p>函数实际上就是对象，每个函数都是Function的实例。由于函数是对象，所以函数名是指向函数对象的指针，声明一个函数有三种方式：</p>\n<ol>\n<li><p>函数声明：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function sum(num1, num2)&#123;</span><br><span class=\"line\">    return num1 + num2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>函数表达式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var sum = function(num1, num2)&#123;</span><br><span class=\"line\">    return num1 + num2;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>构造函数(不推荐)：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var sum = new Function(&quot;num1&quot;, &quot;num2&quot;, &quot;return num1 + num2&quot;);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"1、没有重载\"><a href=\"#1、没有重载\" class=\"headerlink\" title=\"1、没有重载\"></a>1、没有重载</h2><p>由于函数名是指针，所有创建相同的函数名会覆盖前面所创建的函数名。</p>\n<h2 id=\"2、函数声明与函数表达式\"><a href=\"#2、函数声明与函数表达式\" class=\"headerlink\" title=\"2、函数声明与函数表达式\"></a>2、函数声明与函数表达式</h2><p>解析器会率先读取函数声明，并使其在执行任何代码之前可用(提升机制)；至于函数表达式，则必须等到解析器执行到它所在的代码行，才会被真正的解释执行。<br>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(sum(1,1));// 可以执行</span><br><span class=\"line\">function sum(num1, num2)&#123;</span><br><span class=\"line\">    return num1 + num2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">alert(sum1(1,1)); // 会产生错误</span><br><span class=\"line\">var sum1 = function(num1, num2)&#123;</span><br><span class=\"line\">    return num1 + num2;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3、作为值的函数\"><a href=\"#3、作为值的函数\" class=\"headerlink\" title=\"3、作为值的函数\"></a>3、作为值的函数</h2><p>因为函数名本身是变量，所以函数也可作为值来使用，如下所示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function callSomeFunction(someFunction, someArgument)&#123;</span><br><span class=\"line\">    return someFunction(someArgument);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function add10(num)&#123;</span><br><span class=\"line\">    return num + 10;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var result = callSomeFunction(add10, 10);</span><br><span class=\"line\">console.log(result); // 20</span><br></pre></td></tr></table></figure></p>\n<p>我们可以用函数中返回另一个函数这种技术来为对象数组排序，如下所示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function createComparisonFunction(propertyName)&#123;</span><br><span class=\"line\">    return function(object1, object2)&#123;</span><br><span class=\"line\">        var value1 = object1[propertyName];</span><br><span class=\"line\">        var value2 = object2[propertyName];</span><br><span class=\"line\">        if(value1 &lt; value2)&#123;</span><br><span class=\"line\">            return -1;</span><br><span class=\"line\">        &#125;else if(value1 &gt; value2)&#123;</span><br><span class=\"line\">            return 1;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            return 0;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var data = [&#123;name: &quot;zhang&quot;, age: 18&#125;, &#123;name: &quot;li&quot;, age: 19&#125;];</span><br><span class=\"line\">date.sort(createComparisonFunction(name));</span><br><span class=\"line\">alert(data[0].name); // li</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4、函数的内部属性\"><a href=\"#4、函数的内部属性\" class=\"headerlink\" title=\"4、函数的内部属性\"></a>4、函数的内部属性</h2><p>函数的内部有两个特殊的对象：arguments和this。</p>\n<ol>\n<li><p>arguments对象：类数组对象，包含着传入函数的所有参数，还有一个callee属性，该属性是一个指针，指向拥有这个arguments对象的函数。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function factorial(num)&#123;</span><br><span class=\"line\">    if(num &lt;= 1)&#123;</span><br><span class=\"line\">        return 1;</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        return num * arguments.callee(num - 1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>this对象：函数执行的环境对象，全局函数this对象的引用就是window。</p>\n</li>\n<li>caller对象：保存着调用当前函数的引用，如果是在全局作用域中调用当前函数，则它的值为null。</li>\n</ol>\n<h2 id=\"5、函数属性和方法\"><a href=\"#5、函数属性和方法\" class=\"headerlink\" title=\"5、函数属性和方法\"></a>5、函数属性和方法</h2><ol>\n<li><p>length属性：表示函数希望接受命名参数的个数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function sayName(name)&#123;</span><br><span class=\"line\">    alert(name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(sayName.length); // 1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>prototype属性：保存所有实例方法，例如toString()、valueOf()等。</p>\n</li>\n<li><p>apply()方法：设置函数体内this的值，接收两个参数，第一个为运行函数的作用域，第二个为参数数组，也可以为arguments对象。例如:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function sum(num1, num2)&#123;</span><br><span class=\"line\">    return num1 + num2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function callSum(num1, num2)&#123;</span><br><span class=\"line\">    return sum.apply(this, [num1, num2]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(callSum()); // 20</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>call()方法：与apply类型，但接收参数不同，第一个为this值，其余参数必须逐个列举出来，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function sum(num1, num2)&#123;</span><br><span class=\"line\">    return num1 + num2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function callSum(num1, num2)&#123;</span><br><span class=\"line\">    return sum.call(this, num1, num2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">alert(callSum(10, 10)); // 20</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>bind()方法：创建一个函数的实例，其this值会被绑定到传给bind()函数的值，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.color = &quot;red&quot;;</span><br><span class=\"line\">var o = &#123;</span><br><span class=\"line\">    color: &quot;blue&quot;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">function sayColor()&#123;</span><br><span class=\"line\">    alert(this.color);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var objectSayColor = sayColor.bind(o);</span><br><span class=\"line\">objectSayColor(); // blue</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"基本包装类型\"><a href=\"#基本包装类型\" class=\"headerlink\" title=\"基本包装类型\"></a>基本包装类型</h1><p>基本包装类型与引用类型的区别在于对象的生存期，引用类型的实例在执行流离开当前作用域之前一直保存在内存中，而基本包装类型在内存中存只存在执行声明时的一瞬间，然后被立即销毁，所以基本包装类型不能在运行时添加属性和方法。</p>\n<h2 id=\"1、Boolean类型\"><a href=\"#1、Boolean类型\" class=\"headerlink\" title=\"1、Boolean类型\"></a>1、Boolean类型</h2><p>建议永远不要使用<br>基本类型和引用类型的布尔值有两个区别：</p>\n<ol>\n<li>typeof对基本类型使用返回”boolean”，而对引用类型返回”object”。</li>\n<li>instanceof测试Boolean会返回true，而测试基本类型会返回false。</li>\n</ol>\n<h2 id=\"2、Number类型\"><a href=\"#2、Number类型\" class=\"headerlink\" title=\"2、Number类型\"></a>2、Number类型</h2><p>toFixed()方法：按照指定小数位返回数值的字符串表示，适合处理货币值。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var num = 10;</span><br><span class=\"line\">console.log(num.toFixed(2)); // &quot;10.00&quot;</span><br></pre></td></tr></table></figure></p>\n<p>toPrecision()方法：返回固定大小格式，接收一个参数，该参数为表示所以数值位数，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var num = 99;</span><br><span class=\"line\">alert(num.toPrecision(1)); // &quot;1e+2&quot;</span><br><span class=\"line\">alert(num.toPrecision(2)); // &quot;99&quot;</span><br><span class=\"line\">alert(num.toPrecision(3)); // &quot;99.0&quot;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3、String类型\"><a href=\"#3、String类型\" class=\"headerlink\" title=\"3、String类型\"></a>3、String类型</h2><p>字符串的对象包装类型，有length属性，表示字符串中多少个字符数。</p>\n<ol>\n<li>字符方法：charAt()接收一个参数返回指定位置的字符，charCodeAt()接收一个参数返回指定位置的字符编码。charAt()可以被字符串加方括号的形式代替(string[?])。</li>\n<li><p>字符串操作方法：concat()将一个或多个字符串拼接起来，返回拼接得到的新字符串，推荐使用+拼接字符串。slice(开始位置，结束位置)，substring(开始位置，结束位置)，substr(开始位置，截取个数)。如果传入的参数是负值，则slice()会将负值与字符串长度相加；substr()将负的第一个参数加上字符串长度，将负的第二个参数转换为0；substring()会把所有的负值转换为0.例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str = &quot;hello world&quot;;</span><br><span class=\"line\">alert(str.slice(3)); // &quot;lo world&quot;</span><br><span class=\"line\">alert(str.substring(3)); // &quot;lo world&quot;</span><br><span class=\"line\">alert(str.substr(3)); // &quot;lo world&quot;</span><br><span class=\"line\">alert(str.slice(3, 7)); // &quot;lo w&quot;</span><br><span class=\"line\">alert(str.substring(3, 7)); // &quot;lo w&quot;</span><br><span class=\"line\">alert(str.substr(3, 7)); // &quot;lo worl&quot;</span><br><span class=\"line\">alert(str.slice(-3)); // &quot;rld&quot;</span><br><span class=\"line\">alert(str.substring(-3)); // &quot;hello world&quot;</span><br><span class=\"line\">alert(str.substr(-3)); // &quot;rld&quot;</span><br><span class=\"line\">alert(str.slice(3, -4)); // &quot;lo w&quot;</span><br><span class=\"line\">alert(str.substring(3, -4)); // &quot;hel&quot;</span><br><span class=\"line\">alert(str.substr(3, -4)); // &quot;&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>字符串位置方法：indexOf()从开头搜索返回搜索到的子字符串位置，lastIndexOf()从末尾搜索返回搜索到子字符串的位置。这两个方法都接收可选的第二个参数，表示从字符串中哪个位置开始搜索。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str = &quot;hello world&quot;;</span><br><span class=\"line\">alert(str.index(&quot;o&quot;, 6)) // 7</span><br><span class=\"line\">alert(str.lastIndexOf(&quot;o&quot;, 6)) // 4</span><br><span class=\"line\"></span><br><span class=\"line\">var string = &quot;Lorem ipsum dolor sit amet, constectetur adipisicing elit&quot;;</span><br><span class=\"line\">var positions = new Array();</span><br><span class=\"line\">var pos = string.indexOf(&quot;e&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">while(pos &gt; 1)&#123;</span><br><span class=\"line\">    positions.push(pos);</span><br><span class=\"line\">    pos = string.indexOf(&quot;e&quot;,pos + 1);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>trim()方法：创建一个字符串副本，删除前置及后缀所有空格，返回字符串副本。</p>\n</li>\n<li>字符串大小写转换方法：toLowerCase()和toUpperCase()，还有两个针对地区的大小写转换方法toLocaleLowerCase()和toLocaleUpperCase()。</li>\n<li><p>字符串的模式匹配方法：match()方法接收一个正则表达式参数，返回一个字符串捕获数组。<br>search()方法接收一个正则表达式参数，返回字符串中第一个匹配的索引项。replace()方法接收两个参数，第一个参数可以是字符串或正则表达式，第二个参数可以是一个字符串或一个函数，并返回一个新字符串。split()方法接收一个分隔符，将字符串分割成字符数组返回，还可以接收第二个参数，用于指定分割数组的大小。这四个方法示例如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str = &quot;hello world&quot;;</span><br><span class=\"line\">alert(str.toUpperCase()); // &quot;HELLO WORLD&quot;</span><br><span class=\"line\">alert(str.toLowerCase()); // &quot;hello world&quot;</span><br><span class=\"line\">alert(str.toLocaleUpperCase()); // &quot;HELLO WORLD&quot;</span><br><span class=\"line\">alert(str.toLocaleLowerCase()); // &quot;hello world&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">var text = &quot;cat bat sat fat&quot;;</span><br><span class=\"line\">var matches = text.match(/.at/);</span><br><span class=\"line\">console.log(matches[0]); // &quot;cat&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">var result = text.replace(&quot;at&quot;, &quot;end&quot;);</span><br><span class=\"line\">console.log(result); // &quot;cond bat sat fat&quot;</span><br><span class=\"line\">result = text.replace(/at/g &quot;ond&quot;);</span><br><span class=\"line\">console.log(result); // &quot;cond bond sond fond&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">function htmlEscape(text)&#123;</span><br><span class=\"line\">    return text.replace(/[&lt;&gt;&quot;&amp;]/g, function(match, pos, originalText)&#123;</span><br><span class=\"line\">        // match为匹配项</span><br><span class=\"line\">        switch(match)&#123;</span><br><span class=\"line\">            case &quot;&lt;&quot;:</span><br><span class=\"line\">                return &quot;&amp;lt&quot;;</span><br><span class=\"line\">            case &quot;&gt;&quot;:</span><br><span class=\"line\">                return &quot;&amp;gt&quot;;</span><br><span class=\"line\">            case &quot;&amp;&quot;:</span><br><span class=\"line\">                return &quot;&amp;amp&quot;;</span><br><span class=\"line\">            case &quot;&lt;&quot;:</span><br><span class=\"line\">                return &quot;&amp;quot&quot;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var test = &quot;red,blue,black&quot;;</span><br><span class=\"line\">var arr = test.split(&quot;,&quot;, 2);</span><br><span class=\"line\">alert(arr); // [&quot;red&quot;, &quot;blue&quot;]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>localeCompare()方法：比较两个字符串，返回-1、0和1，返回值取决于比较参数。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str = &quot;yellow&quot;;</span><br><span class=\"line\">alert(str.localeCompare(&quot;brick&quot;)); // 1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>fromCharCode()方法：字符串的静态方法，根据一个或多个编码返回字符串。</p>\n</li>\n<li>HTML方法：尽量不使用。</li>\n</ol>\n<h1 id=\"单体内置对象\"><a href=\"#单体内置对象\" class=\"headerlink\" title=\"单体内置对象\"></a>单体内置对象</h1><h2 id=\"1、Global对象\"><a href=\"#1、Global对象\" class=\"headerlink\" title=\"1、Global对象\"></a>1、Global对象</h2><ol>\n<li><p>URI编码方法：encodeURI()和encodeURIComponent()对URI进行编码，encodeURI()用于整个URI，不会对本身属于URI的特殊字符进行编码，例如冒号、正斜杠、问号和井字号。encodeURIComponent()用于URI中的某一段进行编码，会对它发现的任何非标准字符进行编码。与这两个方法与之相对就是decodeURI()和decodeURIComponent()这两个解码方法。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var uri = &quot;http://www.wrox.com/illegal value.htm#start&quot;;</span><br><span class=\"line\">alert(encodeURI(uri)); // &quot;http://www.wrox.com/illegal%20value.htm#start&quot;</span><br><span class=\"line\">alert(encodeURIComponent(uri)); // &quot;http%3A%2F%2Fwww.wrox.com%2Fillegal%20..&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>eval()方法：慎用！</p>\n</li>\n<li>Global对象的属性：undefined NaN Infinity Object Array Function Boolean String Number Date RegExp Error EvalError RangeError ReferenceError SyntaxError TypeError URIError</li>\n<li>window对象：在浏览器中将Global对象作为window对象的一部分加以实现。</li>\n</ol>\n<h2 id=\"2、Math对象\"><a href=\"#2、Math对象\" class=\"headerlink\" title=\"2、Math对象\"></a>2、Math对象</h2><ol>\n<li>Math对象常用属性：Math.PI圆周率的值。</li>\n<li><p>min()和max()方法：确定一组数据的最大最下值。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var min = Math.min(1,2,3,4);</span><br><span class=\"line\">alert(min); // 1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>舍入方法：Math.ceil()向上取整，Math.floor()向下取整，Math.round()四舍五入。</p>\n</li>\n<li><p>random()方法：返回大于等于0小于1的一个随机数。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var num = Math.floor(Math.random() * 10 + 5); // 返回5-10的随机数</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>其他方法：Math.abs()取绝对值，Math.sqrt()取平方根。</p>\n</li>\n</ol>\n"},{"title":"JavaScript高级程序设计读书笔记-第6章","date":"2017-10-09T14:40:39.000Z","description":"JavaScript高级程序设计读书笔记--第6章面向对象的程序设计","_content":"# 理解对象\nECMA-262把对象定义为**无序**属性的集合，其属性可以包含基本值、对象或者函数。\n*使用对象字面量创建对象：\n```\nvar person = {\n    name: \"jack\",\n    age: 19,\n    sayName: function(){\n        alert(this.name);\n    }\n}\n```\n## 属性类型\n1. 数据属性：包含一个数据值的位置，具有4个特性：\n (1)[[Configurable]]：表示能否通过delete删除属性从而重新定义属性，能否修改属性的特性，能否把属性修改为访问器属性，默认值为true。**configurable一旦被定义为不可配置，就不能把它变回可配置了，此时只能调用Object.defineProperty()方法修改writable特性**。\n (2)[[Enumerable]]：表示能否通过for-in遍历属性，默认值为true。\n (3)[[Writable]]：表示能否修改属性，默认值true。\n (4)[[Value]]：包含这个属性的数据值，默认为undefined。\n修改属性默认特性的方法：Object.defineProperty()，接收三个参数：属性所在对象、属性名和一个描述符对象(必须为属性特性名中的一个)。例如：\n```\nvar person = {};\nObject.defineProperty(person, \"name\", {\n    writable: false,\n    value: \"jack\"\n});\nperson.name = \"aaa\";\nconsole.log(person.name); // jack\n```\n\n2. 访问器属性：访问器属性不包含数据值，它包含一对儿getter和setter方法(非必须)，具有4个特性：\n (1)[[Configurable]]：表示能否通过delete删除属性从而重新定义属性，能否修改属性的特性，能否把属性修改为数据属性，默认为true。\n (2)[[Enumerable]]：表示能否通过for-in循环返回属性，默认为true。\n (3)[[Get]]：读取属性时调用的函数，默认为undefined。\n (4)[[Set]]：写入属性时调用的函数，默认为undefined。\n访问器属性不能直接定义，必须使用Obeject.defineProperty()来定义，例如：\n```\nvar book = {\n    _year: 2004, // 下划线代表私有属性\n    edition: 1\n}\n\n// 定义访问器属性year\nObject.defineProperty(book, \"year\", {\n    get: function(){\n        return this._year;\n    },\n    set: function(newValue){\n        if(newValue > 2004){\n            this._year = newValue;\n            this.edition = newValue - 2004;\n        }\n    }\n});\n\nbook.year = 2005;\nconsole.log(book.edition); // 2\n```\n\n>注：支持Object.defineProperty()这个方法的有浏览器有IE9+、Firefox4+、Safari5+、Opera12+和Chrome，在不支持该方法的浏览器中不能修改[[Configurable]]和[[Enumerable]]。\n\n## 定义多个属性\nObject.defineProperties()可以一次定义多个属性，该方法接收两个参数：第一个参数是要添加或修改属性的对象，第二个是要添加或修改的属性，例如：\n```\nvar book = {};\nObeject.defineProperties(book, {\n    _year: {\n        writable: true,\n        value: 200\n    },\n    edition: {\n        writable: true,\n        value: 1\n    },\n    year: {\n        get: function(){\n            return this._year;\n        },\n        set: function(newValue){\n            if(newValue > 2004){\n                this._year = newValue;\n                this.edition = newValue - 2004;\n            }\n        }\n    }\n});\n```\n\n## 读取属性的特性\nObject.getOwnPropertyDescriptor()可以取得给定属性的描述符，该方法接收两个参数：第一个为属性所在对象，第二个为属性名称，返回值是一个对象，例如：\n```\nvar book = {};\nObeject.defineProperties(book, {\n    _year: {\n        writable: true,\n        value: 200\n    },\n    edition: {\n        writable: true,\n        value: 1\n    },\n    year: {\n        get: function(){\n            return this._year;\n        },\n        set: function(newValue){\n            if(newValue > 2004){\n                this._year = newValue;\n                this.edition = newValue - 2004;\n            }\n        }\n    }\n});\n\nvar descriptor = Object.getOwnPropertyDescriptor(book, \"_year\");\nconsole.log(descriptor.value); // 2004\nconsole.log(descriptor.configurable); // false\nconsole.log(typeof descriptor.get); // \"undefined\"\n```\n\n# 创建对象\n## 工厂模式\n工厂模式抽象了创建具体对象的过程，由于ECMAScript无法创建类，所以我们用函数来封装接口，如下所示：\n```\nfunction createPerson(name, age, job){\n    var o = new Object();\n    o.name = name;\n    o.age = age;\n    o.job = job;\n    o.sayName = function(){\n        alert(this.name);\n    };\n    return o;\n}\n\nvar person1 = createPerson(\"jack\", 18, \"teacher\");\n```\n\n## 构造函数模式\n构造函数的函数名应该大写，如下所示：\n```\nfunction Person(name, age, job){\n    this.name = name;\n    this.age = age;\n    this.job = job;\n    this.sayName = function(){\n        alert(this.name);\n    };\n}\nvar person1 = new Person(\"jack\", 10, \"teacher\");\n```\n构造函数与工厂模式的函数的区别在于：没有显示的创建对象，没有return和直接将属性和方法赋值给了this对象。\n可以通过对象constructor属性来获取该对象的构造函数，例如：\n```\nconsole.log(person1.construtor == Person); // true\n```\n说明：\n1. 构造函数也是函数，区别只在于它们的调用方式不同，任何函数只要通过new操作符来调用，那么它就可以是构造函数。例如：\n```\nPerson(\"jack\", 19, \"teacher\"); // 添加到全局作用域中\nwindow.sayName(); // jack\n```\n2. 构造函数的主要问题是每个方法都要在每个实例上重新创建一遍。解决方法为：我们可以把构造函数中的方法移到构造函数外部，如下所示：\n```\nfunction Person(name, age, job){\n    this.name = name;\n    this.age = age;\n    this.job = job;\n    this.sayName = sayName;\n}\nfunction sayName(){\n    alert(this.name);\n}\nvar person1 = new Person(\"jack\", 10, \"teacher\");\n```\n\n>注：把方法移到构造函数外部会破坏自定义引用类型的封装性，使其暴露在全局作用域中，我们可以通过下面的原型模式来解决。\n\n## 原型模式\n每个函数都有一个prototype属性，这个属性是一个指针，指向一个对象，而这个对象的用途是包含可以由特定类型的所有实例共享的属性和方法。\n示例：\n```\nfunction Person(){\n}\n\nPerson.prototype.name = \"jack\";\nPerson.prototype.age = 29;\nPerson.protptype.job = \"teacher\";\nPerson.prototype.sayName = function(){\n    alert(this.name);\n};\n\nvar person1 = new Person();\nperson1.sayName(); // jack\n\nvar person2 = new Person();\nperson2.sayName(); // jack\n\n```\n1.理解原型对象\n原型对象中有constructor属性，该属性是一个指针，指向prototype属性所在函数，也就是构造函数。\n根据构造函数创建的实例中也有一个叫[[Prototype]]的指针，FireFox、Safari和Chrome中以_proto_体现，该指针指向构造函数的原型对象。\n构造函数中有prototype属性，是一个指针，指向该函数的原型对象。\n\n**实例与构造函数没有直接的关系，是通过原型对象连接起来的。**\n\nECMAScript5中新增了一个Object.getPrototypeOf()方法，用来获得实例中[[Protptype]]的值，也就是原型对象。支持这个方法的浏览器有IE9+、Firefox3.5+、Safari5+、Opera12+和chrome。\n例如：\n```\nalter(Object.getPrototypeof(person1).name); // \"jack\"\n```\n属性的搜索顺序是先搜索实例，再搜索原型。虽然可以通过对象实例来访问原型中属性的值，但是不能通过对象实例重写原型中属性的值。如果我们在实例中添加了一个与实例原型中的同名属性，则该属性会屏蔽原型中那个属性。例如：\n```\nfunction Person(){\n}\nPerson.prototype.name = \"jack\";\nvar person = new Person();\nperson.name = \"rose\";\nconsole.log(person.name); // \"rose\"\n```\ndelete操作符能删除实例属性，例如：\n```\ndelete person.name;\nconsole.log(person.name); // \"jack\"来自原型\n```\nhasOwnProperty()方法可以检测一个属性是存在于实例中，还是原型中。给定属性存在实例中，才会返回true，例如：\n```\nperson.name = \"rose\";\nconsole.log(person.hasOwnProperty(\"name\")); // true\nvar person2 = new Person();\nconsole.log(person.hasOwnProperty(\"name\"))； // false 属性存在原型中\n```\n\n2.原型对象与in操作符\n(1)单独使用：对象能够访问给定属性时返回true，无论该属性存在于实例中还是原型中。\n  例如：\n```\nfunction Person() {}\n\nPerson.prototype.name = \"jack\";\n\nvar person1 = new Person();\nvar person2 = new Person();\n\nconsole.log(person1.hasOwnProperty(\"name\")); // false\nconsole.log(\"name\" in person1); // true\n```\n自定义一个方法来判断属性到底存在于对象中，还是原型中:\n```\nfunction hasPrototypeProperty(obj, name) {\n    return !object.hasOwnProperty(name) && (name in obj);\n}\n```\n\n(2)在for-in中使用：不论在实例中还是原型中，可枚举的属性都能通过for-in循环返回。\nObject.keys()方法接收一个对象作为参数，返回可枚举属性的字符串数组。例如：\n```\nfunction Person() {}\n\nPerson.prototype.name = \"jack\";\n\nvar keys = Object.keys(Person.prototype);\nconsole.log(keys); // name\n```\nObjectgetOwnPropertyNames()方法会返回所有属性，无论它是否可枚举。例如：\n```\nvar keys = Object.getOwnPropertyNames(Person.prototype);\nconsole.log(keys); // constructor name\n```\n\n3.更简单的原型语法\n用一个包含所有属性和方法的对象字面量来重写整个原型对象，例如：\n```\nfunction Person() {}\n\nPerson.prototype = {\n    name: 'jack',\n    age: 18,\n    sayName: function() {\n        alert(this.name);\n    }\n}\n```\n\n这里有一个问题，constructor属性不再指向Person，变成了新对象constructor的属性。例如：\n```\nvar friend = new Person();\n\n// false\nconsole.log(friend.constructor === Person);\n\n// true\nconsole.log(friend.constructor === Object)\n```\n\n如果我们想要重设constructor属性，可以这样做：\n```\nfunction Person() {}\n\nPerson.prototype = {\n    constructor: Person,\n    name: 'jack',\n    age: 18,\n    sayName: function() {\n        alert(this.name);\n    }\n}\n```\n\n4.原型的动态性\n原型中查找值的过程是一次搜索，因此我们对原型对象所做的任何修改都能立即从实例上反映出来。\n\n5.原生对象的原型\n所有的原生引用类型都在其构造函数的原型上定义了方法，我们也可以通过原型定义新的方法，但这样做的不推荐的。\n\n6.原型对象的问题\n原型模式最大问题是它的共享性。对于包含引用类型的原型来说，较容易产生问题，例如：\n```\nfunction Person() {}\n\nPerson.prototype = {\n    constructor: Person,\n    name: 'jack',\n    age: 18,\n    friends: ['rose', 'tom'],\n    sayName: function() {\n        alert(this.name);\n    }\n}\n\nvar person1 = new Person();\nvar person2 = new Person();\n\nperson1.friends.push('lily');\n\n// rose tom lily\nconsole.log(person2.friends);\n```\n\n## 组合使用构造函数模式和原型模式  \n\n构造函数和原型的组合模式是创建对象中最常见的方式，构造函数用于定义实例属性，原型对象用于定义方法和共享的属性。如下所示： \n\n\n```javascript\nfunction Person(name) {\n    this.name = name;\n}\nPerson.prototype = {\n    constructor: Person,\n    sayName: function() {\n        console.log(this.name);\n    }\n}\n```\n## 动态原型模式  \n\n将所有的信息都封装在了构造函数中，通过检查某个应该存在的方法是否有效，来决定是否需要初始化原型。如下所示： \n\n```javascript\nfunction Person(name) {\n    this.name = name;\n    if (type this.sayName !== 'function') {\n        Person.prototype.sayName = function() {\n            console.log(this.name);\n        }\n    }\n}\n```\n## 寄生构造函数模式  \n\n在构造函数内生成一个对象并返回，与工厂模式类似，但该对象与构造函数的原型之间没有任何联系，不推荐使用。 \n\n## 稳妥构造函数模式  \n\n与寄生构造函数模式类似，但是不使用new操作符。\n\n# 继承\n## 原型链\n## 借用构造函数\n## 组合继承\n## 原型式继承\n## 寄生式继承\n## 寄生组合式继承\n","source":"_posts/JavaScript高级程序设计读书笔记-第6章.md","raw":"---\ntitle: JavaScript高级程序设计读书笔记-第6章\ndate: 2017-10-09 22:40:39\ncategories: JS高程笔记\ntags:\n     - 笔记\n     - JavaScript\ndescription: JavaScript高级程序设计读书笔记--第6章面向对象的程序设计\n---\n# 理解对象\nECMA-262把对象定义为**无序**属性的集合，其属性可以包含基本值、对象或者函数。\n*使用对象字面量创建对象：\n```\nvar person = {\n    name: \"jack\",\n    age: 19,\n    sayName: function(){\n        alert(this.name);\n    }\n}\n```\n## 属性类型\n1. 数据属性：包含一个数据值的位置，具有4个特性：\n (1)[[Configurable]]：表示能否通过delete删除属性从而重新定义属性，能否修改属性的特性，能否把属性修改为访问器属性，默认值为true。**configurable一旦被定义为不可配置，就不能把它变回可配置了，此时只能调用Object.defineProperty()方法修改writable特性**。\n (2)[[Enumerable]]：表示能否通过for-in遍历属性，默认值为true。\n (3)[[Writable]]：表示能否修改属性，默认值true。\n (4)[[Value]]：包含这个属性的数据值，默认为undefined。\n修改属性默认特性的方法：Object.defineProperty()，接收三个参数：属性所在对象、属性名和一个描述符对象(必须为属性特性名中的一个)。例如：\n```\nvar person = {};\nObject.defineProperty(person, \"name\", {\n    writable: false,\n    value: \"jack\"\n});\nperson.name = \"aaa\";\nconsole.log(person.name); // jack\n```\n\n2. 访问器属性：访问器属性不包含数据值，它包含一对儿getter和setter方法(非必须)，具有4个特性：\n (1)[[Configurable]]：表示能否通过delete删除属性从而重新定义属性，能否修改属性的特性，能否把属性修改为数据属性，默认为true。\n (2)[[Enumerable]]：表示能否通过for-in循环返回属性，默认为true。\n (3)[[Get]]：读取属性时调用的函数，默认为undefined。\n (4)[[Set]]：写入属性时调用的函数，默认为undefined。\n访问器属性不能直接定义，必须使用Obeject.defineProperty()来定义，例如：\n```\nvar book = {\n    _year: 2004, // 下划线代表私有属性\n    edition: 1\n}\n\n// 定义访问器属性year\nObject.defineProperty(book, \"year\", {\n    get: function(){\n        return this._year;\n    },\n    set: function(newValue){\n        if(newValue > 2004){\n            this._year = newValue;\n            this.edition = newValue - 2004;\n        }\n    }\n});\n\nbook.year = 2005;\nconsole.log(book.edition); // 2\n```\n\n>注：支持Object.defineProperty()这个方法的有浏览器有IE9+、Firefox4+、Safari5+、Opera12+和Chrome，在不支持该方法的浏览器中不能修改[[Configurable]]和[[Enumerable]]。\n\n## 定义多个属性\nObject.defineProperties()可以一次定义多个属性，该方法接收两个参数：第一个参数是要添加或修改属性的对象，第二个是要添加或修改的属性，例如：\n```\nvar book = {};\nObeject.defineProperties(book, {\n    _year: {\n        writable: true,\n        value: 200\n    },\n    edition: {\n        writable: true,\n        value: 1\n    },\n    year: {\n        get: function(){\n            return this._year;\n        },\n        set: function(newValue){\n            if(newValue > 2004){\n                this._year = newValue;\n                this.edition = newValue - 2004;\n            }\n        }\n    }\n});\n```\n\n## 读取属性的特性\nObject.getOwnPropertyDescriptor()可以取得给定属性的描述符，该方法接收两个参数：第一个为属性所在对象，第二个为属性名称，返回值是一个对象，例如：\n```\nvar book = {};\nObeject.defineProperties(book, {\n    _year: {\n        writable: true,\n        value: 200\n    },\n    edition: {\n        writable: true,\n        value: 1\n    },\n    year: {\n        get: function(){\n            return this._year;\n        },\n        set: function(newValue){\n            if(newValue > 2004){\n                this._year = newValue;\n                this.edition = newValue - 2004;\n            }\n        }\n    }\n});\n\nvar descriptor = Object.getOwnPropertyDescriptor(book, \"_year\");\nconsole.log(descriptor.value); // 2004\nconsole.log(descriptor.configurable); // false\nconsole.log(typeof descriptor.get); // \"undefined\"\n```\n\n# 创建对象\n## 工厂模式\n工厂模式抽象了创建具体对象的过程，由于ECMAScript无法创建类，所以我们用函数来封装接口，如下所示：\n```\nfunction createPerson(name, age, job){\n    var o = new Object();\n    o.name = name;\n    o.age = age;\n    o.job = job;\n    o.sayName = function(){\n        alert(this.name);\n    };\n    return o;\n}\n\nvar person1 = createPerson(\"jack\", 18, \"teacher\");\n```\n\n## 构造函数模式\n构造函数的函数名应该大写，如下所示：\n```\nfunction Person(name, age, job){\n    this.name = name;\n    this.age = age;\n    this.job = job;\n    this.sayName = function(){\n        alert(this.name);\n    };\n}\nvar person1 = new Person(\"jack\", 10, \"teacher\");\n```\n构造函数与工厂模式的函数的区别在于：没有显示的创建对象，没有return和直接将属性和方法赋值给了this对象。\n可以通过对象constructor属性来获取该对象的构造函数，例如：\n```\nconsole.log(person1.construtor == Person); // true\n```\n说明：\n1. 构造函数也是函数，区别只在于它们的调用方式不同，任何函数只要通过new操作符来调用，那么它就可以是构造函数。例如：\n```\nPerson(\"jack\", 19, \"teacher\"); // 添加到全局作用域中\nwindow.sayName(); // jack\n```\n2. 构造函数的主要问题是每个方法都要在每个实例上重新创建一遍。解决方法为：我们可以把构造函数中的方法移到构造函数外部，如下所示：\n```\nfunction Person(name, age, job){\n    this.name = name;\n    this.age = age;\n    this.job = job;\n    this.sayName = sayName;\n}\nfunction sayName(){\n    alert(this.name);\n}\nvar person1 = new Person(\"jack\", 10, \"teacher\");\n```\n\n>注：把方法移到构造函数外部会破坏自定义引用类型的封装性，使其暴露在全局作用域中，我们可以通过下面的原型模式来解决。\n\n## 原型模式\n每个函数都有一个prototype属性，这个属性是一个指针，指向一个对象，而这个对象的用途是包含可以由特定类型的所有实例共享的属性和方法。\n示例：\n```\nfunction Person(){\n}\n\nPerson.prototype.name = \"jack\";\nPerson.prototype.age = 29;\nPerson.protptype.job = \"teacher\";\nPerson.prototype.sayName = function(){\n    alert(this.name);\n};\n\nvar person1 = new Person();\nperson1.sayName(); // jack\n\nvar person2 = new Person();\nperson2.sayName(); // jack\n\n```\n1.理解原型对象\n原型对象中有constructor属性，该属性是一个指针，指向prototype属性所在函数，也就是构造函数。\n根据构造函数创建的实例中也有一个叫[[Prototype]]的指针，FireFox、Safari和Chrome中以_proto_体现，该指针指向构造函数的原型对象。\n构造函数中有prototype属性，是一个指针，指向该函数的原型对象。\n\n**实例与构造函数没有直接的关系，是通过原型对象连接起来的。**\n\nECMAScript5中新增了一个Object.getPrototypeOf()方法，用来获得实例中[[Protptype]]的值，也就是原型对象。支持这个方法的浏览器有IE9+、Firefox3.5+、Safari5+、Opera12+和chrome。\n例如：\n```\nalter(Object.getPrototypeof(person1).name); // \"jack\"\n```\n属性的搜索顺序是先搜索实例，再搜索原型。虽然可以通过对象实例来访问原型中属性的值，但是不能通过对象实例重写原型中属性的值。如果我们在实例中添加了一个与实例原型中的同名属性，则该属性会屏蔽原型中那个属性。例如：\n```\nfunction Person(){\n}\nPerson.prototype.name = \"jack\";\nvar person = new Person();\nperson.name = \"rose\";\nconsole.log(person.name); // \"rose\"\n```\ndelete操作符能删除实例属性，例如：\n```\ndelete person.name;\nconsole.log(person.name); // \"jack\"来自原型\n```\nhasOwnProperty()方法可以检测一个属性是存在于实例中，还是原型中。给定属性存在实例中，才会返回true，例如：\n```\nperson.name = \"rose\";\nconsole.log(person.hasOwnProperty(\"name\")); // true\nvar person2 = new Person();\nconsole.log(person.hasOwnProperty(\"name\"))； // false 属性存在原型中\n```\n\n2.原型对象与in操作符\n(1)单独使用：对象能够访问给定属性时返回true，无论该属性存在于实例中还是原型中。\n  例如：\n```\nfunction Person() {}\n\nPerson.prototype.name = \"jack\";\n\nvar person1 = new Person();\nvar person2 = new Person();\n\nconsole.log(person1.hasOwnProperty(\"name\")); // false\nconsole.log(\"name\" in person1); // true\n```\n自定义一个方法来判断属性到底存在于对象中，还是原型中:\n```\nfunction hasPrototypeProperty(obj, name) {\n    return !object.hasOwnProperty(name) && (name in obj);\n}\n```\n\n(2)在for-in中使用：不论在实例中还是原型中，可枚举的属性都能通过for-in循环返回。\nObject.keys()方法接收一个对象作为参数，返回可枚举属性的字符串数组。例如：\n```\nfunction Person() {}\n\nPerson.prototype.name = \"jack\";\n\nvar keys = Object.keys(Person.prototype);\nconsole.log(keys); // name\n```\nObjectgetOwnPropertyNames()方法会返回所有属性，无论它是否可枚举。例如：\n```\nvar keys = Object.getOwnPropertyNames(Person.prototype);\nconsole.log(keys); // constructor name\n```\n\n3.更简单的原型语法\n用一个包含所有属性和方法的对象字面量来重写整个原型对象，例如：\n```\nfunction Person() {}\n\nPerson.prototype = {\n    name: 'jack',\n    age: 18,\n    sayName: function() {\n        alert(this.name);\n    }\n}\n```\n\n这里有一个问题，constructor属性不再指向Person，变成了新对象constructor的属性。例如：\n```\nvar friend = new Person();\n\n// false\nconsole.log(friend.constructor === Person);\n\n// true\nconsole.log(friend.constructor === Object)\n```\n\n如果我们想要重设constructor属性，可以这样做：\n```\nfunction Person() {}\n\nPerson.prototype = {\n    constructor: Person,\n    name: 'jack',\n    age: 18,\n    sayName: function() {\n        alert(this.name);\n    }\n}\n```\n\n4.原型的动态性\n原型中查找值的过程是一次搜索，因此我们对原型对象所做的任何修改都能立即从实例上反映出来。\n\n5.原生对象的原型\n所有的原生引用类型都在其构造函数的原型上定义了方法，我们也可以通过原型定义新的方法，但这样做的不推荐的。\n\n6.原型对象的问题\n原型模式最大问题是它的共享性。对于包含引用类型的原型来说，较容易产生问题，例如：\n```\nfunction Person() {}\n\nPerson.prototype = {\n    constructor: Person,\n    name: 'jack',\n    age: 18,\n    friends: ['rose', 'tom'],\n    sayName: function() {\n        alert(this.name);\n    }\n}\n\nvar person1 = new Person();\nvar person2 = new Person();\n\nperson1.friends.push('lily');\n\n// rose tom lily\nconsole.log(person2.friends);\n```\n\n## 组合使用构造函数模式和原型模式  \n\n构造函数和原型的组合模式是创建对象中最常见的方式，构造函数用于定义实例属性，原型对象用于定义方法和共享的属性。如下所示： \n\n\n```javascript\nfunction Person(name) {\n    this.name = name;\n}\nPerson.prototype = {\n    constructor: Person,\n    sayName: function() {\n        console.log(this.name);\n    }\n}\n```\n## 动态原型模式  \n\n将所有的信息都封装在了构造函数中，通过检查某个应该存在的方法是否有效，来决定是否需要初始化原型。如下所示： \n\n```javascript\nfunction Person(name) {\n    this.name = name;\n    if (type this.sayName !== 'function') {\n        Person.prototype.sayName = function() {\n            console.log(this.name);\n        }\n    }\n}\n```\n## 寄生构造函数模式  \n\n在构造函数内生成一个对象并返回，与工厂模式类似，但该对象与构造函数的原型之间没有任何联系，不推荐使用。 \n\n## 稳妥构造函数模式  \n\n与寄生构造函数模式类似，但是不使用new操作符。\n\n# 继承\n## 原型链\n## 借用构造函数\n## 组合继承\n## 原型式继承\n## 寄生式继承\n## 寄生组合式继承\n","slug":"JavaScript高级程序设计读书笔记-第6章","published":1,"updated":"2018-04-01T13:45:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjksf3cwk0014h8efi38brp0e","content":"<h1 id=\"理解对象\"><a href=\"#理解对象\" class=\"headerlink\" title=\"理解对象\"></a>理解对象</h1><p>ECMA-262把对象定义为<strong>无序</strong>属性的集合，其属性可以包含基本值、对象或者函数。<br>*使用对象字面量创建对象：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var person = &#123;</span><br><span class=\"line\">    name: &quot;jack&quot;,</span><br><span class=\"line\">    age: 19,</span><br><span class=\"line\">    sayName: function()&#123;</span><br><span class=\"line\">        alert(this.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"属性类型\"><a href=\"#属性类型\" class=\"headerlink\" title=\"属性类型\"></a>属性类型</h2><ol>\n<li><p>数据属性：包含一个数据值的位置，具有4个特性：<br>(1)[[Configurable]]：表示能否通过delete删除属性从而重新定义属性，能否修改属性的特性，能否把属性修改为访问器属性，默认值为true。<strong>configurable一旦被定义为不可配置，就不能把它变回可配置了，此时只能调用Object.defineProperty()方法修改writable特性</strong>。<br>(2)[[Enumerable]]：表示能否通过for-in遍历属性，默认值为true。<br>(3)[[Writable]]：表示能否修改属性，默认值true。<br>(4)[[Value]]：包含这个属性的数据值，默认为undefined。<br>修改属性默认特性的方法：Object.defineProperty()，接收三个参数：属性所在对象、属性名和一个描述符对象(必须为属性特性名中的一个)。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var person = &#123;&#125;;</span><br><span class=\"line\">Object.defineProperty(person, &quot;name&quot;, &#123;</span><br><span class=\"line\">    writable: false,</span><br><span class=\"line\">    value: &quot;jack&quot;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">person.name = &quot;aaa&quot;;</span><br><span class=\"line\">console.log(person.name); // jack</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>访问器属性：访问器属性不包含数据值，它包含一对儿getter和setter方法(非必须)，具有4个特性：<br>(1)[[Configurable]]：表示能否通过delete删除属性从而重新定义属性，能否修改属性的特性，能否把属性修改为数据属性，默认为true。<br>(2)[[Enumerable]]：表示能否通过for-in循环返回属性，默认为true。<br>(3)[[Get]]：读取属性时调用的函数，默认为undefined。<br>(4)[[Set]]：写入属性时调用的函数，默认为undefined。<br>访问器属性不能直接定义，必须使用Obeject.defineProperty()来定义，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var book = &#123;</span><br><span class=\"line\">    _year: 2004, // 下划线代表私有属性</span><br><span class=\"line\">    edition: 1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 定义访问器属性year</span><br><span class=\"line\">Object.defineProperty(book, &quot;year&quot;, &#123;</span><br><span class=\"line\">    get: function()&#123;</span><br><span class=\"line\">        return this._year;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    set: function(newValue)&#123;</span><br><span class=\"line\">        if(newValue &gt; 2004)&#123;</span><br><span class=\"line\">            this._year = newValue;</span><br><span class=\"line\">            this.edition = newValue - 2004;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">book.year = 2005;</span><br><span class=\"line\">console.log(book.edition); // 2</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<blockquote>\n<p>注：支持Object.defineProperty()这个方法的有浏览器有IE9+、Firefox4+、Safari5+、Opera12+和Chrome，在不支持该方法的浏览器中不能修改[[Configurable]]和[[Enumerable]]。</p>\n</blockquote>\n<h2 id=\"定义多个属性\"><a href=\"#定义多个属性\" class=\"headerlink\" title=\"定义多个属性\"></a>定义多个属性</h2><p>Object.defineProperties()可以一次定义多个属性，该方法接收两个参数：第一个参数是要添加或修改属性的对象，第二个是要添加或修改的属性，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var book = &#123;&#125;;</span><br><span class=\"line\">Obeject.defineProperties(book, &#123;</span><br><span class=\"line\">    _year: &#123;</span><br><span class=\"line\">        writable: true,</span><br><span class=\"line\">        value: 200</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    edition: &#123;</span><br><span class=\"line\">        writable: true,</span><br><span class=\"line\">        value: 1</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    year: &#123;</span><br><span class=\"line\">        get: function()&#123;</span><br><span class=\"line\">            return this._year;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        set: function(newValue)&#123;</span><br><span class=\"line\">            if(newValue &gt; 2004)&#123;</span><br><span class=\"line\">                this._year = newValue;</span><br><span class=\"line\">                this.edition = newValue - 2004;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"读取属性的特性\"><a href=\"#读取属性的特性\" class=\"headerlink\" title=\"读取属性的特性\"></a>读取属性的特性</h2><p>Object.getOwnPropertyDescriptor()可以取得给定属性的描述符，该方法接收两个参数：第一个为属性所在对象，第二个为属性名称，返回值是一个对象，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var book = &#123;&#125;;</span><br><span class=\"line\">Obeject.defineProperties(book, &#123;</span><br><span class=\"line\">    _year: &#123;</span><br><span class=\"line\">        writable: true,</span><br><span class=\"line\">        value: 200</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    edition: &#123;</span><br><span class=\"line\">        writable: true,</span><br><span class=\"line\">        value: 1</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    year: &#123;</span><br><span class=\"line\">        get: function()&#123;</span><br><span class=\"line\">            return this._year;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        set: function(newValue)&#123;</span><br><span class=\"line\">            if(newValue &gt; 2004)&#123;</span><br><span class=\"line\">                this._year = newValue;</span><br><span class=\"line\">                this.edition = newValue - 2004;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var descriptor = Object.getOwnPropertyDescriptor(book, &quot;_year&quot;);</span><br><span class=\"line\">console.log(descriptor.value); // 2004</span><br><span class=\"line\">console.log(descriptor.configurable); // false</span><br><span class=\"line\">console.log(typeof descriptor.get); // &quot;undefined&quot;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"创建对象\"><a href=\"#创建对象\" class=\"headerlink\" title=\"创建对象\"></a>创建对象</h1><h2 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h2><p>工厂模式抽象了创建具体对象的过程，由于ECMAScript无法创建类，所以我们用函数来封装接口，如下所示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function createPerson(name, age, job)&#123;</span><br><span class=\"line\">    var o = new Object();</span><br><span class=\"line\">    o.name = name;</span><br><span class=\"line\">    o.age = age;</span><br><span class=\"line\">    o.job = job;</span><br><span class=\"line\">    o.sayName = function()&#123;</span><br><span class=\"line\">        alert(this.name);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    return o;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var person1 = createPerson(&quot;jack&quot;, 18, &quot;teacher&quot;);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"构造函数模式\"><a href=\"#构造函数模式\" class=\"headerlink\" title=\"构造函数模式\"></a>构造函数模式</h2><p>构造函数的函数名应该大写，如下所示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person(name, age, job)&#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">    this.age = age;</span><br><span class=\"line\">    this.job = job;</span><br><span class=\"line\">    this.sayName = function()&#123;</span><br><span class=\"line\">        alert(this.name);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var person1 = new Person(&quot;jack&quot;, 10, &quot;teacher&quot;);</span><br></pre></td></tr></table></figure></p>\n<p>构造函数与工厂模式的函数的区别在于：没有显示的创建对象，没有return和直接将属性和方法赋值给了this对象。<br>可以通过对象constructor属性来获取该对象的构造函数，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(person1.construtor == Person); // true</span><br></pre></td></tr></table></figure></p>\n<p>说明：</p>\n<ol>\n<li><p>构造函数也是函数，区别只在于它们的调用方式不同，任何函数只要通过new操作符来调用，那么它就可以是构造函数。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person(&quot;jack&quot;, 19, &quot;teacher&quot;); // 添加到全局作用域中</span><br><span class=\"line\">window.sayName(); // jack</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>构造函数的主要问题是每个方法都要在每个实例上重新创建一遍。解决方法为：我们可以把构造函数中的方法移到构造函数外部，如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person(name, age, job)&#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">    this.age = age;</span><br><span class=\"line\">    this.job = job;</span><br><span class=\"line\">    this.sayName = sayName;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function sayName()&#123;</span><br><span class=\"line\">    alert(this.name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var person1 = new Person(&quot;jack&quot;, 10, &quot;teacher&quot;);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<blockquote>\n<p>注：把方法移到构造函数外部会破坏自定义引用类型的封装性，使其暴露在全局作用域中，我们可以通过下面的原型模式来解决。</p>\n</blockquote>\n<h2 id=\"原型模式\"><a href=\"#原型模式\" class=\"headerlink\" title=\"原型模式\"></a>原型模式</h2><p>每个函数都有一个prototype属性，这个属性是一个指针，指向一个对象，而这个对象的用途是包含可以由特定类型的所有实例共享的属性和方法。<br>示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person()&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Person.prototype.name = &quot;jack&quot;;</span><br><span class=\"line\">Person.prototype.age = 29;</span><br><span class=\"line\">Person.protptype.job = &quot;teacher&quot;;</span><br><span class=\"line\">Person.prototype.sayName = function()&#123;</span><br><span class=\"line\">    alert(this.name);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">var person1 = new Person();</span><br><span class=\"line\">person1.sayName(); // jack</span><br><span class=\"line\"></span><br><span class=\"line\">var person2 = new Person();</span><br><span class=\"line\">person2.sayName(); // jack</span><br></pre></td></tr></table></figure></p>\n<p>1.理解原型对象<br>原型对象中有constructor属性，该属性是一个指针，指向prototype属性所在函数，也就是构造函数。<br>根据构造函数创建的实例中也有一个叫[[Prototype]]的指针，FireFox、Safari和Chrome中以<em>proto</em>体现，该指针指向构造函数的原型对象。<br>构造函数中有prototype属性，是一个指针，指向该函数的原型对象。</p>\n<p><strong>实例与构造函数没有直接的关系，是通过原型对象连接起来的。</strong></p>\n<p>ECMAScript5中新增了一个Object.getPrototypeOf()方法，用来获得实例中[[Protptype]]的值，也就是原型对象。支持这个方法的浏览器有IE9+、Firefox3.5+、Safari5+、Opera12+和chrome。<br>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter(Object.getPrototypeof(person1).name); // &quot;jack&quot;</span><br></pre></td></tr></table></figure></p>\n<p>属性的搜索顺序是先搜索实例，再搜索原型。虽然可以通过对象实例来访问原型中属性的值，但是不能通过对象实例重写原型中属性的值。如果我们在实例中添加了一个与实例原型中的同名属性，则该属性会屏蔽原型中那个属性。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person()&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Person.prototype.name = &quot;jack&quot;;</span><br><span class=\"line\">var person = new Person();</span><br><span class=\"line\">person.name = &quot;rose&quot;;</span><br><span class=\"line\">console.log(person.name); // &quot;rose&quot;</span><br></pre></td></tr></table></figure></p>\n<p>delete操作符能删除实例属性，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">delete person.name;</span><br><span class=\"line\">console.log(person.name); // &quot;jack&quot;来自原型</span><br></pre></td></tr></table></figure></p>\n<p>hasOwnProperty()方法可以检测一个属性是存在于实例中，还是原型中。给定属性存在实例中，才会返回true，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">person.name = &quot;rose&quot;;</span><br><span class=\"line\">console.log(person.hasOwnProperty(&quot;name&quot;)); // true</span><br><span class=\"line\">var person2 = new Person();</span><br><span class=\"line\">console.log(person.hasOwnProperty(&quot;name&quot;))； // false 属性存在原型中</span><br></pre></td></tr></table></figure></p>\n<p>2.原型对象与in操作符<br>(1)单独使用：对象能够访问给定属性时返回true，无论该属性存在于实例中还是原型中。<br>  例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Person.prototype.name = &quot;jack&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">var person1 = new Person();</span><br><span class=\"line\">var person2 = new Person();</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(person1.hasOwnProperty(&quot;name&quot;)); // false</span><br><span class=\"line\">console.log(&quot;name&quot; in person1); // true</span><br></pre></td></tr></table></figure></p>\n<p>自定义一个方法来判断属性到底存在于对象中，还是原型中:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function hasPrototypeProperty(obj, name) &#123;</span><br><span class=\"line\">    return !object.hasOwnProperty(name) &amp;&amp; (name in obj);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>(2)在for-in中使用：不论在实例中还是原型中，可枚举的属性都能通过for-in循环返回。<br>Object.keys()方法接收一个对象作为参数，返回可枚举属性的字符串数组。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Person.prototype.name = &quot;jack&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">var keys = Object.keys(Person.prototype);</span><br><span class=\"line\">console.log(keys); // name</span><br></pre></td></tr></table></figure></p>\n<p>ObjectgetOwnPropertyNames()方法会返回所有属性，无论它是否可枚举。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var keys = Object.getOwnPropertyNames(Person.prototype);</span><br><span class=\"line\">console.log(keys); // constructor name</span><br></pre></td></tr></table></figure></p>\n<p>3.更简单的原型语法<br>用一个包含所有属性和方法的对象字面量来重写整个原型对象，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Person.prototype = &#123;</span><br><span class=\"line\">    name: &apos;jack&apos;,</span><br><span class=\"line\">    age: 18,</span><br><span class=\"line\">    sayName: function() &#123;</span><br><span class=\"line\">        alert(this.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里有一个问题，constructor属性不再指向Person，变成了新对象constructor的属性。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var friend = new Person();</span><br><span class=\"line\"></span><br><span class=\"line\">// false</span><br><span class=\"line\">console.log(friend.constructor === Person);</span><br><span class=\"line\"></span><br><span class=\"line\">// true</span><br><span class=\"line\">console.log(friend.constructor === Object)</span><br></pre></td></tr></table></figure></p>\n<p>如果我们想要重设constructor属性，可以这样做：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Person.prototype = &#123;</span><br><span class=\"line\">    constructor: Person,</span><br><span class=\"line\">    name: &apos;jack&apos;,</span><br><span class=\"line\">    age: 18,</span><br><span class=\"line\">    sayName: function() &#123;</span><br><span class=\"line\">        alert(this.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>4.原型的动态性<br>原型中查找值的过程是一次搜索，因此我们对原型对象所做的任何修改都能立即从实例上反映出来。</p>\n<p>5.原生对象的原型<br>所有的原生引用类型都在其构造函数的原型上定义了方法，我们也可以通过原型定义新的方法，但这样做的不推荐的。</p>\n<p>6.原型对象的问题<br>原型模式最大问题是它的共享性。对于包含引用类型的原型来说，较容易产生问题，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Person.prototype = &#123;</span><br><span class=\"line\">    constructor: Person,</span><br><span class=\"line\">    name: &apos;jack&apos;,</span><br><span class=\"line\">    age: 18,</span><br><span class=\"line\">    friends: [&apos;rose&apos;, &apos;tom&apos;],</span><br><span class=\"line\">    sayName: function() &#123;</span><br><span class=\"line\">        alert(this.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var person1 = new Person();</span><br><span class=\"line\">var person2 = new Person();</span><br><span class=\"line\"></span><br><span class=\"line\">person1.friends.push(&apos;lily&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">// rose tom lily</span><br><span class=\"line\">console.log(person2.friends);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"组合使用构造函数模式和原型模式\"><a href=\"#组合使用构造函数模式和原型模式\" class=\"headerlink\" title=\"组合使用构造函数模式和原型模式\"></a>组合使用构造函数模式和原型模式</h2><p>构造函数和原型的组合模式是创建对象中最常见的方式，构造函数用于定义实例属性，原型对象用于定义方法和共享的属性。如下所示： </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Person.prototype = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>: Person,</span><br><span class=\"line\">    sayName: function() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"动态原型模式\"><a href=\"#动态原型模式\" class=\"headerlink\" title=\"动态原型模式\"></a>动态原型模式</h2><p>将所有的信息都封装在了构造函数中，通过检查某个应该存在的方法是否有效，来决定是否需要初始化原型。如下所示： </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type <span class=\"keyword\">this</span>.sayName !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">        Person.prototype.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"寄生构造函数模式\"><a href=\"#寄生构造函数模式\" class=\"headerlink\" title=\"寄生构造函数模式\"></a>寄生构造函数模式</h2><p>在构造函数内生成一个对象并返回，与工厂模式类似，但该对象与构造函数的原型之间没有任何联系，不推荐使用。 </p>\n<h2 id=\"稳妥构造函数模式\"><a href=\"#稳妥构造函数模式\" class=\"headerlink\" title=\"稳妥构造函数模式\"></a>稳妥构造函数模式</h2><p>与寄生构造函数模式类似，但是不使用new操作符。</p>\n<h1 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h1><h2 id=\"原型链\"><a href=\"#原型链\" class=\"headerlink\" title=\"原型链\"></a>原型链</h2><h2 id=\"借用构造函数\"><a href=\"#借用构造函数\" class=\"headerlink\" title=\"借用构造函数\"></a>借用构造函数</h2><h2 id=\"组合继承\"><a href=\"#组合继承\" class=\"headerlink\" title=\"组合继承\"></a>组合继承</h2><h2 id=\"原型式继承\"><a href=\"#原型式继承\" class=\"headerlink\" title=\"原型式继承\"></a>原型式继承</h2><h2 id=\"寄生式继承\"><a href=\"#寄生式继承\" class=\"headerlink\" title=\"寄生式继承\"></a>寄生式继承</h2><h2 id=\"寄生组合式继承\"><a href=\"#寄生组合式继承\" class=\"headerlink\" title=\"寄生组合式继承\"></a>寄生组合式继承</h2>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"理解对象\"><a href=\"#理解对象\" class=\"headerlink\" title=\"理解对象\"></a>理解对象</h1><p>ECMA-262把对象定义为<strong>无序</strong>属性的集合，其属性可以包含基本值、对象或者函数。<br>*使用对象字面量创建对象：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var person = &#123;</span><br><span class=\"line\">    name: &quot;jack&quot;,</span><br><span class=\"line\">    age: 19,</span><br><span class=\"line\">    sayName: function()&#123;</span><br><span class=\"line\">        alert(this.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"属性类型\"><a href=\"#属性类型\" class=\"headerlink\" title=\"属性类型\"></a>属性类型</h2><ol>\n<li><p>数据属性：包含一个数据值的位置，具有4个特性：<br>(1)[[Configurable]]：表示能否通过delete删除属性从而重新定义属性，能否修改属性的特性，能否把属性修改为访问器属性，默认值为true。<strong>configurable一旦被定义为不可配置，就不能把它变回可配置了，此时只能调用Object.defineProperty()方法修改writable特性</strong>。<br>(2)[[Enumerable]]：表示能否通过for-in遍历属性，默认值为true。<br>(3)[[Writable]]：表示能否修改属性，默认值true。<br>(4)[[Value]]：包含这个属性的数据值，默认为undefined。<br>修改属性默认特性的方法：Object.defineProperty()，接收三个参数：属性所在对象、属性名和一个描述符对象(必须为属性特性名中的一个)。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var person = &#123;&#125;;</span><br><span class=\"line\">Object.defineProperty(person, &quot;name&quot;, &#123;</span><br><span class=\"line\">    writable: false,</span><br><span class=\"line\">    value: &quot;jack&quot;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">person.name = &quot;aaa&quot;;</span><br><span class=\"line\">console.log(person.name); // jack</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>访问器属性：访问器属性不包含数据值，它包含一对儿getter和setter方法(非必须)，具有4个特性：<br>(1)[[Configurable]]：表示能否通过delete删除属性从而重新定义属性，能否修改属性的特性，能否把属性修改为数据属性，默认为true。<br>(2)[[Enumerable]]：表示能否通过for-in循环返回属性，默认为true。<br>(3)[[Get]]：读取属性时调用的函数，默认为undefined。<br>(4)[[Set]]：写入属性时调用的函数，默认为undefined。<br>访问器属性不能直接定义，必须使用Obeject.defineProperty()来定义，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var book = &#123;</span><br><span class=\"line\">    _year: 2004, // 下划线代表私有属性</span><br><span class=\"line\">    edition: 1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 定义访问器属性year</span><br><span class=\"line\">Object.defineProperty(book, &quot;year&quot;, &#123;</span><br><span class=\"line\">    get: function()&#123;</span><br><span class=\"line\">        return this._year;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    set: function(newValue)&#123;</span><br><span class=\"line\">        if(newValue &gt; 2004)&#123;</span><br><span class=\"line\">            this._year = newValue;</span><br><span class=\"line\">            this.edition = newValue - 2004;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">book.year = 2005;</span><br><span class=\"line\">console.log(book.edition); // 2</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<blockquote>\n<p>注：支持Object.defineProperty()这个方法的有浏览器有IE9+、Firefox4+、Safari5+、Opera12+和Chrome，在不支持该方法的浏览器中不能修改[[Configurable]]和[[Enumerable]]。</p>\n</blockquote>\n<h2 id=\"定义多个属性\"><a href=\"#定义多个属性\" class=\"headerlink\" title=\"定义多个属性\"></a>定义多个属性</h2><p>Object.defineProperties()可以一次定义多个属性，该方法接收两个参数：第一个参数是要添加或修改属性的对象，第二个是要添加或修改的属性，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var book = &#123;&#125;;</span><br><span class=\"line\">Obeject.defineProperties(book, &#123;</span><br><span class=\"line\">    _year: &#123;</span><br><span class=\"line\">        writable: true,</span><br><span class=\"line\">        value: 200</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    edition: &#123;</span><br><span class=\"line\">        writable: true,</span><br><span class=\"line\">        value: 1</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    year: &#123;</span><br><span class=\"line\">        get: function()&#123;</span><br><span class=\"line\">            return this._year;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        set: function(newValue)&#123;</span><br><span class=\"line\">            if(newValue &gt; 2004)&#123;</span><br><span class=\"line\">                this._year = newValue;</span><br><span class=\"line\">                this.edition = newValue - 2004;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"读取属性的特性\"><a href=\"#读取属性的特性\" class=\"headerlink\" title=\"读取属性的特性\"></a>读取属性的特性</h2><p>Object.getOwnPropertyDescriptor()可以取得给定属性的描述符，该方法接收两个参数：第一个为属性所在对象，第二个为属性名称，返回值是一个对象，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var book = &#123;&#125;;</span><br><span class=\"line\">Obeject.defineProperties(book, &#123;</span><br><span class=\"line\">    _year: &#123;</span><br><span class=\"line\">        writable: true,</span><br><span class=\"line\">        value: 200</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    edition: &#123;</span><br><span class=\"line\">        writable: true,</span><br><span class=\"line\">        value: 1</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    year: &#123;</span><br><span class=\"line\">        get: function()&#123;</span><br><span class=\"line\">            return this._year;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        set: function(newValue)&#123;</span><br><span class=\"line\">            if(newValue &gt; 2004)&#123;</span><br><span class=\"line\">                this._year = newValue;</span><br><span class=\"line\">                this.edition = newValue - 2004;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var descriptor = Object.getOwnPropertyDescriptor(book, &quot;_year&quot;);</span><br><span class=\"line\">console.log(descriptor.value); // 2004</span><br><span class=\"line\">console.log(descriptor.configurable); // false</span><br><span class=\"line\">console.log(typeof descriptor.get); // &quot;undefined&quot;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"创建对象\"><a href=\"#创建对象\" class=\"headerlink\" title=\"创建对象\"></a>创建对象</h1><h2 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h2><p>工厂模式抽象了创建具体对象的过程，由于ECMAScript无法创建类，所以我们用函数来封装接口，如下所示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function createPerson(name, age, job)&#123;</span><br><span class=\"line\">    var o = new Object();</span><br><span class=\"line\">    o.name = name;</span><br><span class=\"line\">    o.age = age;</span><br><span class=\"line\">    o.job = job;</span><br><span class=\"line\">    o.sayName = function()&#123;</span><br><span class=\"line\">        alert(this.name);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    return o;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var person1 = createPerson(&quot;jack&quot;, 18, &quot;teacher&quot;);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"构造函数模式\"><a href=\"#构造函数模式\" class=\"headerlink\" title=\"构造函数模式\"></a>构造函数模式</h2><p>构造函数的函数名应该大写，如下所示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person(name, age, job)&#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">    this.age = age;</span><br><span class=\"line\">    this.job = job;</span><br><span class=\"line\">    this.sayName = function()&#123;</span><br><span class=\"line\">        alert(this.name);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var person1 = new Person(&quot;jack&quot;, 10, &quot;teacher&quot;);</span><br></pre></td></tr></table></figure></p>\n<p>构造函数与工厂模式的函数的区别在于：没有显示的创建对象，没有return和直接将属性和方法赋值给了this对象。<br>可以通过对象constructor属性来获取该对象的构造函数，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(person1.construtor == Person); // true</span><br></pre></td></tr></table></figure></p>\n<p>说明：</p>\n<ol>\n<li><p>构造函数也是函数，区别只在于它们的调用方式不同，任何函数只要通过new操作符来调用，那么它就可以是构造函数。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person(&quot;jack&quot;, 19, &quot;teacher&quot;); // 添加到全局作用域中</span><br><span class=\"line\">window.sayName(); // jack</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>构造函数的主要问题是每个方法都要在每个实例上重新创建一遍。解决方法为：我们可以把构造函数中的方法移到构造函数外部，如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person(name, age, job)&#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">    this.age = age;</span><br><span class=\"line\">    this.job = job;</span><br><span class=\"line\">    this.sayName = sayName;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function sayName()&#123;</span><br><span class=\"line\">    alert(this.name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var person1 = new Person(&quot;jack&quot;, 10, &quot;teacher&quot;);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<blockquote>\n<p>注：把方法移到构造函数外部会破坏自定义引用类型的封装性，使其暴露在全局作用域中，我们可以通过下面的原型模式来解决。</p>\n</blockquote>\n<h2 id=\"原型模式\"><a href=\"#原型模式\" class=\"headerlink\" title=\"原型模式\"></a>原型模式</h2><p>每个函数都有一个prototype属性，这个属性是一个指针，指向一个对象，而这个对象的用途是包含可以由特定类型的所有实例共享的属性和方法。<br>示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person()&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Person.prototype.name = &quot;jack&quot;;</span><br><span class=\"line\">Person.prototype.age = 29;</span><br><span class=\"line\">Person.protptype.job = &quot;teacher&quot;;</span><br><span class=\"line\">Person.prototype.sayName = function()&#123;</span><br><span class=\"line\">    alert(this.name);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">var person1 = new Person();</span><br><span class=\"line\">person1.sayName(); // jack</span><br><span class=\"line\"></span><br><span class=\"line\">var person2 = new Person();</span><br><span class=\"line\">person2.sayName(); // jack</span><br></pre></td></tr></table></figure></p>\n<p>1.理解原型对象<br>原型对象中有constructor属性，该属性是一个指针，指向prototype属性所在函数，也就是构造函数。<br>根据构造函数创建的实例中也有一个叫[[Prototype]]的指针，FireFox、Safari和Chrome中以<em>proto</em>体现，该指针指向构造函数的原型对象。<br>构造函数中有prototype属性，是一个指针，指向该函数的原型对象。</p>\n<p><strong>实例与构造函数没有直接的关系，是通过原型对象连接起来的。</strong></p>\n<p>ECMAScript5中新增了一个Object.getPrototypeOf()方法，用来获得实例中[[Protptype]]的值，也就是原型对象。支持这个方法的浏览器有IE9+、Firefox3.5+、Safari5+、Opera12+和chrome。<br>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter(Object.getPrototypeof(person1).name); // &quot;jack&quot;</span><br></pre></td></tr></table></figure></p>\n<p>属性的搜索顺序是先搜索实例，再搜索原型。虽然可以通过对象实例来访问原型中属性的值，但是不能通过对象实例重写原型中属性的值。如果我们在实例中添加了一个与实例原型中的同名属性，则该属性会屏蔽原型中那个属性。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person()&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Person.prototype.name = &quot;jack&quot;;</span><br><span class=\"line\">var person = new Person();</span><br><span class=\"line\">person.name = &quot;rose&quot;;</span><br><span class=\"line\">console.log(person.name); // &quot;rose&quot;</span><br></pre></td></tr></table></figure></p>\n<p>delete操作符能删除实例属性，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">delete person.name;</span><br><span class=\"line\">console.log(person.name); // &quot;jack&quot;来自原型</span><br></pre></td></tr></table></figure></p>\n<p>hasOwnProperty()方法可以检测一个属性是存在于实例中，还是原型中。给定属性存在实例中，才会返回true，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">person.name = &quot;rose&quot;;</span><br><span class=\"line\">console.log(person.hasOwnProperty(&quot;name&quot;)); // true</span><br><span class=\"line\">var person2 = new Person();</span><br><span class=\"line\">console.log(person.hasOwnProperty(&quot;name&quot;))； // false 属性存在原型中</span><br></pre></td></tr></table></figure></p>\n<p>2.原型对象与in操作符<br>(1)单独使用：对象能够访问给定属性时返回true，无论该属性存在于实例中还是原型中。<br>  例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Person.prototype.name = &quot;jack&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">var person1 = new Person();</span><br><span class=\"line\">var person2 = new Person();</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(person1.hasOwnProperty(&quot;name&quot;)); // false</span><br><span class=\"line\">console.log(&quot;name&quot; in person1); // true</span><br></pre></td></tr></table></figure></p>\n<p>自定义一个方法来判断属性到底存在于对象中，还是原型中:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function hasPrototypeProperty(obj, name) &#123;</span><br><span class=\"line\">    return !object.hasOwnProperty(name) &amp;&amp; (name in obj);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>(2)在for-in中使用：不论在实例中还是原型中，可枚举的属性都能通过for-in循环返回。<br>Object.keys()方法接收一个对象作为参数，返回可枚举属性的字符串数组。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Person.prototype.name = &quot;jack&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">var keys = Object.keys(Person.prototype);</span><br><span class=\"line\">console.log(keys); // name</span><br></pre></td></tr></table></figure></p>\n<p>ObjectgetOwnPropertyNames()方法会返回所有属性，无论它是否可枚举。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var keys = Object.getOwnPropertyNames(Person.prototype);</span><br><span class=\"line\">console.log(keys); // constructor name</span><br></pre></td></tr></table></figure></p>\n<p>3.更简单的原型语法<br>用一个包含所有属性和方法的对象字面量来重写整个原型对象，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Person.prototype = &#123;</span><br><span class=\"line\">    name: &apos;jack&apos;,</span><br><span class=\"line\">    age: 18,</span><br><span class=\"line\">    sayName: function() &#123;</span><br><span class=\"line\">        alert(this.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里有一个问题，constructor属性不再指向Person，变成了新对象constructor的属性。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var friend = new Person();</span><br><span class=\"line\"></span><br><span class=\"line\">// false</span><br><span class=\"line\">console.log(friend.constructor === Person);</span><br><span class=\"line\"></span><br><span class=\"line\">// true</span><br><span class=\"line\">console.log(friend.constructor === Object)</span><br></pre></td></tr></table></figure></p>\n<p>如果我们想要重设constructor属性，可以这样做：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Person.prototype = &#123;</span><br><span class=\"line\">    constructor: Person,</span><br><span class=\"line\">    name: &apos;jack&apos;,</span><br><span class=\"line\">    age: 18,</span><br><span class=\"line\">    sayName: function() &#123;</span><br><span class=\"line\">        alert(this.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>4.原型的动态性<br>原型中查找值的过程是一次搜索，因此我们对原型对象所做的任何修改都能立即从实例上反映出来。</p>\n<p>5.原生对象的原型<br>所有的原生引用类型都在其构造函数的原型上定义了方法，我们也可以通过原型定义新的方法，但这样做的不推荐的。</p>\n<p>6.原型对象的问题<br>原型模式最大问题是它的共享性。对于包含引用类型的原型来说，较容易产生问题，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Person.prototype = &#123;</span><br><span class=\"line\">    constructor: Person,</span><br><span class=\"line\">    name: &apos;jack&apos;,</span><br><span class=\"line\">    age: 18,</span><br><span class=\"line\">    friends: [&apos;rose&apos;, &apos;tom&apos;],</span><br><span class=\"line\">    sayName: function() &#123;</span><br><span class=\"line\">        alert(this.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var person1 = new Person();</span><br><span class=\"line\">var person2 = new Person();</span><br><span class=\"line\"></span><br><span class=\"line\">person1.friends.push(&apos;lily&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">// rose tom lily</span><br><span class=\"line\">console.log(person2.friends);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"组合使用构造函数模式和原型模式\"><a href=\"#组合使用构造函数模式和原型模式\" class=\"headerlink\" title=\"组合使用构造函数模式和原型模式\"></a>组合使用构造函数模式和原型模式</h2><p>构造函数和原型的组合模式是创建对象中最常见的方式，构造函数用于定义实例属性，原型对象用于定义方法和共享的属性。如下所示： </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Person.prototype = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>: Person,</span><br><span class=\"line\">    sayName: function() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"动态原型模式\"><a href=\"#动态原型模式\" class=\"headerlink\" title=\"动态原型模式\"></a>动态原型模式</h2><p>将所有的信息都封装在了构造函数中，通过检查某个应该存在的方法是否有效，来决定是否需要初始化原型。如下所示： </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type <span class=\"keyword\">this</span>.sayName !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">        Person.prototype.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"寄生构造函数模式\"><a href=\"#寄生构造函数模式\" class=\"headerlink\" title=\"寄生构造函数模式\"></a>寄生构造函数模式</h2><p>在构造函数内生成一个对象并返回，与工厂模式类似，但该对象与构造函数的原型之间没有任何联系，不推荐使用。 </p>\n<h2 id=\"稳妥构造函数模式\"><a href=\"#稳妥构造函数模式\" class=\"headerlink\" title=\"稳妥构造函数模式\"></a>稳妥构造函数模式</h2><p>与寄生构造函数模式类似，但是不使用new操作符。</p>\n<h1 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h1><h2 id=\"原型链\"><a href=\"#原型链\" class=\"headerlink\" title=\"原型链\"></a>原型链</h2><h2 id=\"借用构造函数\"><a href=\"#借用构造函数\" class=\"headerlink\" title=\"借用构造函数\"></a>借用构造函数</h2><h2 id=\"组合继承\"><a href=\"#组合继承\" class=\"headerlink\" title=\"组合继承\"></a>组合继承</h2><h2 id=\"原型式继承\"><a href=\"#原型式继承\" class=\"headerlink\" title=\"原型式继承\"></a>原型式继承</h2><h2 id=\"寄生式继承\"><a href=\"#寄生式继承\" class=\"headerlink\" title=\"寄生式继承\"></a>寄生式继承</h2><h2 id=\"寄生组合式继承\"><a href=\"#寄生组合式继承\" class=\"headerlink\" title=\"寄生组合式继承\"></a>寄生组合式继承</h2>"},{"title":"Maven配置环境变量出现的问题","date":"2017-07-29T13:49:27.000Z","description":"Maven配置环境变量出现的问题","_content":"出现\n**ERROR: JAVA_HOME is set to an invalid directory.\nJAVA_HOME = \"C:\\Program Files\\Java\\jdk1.8.0_65\\bin\"\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation**\n如何解决？\n(本人解决方法)\n1、将java的环境变量重新配置一遍\n创建JAVA_HOME：本机jdk安装目录\npath中： **.;%JAVA_HOME%\\bin;**  添加到最前面，命令行输入javac测试\n2、在配置maven\n创建MAVEN_HOME:本机安装路径\npath中：**;%MAVEN_HOME%\\bin;** 配置到最后(注意分号不要多了，分号用于分隔)\n\n","source":"_posts/Maven配置环境变量出现的问题.md","raw":"---\ntitle: Maven配置环境变量出现的问题\ndate: 2017-07-29 21:49:27\ncategories: 遇到的坑\ntags:\n     - 填坑经验\ndescription: Maven配置环境变量出现的问题\n---\n出现\n**ERROR: JAVA_HOME is set to an invalid directory.\nJAVA_HOME = \"C:\\Program Files\\Java\\jdk1.8.0_65\\bin\"\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation**\n如何解决？\n(本人解决方法)\n1、将java的环境变量重新配置一遍\n创建JAVA_HOME：本机jdk安装目录\npath中： **.;%JAVA_HOME%\\bin;**  添加到最前面，命令行输入javac测试\n2、在配置maven\n创建MAVEN_HOME:本机安装路径\npath中：**;%MAVEN_HOME%\\bin;** 配置到最后(注意分号不要多了，分号用于分隔)\n\n","slug":"Maven配置环境变量出现的问题","published":1,"updated":"2017-07-29T13:51:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjksf3cwl0017h8ef7d7v0utv","content":"<p>出现<br><strong>ERROR: JAVA_HOME is set to an invalid directory.<br>JAVA_HOME = “C:\\Program Files\\Java\\jdk1.8.0_65\\bin”<br>Please set the JAVA_HOME variable in your environment to match the<br>location of your Java installation</strong><br>如何解决？<br>(本人解决方法)<br>1、将java的环境变量重新配置一遍<br>创建JAVA_HOME：本机jdk安装目录<br>path中： <strong>.;%JAVA_HOME%\\bin;</strong>  添加到最前面，命令行输入javac测试<br>2、在配置maven<br>创建MAVEN_HOME:本机安装路径<br>path中：<strong>;%MAVEN_HOME%\\bin;</strong> 配置到最后(注意分号不要多了，分号用于分隔)</p>\n","site":{"data":{}},"excerpt":"","more":"<p>出现<br><strong>ERROR: JAVA_HOME is set to an invalid directory.<br>JAVA_HOME = “C:\\Program Files\\Java\\jdk1.8.0_65\\bin”<br>Please set the JAVA_HOME variable in your environment to match the<br>location of your Java installation</strong><br>如何解决？<br>(本人解决方法)<br>1、将java的环境变量重新配置一遍<br>创建JAVA_HOME：本机jdk安装目录<br>path中： <strong>.;%JAVA_HOME%\\bin;</strong>  添加到最前面，命令行输入javac测试<br>2、在配置maven<br>创建MAVEN_HOME:本机安装路径<br>path中：<strong>;%MAVEN_HOME%\\bin;</strong> 配置到最后(注意分号不要多了，分号用于分隔)</p>\n"},{"title":"Mybatis学习中遇到的异常(1)","date":"2017-07-29T03:50:55.000Z","description":"Mybatis学习中遇到的异常","_content":"org.apache.ibatis.exceptions.PersistenceException:\n### Error building SqlSession.\n### The error may exist in /mapper/UserMapper.xml\n### Cause: org.apache.ibatis.builder.BuilderException: Error parsing SQL Mapper Configuration. Cause: java.io.IOException: Could not find resource /mapper/UserMapper.xml\n**一般是mapper配置文件的问题，请仔细检查配置路径，**\n**或配置文件中是否多了或少了什么内容！**","source":"_posts/Mybatis学习中遇到的异常(1).md","raw":"---\ntitle: Mybatis学习中遇到的异常(1)\ndate: 2017-07-29 11:50:55\ncategories: 遇到的坑\ntags:\n     - 填坑经验\ndescription: Mybatis学习中遇到的异常\n---\norg.apache.ibatis.exceptions.PersistenceException:\n### Error building SqlSession.\n### The error may exist in /mapper/UserMapper.xml\n### Cause: org.apache.ibatis.builder.BuilderException: Error parsing SQL Mapper Configuration. Cause: java.io.IOException: Could not find resource /mapper/UserMapper.xml\n**一般是mapper配置文件的问题，请仔细检查配置路径，**\n**或配置文件中是否多了或少了什么内容！**","slug":"Mybatis学习中遇到的异常(1)","published":1,"updated":"2017-07-29T07:03:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjksf3cwn001bh8efxmny3t20","content":"<p>org.apache.ibatis.exceptions.PersistenceException:</p>\n<h3 id=\"Error-building-SqlSession\"><a href=\"#Error-building-SqlSession\" class=\"headerlink\" title=\"Error building SqlSession.\"></a>Error building SqlSession.</h3><h3 id=\"The-error-may-exist-in-mapper-UserMapper-xml\"><a href=\"#The-error-may-exist-in-mapper-UserMapper-xml\" class=\"headerlink\" title=\"The error may exist in /mapper/UserMapper.xml\"></a>The error may exist in /mapper/UserMapper.xml</h3><h3 id=\"Cause-org-apache-ibatis-builder-BuilderException-Error-parsing-SQL-Mapper-Configuration-Cause-java-io-IOException-Could-not-find-resource-mapper-UserMapper-xml\"><a href=\"#Cause-org-apache-ibatis-builder-BuilderException-Error-parsing-SQL-Mapper-Configuration-Cause-java-io-IOException-Could-not-find-resource-mapper-UserMapper-xml\" class=\"headerlink\" title=\"Cause: org.apache.ibatis.builder.BuilderException: Error parsing SQL Mapper Configuration. Cause: java.io.IOException: Could not find resource /mapper/UserMapper.xml\"></a>Cause: org.apache.ibatis.builder.BuilderException: Error parsing SQL Mapper Configuration. Cause: java.io.IOException: Could not find resource /mapper/UserMapper.xml</h3><p><strong>一般是mapper配置文件的问题，请仔细检查配置路径，</strong><br><strong>或配置文件中是否多了或少了什么内容！</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<p>org.apache.ibatis.exceptions.PersistenceException:</p>\n<h3 id=\"Error-building-SqlSession\"><a href=\"#Error-building-SqlSession\" class=\"headerlink\" title=\"Error building SqlSession.\"></a>Error building SqlSession.</h3><h3 id=\"The-error-may-exist-in-mapper-UserMapper-xml\"><a href=\"#The-error-may-exist-in-mapper-UserMapper-xml\" class=\"headerlink\" title=\"The error may exist in /mapper/UserMapper.xml\"></a>The error may exist in /mapper/UserMapper.xml</h3><h3 id=\"Cause-org-apache-ibatis-builder-BuilderException-Error-parsing-SQL-Mapper-Configuration-Cause-java-io-IOException-Could-not-find-resource-mapper-UserMapper-xml\"><a href=\"#Cause-org-apache-ibatis-builder-BuilderException-Error-parsing-SQL-Mapper-Configuration-Cause-java-io-IOException-Could-not-find-resource-mapper-UserMapper-xml\" class=\"headerlink\" title=\"Cause: org.apache.ibatis.builder.BuilderException: Error parsing SQL Mapper Configuration. Cause: java.io.IOException: Could not find resource /mapper/UserMapper.xml\"></a>Cause: org.apache.ibatis.builder.BuilderException: Error parsing SQL Mapper Configuration. Cause: java.io.IOException: Could not find resource /mapper/UserMapper.xml</h3><p><strong>一般是mapper配置文件的问题，请仔细检查配置路径，</strong><br><strong>或配置文件中是否多了或少了什么内容！</strong></p>\n"},{"title":"Mybatis学习中遇到的异常(2)","date":"2017-07-29T03:50:55.000Z","description":"Mybatis学习中遇到的异常","_content":"org.apache.ibatis.builder.IncompleteElementException: Could not find parameter map pers.yijin.mapper.UserMapper.int\n    at org.apache.ibatis.builder.MapperBuilderAssistant.setStatementParameterMap(MapperBuilderAssistant.java:319)\n    at org.apache.ibatis.builder.MapperBuilderAssistant.addMappedStatement(MapperBuilderAssistant.java:283)\n    at org.apache.ibatis.builder.xml.XMLStatementBuilder.parseStatementNode(XMLStatementBuilder.java:107)\n    at org.apache.ibatis.session.Configuration.buildAllStatements(Configuration.java:698)\n    at org.apache.ibatis.session.Configuration.hasStatement(Configuration.java:668)\n    at org.apache.ibatis.session.Configuration.hasStatement(Configuration.java:663)\n    at org.apache.ibatis.binding.MapperMethod$SqlCommand.<init>(MapperMethod.java:180)\n    at org.apache.ibatis.binding.MapperMethod.<init>(MapperMethod.java:43)\n    at org.apache.ibatis.binding.MapperProxy.cachedMapperMethod(MapperProxy.java:58)\n    at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:51)\n    at $Proxy5.findUsernameById(Unknown Source)\n    at pers.yijin.test.UserMapperTest.test(UserMapperTest.java:37)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n    at java.lang.reflect.Method.invoke(Method.java:597)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)\n    at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)\n    at org.junit.runners.BlockJUnit4ClassRunner.runNotIgnored(BlockJUnit4ClassRunner.java:79)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:71)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:49)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:236)\n    at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)\n    at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)\nCaused by: java.lang.IllegalArgumentException: Parameter Maps collection does not contain value for pers.yijin.mapper.UserMapper.int\n    at org.apache.ibatis.session.Configuration$StrictMap.get(Configuration.java:797)\n    at org.apache.ibatis.session.Configuration.getParameterMap(Configuration.java:570)\n    at org.apache.ibatis.builder.MapperBuilderAssistant.setStatementParameterMap(MapperBuilderAssistant.java:317)\n    ... 35 more\n\n***这个原因是把parameterType写成了parameterMap，以后一定注意！***\n","source":"_posts/Mybatis学习中遇到的异常(2).md","raw":"---\ntitle: Mybatis学习中遇到的异常(2)\ndate: 2017-07-29 11:50:55\ncategories: 遇到的坑\ntags:\n     - 填坑经验\ndescription: Mybatis学习中遇到的异常\n---\norg.apache.ibatis.builder.IncompleteElementException: Could not find parameter map pers.yijin.mapper.UserMapper.int\n    at org.apache.ibatis.builder.MapperBuilderAssistant.setStatementParameterMap(MapperBuilderAssistant.java:319)\n    at org.apache.ibatis.builder.MapperBuilderAssistant.addMappedStatement(MapperBuilderAssistant.java:283)\n    at org.apache.ibatis.builder.xml.XMLStatementBuilder.parseStatementNode(XMLStatementBuilder.java:107)\n    at org.apache.ibatis.session.Configuration.buildAllStatements(Configuration.java:698)\n    at org.apache.ibatis.session.Configuration.hasStatement(Configuration.java:668)\n    at org.apache.ibatis.session.Configuration.hasStatement(Configuration.java:663)\n    at org.apache.ibatis.binding.MapperMethod$SqlCommand.<init>(MapperMethod.java:180)\n    at org.apache.ibatis.binding.MapperMethod.<init>(MapperMethod.java:43)\n    at org.apache.ibatis.binding.MapperProxy.cachedMapperMethod(MapperProxy.java:58)\n    at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:51)\n    at $Proxy5.findUsernameById(Unknown Source)\n    at pers.yijin.test.UserMapperTest.test(UserMapperTest.java:37)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n    at java.lang.reflect.Method.invoke(Method.java:597)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)\n    at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)\n    at org.junit.runners.BlockJUnit4ClassRunner.runNotIgnored(BlockJUnit4ClassRunner.java:79)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:71)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:49)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:236)\n    at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)\n    at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)\nCaused by: java.lang.IllegalArgumentException: Parameter Maps collection does not contain value for pers.yijin.mapper.UserMapper.int\n    at org.apache.ibatis.session.Configuration$StrictMap.get(Configuration.java:797)\n    at org.apache.ibatis.session.Configuration.getParameterMap(Configuration.java:570)\n    at org.apache.ibatis.builder.MapperBuilderAssistant.setStatementParameterMap(MapperBuilderAssistant.java:317)\n    ... 35 more\n\n***这个原因是把parameterType写成了parameterMap，以后一定注意！***\n","slug":"Mybatis学习中遇到的异常(2)","published":1,"updated":"2017-07-29T07:03:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjksf3cwo001eh8ef8m0lys96","content":"<p>org.apache.ibatis.builder.IncompleteElementException: Could not find parameter map pers.yijin.mapper.UserMapper.int<br>    at org.apache.ibatis.builder.MapperBuilderAssistant.setStatementParameterMap(MapperBuilderAssistant.java:319)<br>    at org.apache.ibatis.builder.MapperBuilderAssistant.addMappedStatement(MapperBuilderAssistant.java:283)<br>    at org.apache.ibatis.builder.xml.XMLStatementBuilder.parseStatementNode(XMLStatementBuilder.java:107)<br>    at org.apache.ibatis.session.Configuration.buildAllStatements(Configuration.java:698)<br>    at org.apache.ibatis.session.Configuration.hasStatement(Configuration.java:668)<br>    at org.apache.ibatis.session.Configuration.hasStatement(Configuration.java:663)<br>    at org.apache.ibatis.binding.MapperMethod$SqlCommand.<init>(MapperMethod.java:180)<br>    at org.apache.ibatis.binding.MapperMethod.<init>(MapperMethod.java:43)<br>    at org.apache.ibatis.binding.MapperProxy.cachedMapperMethod(MapperProxy.java:58)<br>    at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:51)<br>    at $Proxy5.findUsernameById(Unknown Source)<br>    at pers.yijin.test.UserMapperTest.test(UserMapperTest.java:37)<br>    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)<br>    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)<br>    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)<br>    at java.lang.reflect.Method.invoke(Method.java:597)<br>    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)<br>    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)<br>    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)<br>    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)<br>    at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)<br>    at org.junit.runners.BlockJUnit4ClassRunner.runNotIgnored(BlockJUnit4ClassRunner.java:79)<br>    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:71)<br>    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:49)<br>    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)<br>    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)<br>    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)<br>    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)<br>    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)<br>    at org.junit.runners.ParentRunner.run(ParentRunner.java:236)<br>    at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)<br>    at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)<br>    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)<br>    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)<br>    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)<br>    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)<br>Caused by: java.lang.IllegalArgumentException: Parameter Maps collection does not contain value for pers.yijin.mapper.UserMapper.int<br>    at org.apache.ibatis.session.Configuration$StrictMap.get(Configuration.java:797)<br>    at org.apache.ibatis.session.Configuration.getParameterMap(Configuration.java:570)<br>    at org.apache.ibatis.builder.MapperBuilderAssistant.setStatementParameterMap(MapperBuilderAssistant.java:317)<br>    … 35 more</init></init></p>\n<p><strong><em>这个原因是把parameterType写成了parameterMap，以后一定注意！</em></strong></p>\n","site":{"data":{}},"excerpt":"","more":"<p>org.apache.ibatis.builder.IncompleteElementException: Could not find parameter map pers.yijin.mapper.UserMapper.int<br>    at org.apache.ibatis.builder.MapperBuilderAssistant.setStatementParameterMap(MapperBuilderAssistant.java:319)<br>    at org.apache.ibatis.builder.MapperBuilderAssistant.addMappedStatement(MapperBuilderAssistant.java:283)<br>    at org.apache.ibatis.builder.xml.XMLStatementBuilder.parseStatementNode(XMLStatementBuilder.java:107)<br>    at org.apache.ibatis.session.Configuration.buildAllStatements(Configuration.java:698)<br>    at org.apache.ibatis.session.Configuration.hasStatement(Configuration.java:668)<br>    at org.apache.ibatis.session.Configuration.hasStatement(Configuration.java:663)<br>    at org.apache.ibatis.binding.MapperMethod$SqlCommand.<init>(MapperMethod.java:180)<br>    at org.apache.ibatis.binding.MapperMethod.<init>(MapperMethod.java:43)<br>    at org.apache.ibatis.binding.MapperProxy.cachedMapperMethod(MapperProxy.java:58)<br>    at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:51)<br>    at $Proxy5.findUsernameById(Unknown Source)<br>    at pers.yijin.test.UserMapperTest.test(UserMapperTest.java:37)<br>    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)<br>    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)<br>    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)<br>    at java.lang.reflect.Method.invoke(Method.java:597)<br>    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)<br>    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)<br>    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)<br>    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)<br>    at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)<br>    at org.junit.runners.BlockJUnit4ClassRunner.runNotIgnored(BlockJUnit4ClassRunner.java:79)<br>    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:71)<br>    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:49)<br>    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)<br>    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)<br>    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)<br>    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)<br>    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)<br>    at org.junit.runners.ParentRunner.run(ParentRunner.java:236)<br>    at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)<br>    at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)<br>    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)<br>    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)<br>    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)<br>    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)<br>Caused by: java.lang.IllegalArgumentException: Parameter Maps collection does not contain value for pers.yijin.mapper.UserMapper.int<br>    at org.apache.ibatis.session.Configuration$StrictMap.get(Configuration.java:797)<br>    at org.apache.ibatis.session.Configuration.getParameterMap(Configuration.java:570)<br>    at org.apache.ibatis.builder.MapperBuilderAssistant.setStatementParameterMap(MapperBuilderAssistant.java:317)<br>    … 35 more</init></init></p>\n<p><strong><em>这个原因是把parameterType写成了parameterMap，以后一定注意！</em></strong></p>\n"},{"title":"Mybatis学习中遇到的异常(3)","date":"2017-07-29T03:50:55.000Z","description":"Mybatis学习中遇到的异常","_content":"Mybatis与Spring整合时遇到异常如下：\n\norg.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [applicationContext.xml]: Error setting property values; nested exception is org.springframework.beans.PropertyBatchUpdateException; nested PropertyAccessExceptions (1) are:\nPropertyAccessException 1: org.springframework.beans.MethodInvocationException: Property 'dataSource' threw exception; nested exception is java.lang.NoClassDefFoundError: org/springframework/jdbc/datasource/TransactionAwareDataSourceProxy\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1427)\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1132)\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:522)\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:461)\n    at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:295)\n    at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223)\n    at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:292)\n    at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)\n    at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:589)\n    at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:932)\n    at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:479)\n    at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:139)\n    at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:83)\n    at pers.yijin.test.UserDaoImplTest.setUp(UserDaoImplTest.java:15)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n    at java.lang.reflect.Method.invoke(Method.java:597)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)\n    at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:27)\n    at org.junit.runners.BlockJUnit4ClassRunner.runNotIgnored(BlockJUnit4ClassRunner.java:79)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:71)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:49)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:236)\n    at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)\n    at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)\nCaused by: org.springframework.beans.PropertyBatchUpdateException; nested PropertyAccessExceptions (1) are:\nPropertyAccessException 1: org.springframework.beans.MethodInvocationException: Property 'dataSource' threw exception; nested exception is java.lang.NoClassDefFoundError: org/springframework/jdbc/datasource/TransactionAwareDataSourceProxy\n    at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:101)\n    at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:57)\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1424)\n    ... 36 more\n\n出现异常的原因是因为spring-jdbcjar没导入，类找不到了","source":"_posts/Mybatis学习中遇到的异常(3).md","raw":"---\ntitle: Mybatis学习中遇到的异常(3)\ndate: 2017-07-29 11:50:55\ncategories: 遇到的坑\ntags:\n     - 填坑经验\ndescription: Mybatis学习中遇到的异常\n---\nMybatis与Spring整合时遇到异常如下：\n\norg.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [applicationContext.xml]: Error setting property values; nested exception is org.springframework.beans.PropertyBatchUpdateException; nested PropertyAccessExceptions (1) are:\nPropertyAccessException 1: org.springframework.beans.MethodInvocationException: Property 'dataSource' threw exception; nested exception is java.lang.NoClassDefFoundError: org/springframework/jdbc/datasource/TransactionAwareDataSourceProxy\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1427)\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1132)\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:522)\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:461)\n    at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:295)\n    at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223)\n    at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:292)\n    at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)\n    at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:589)\n    at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:932)\n    at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:479)\n    at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:139)\n    at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:83)\n    at pers.yijin.test.UserDaoImplTest.setUp(UserDaoImplTest.java:15)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n    at java.lang.reflect.Method.invoke(Method.java:597)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)\n    at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:27)\n    at org.junit.runners.BlockJUnit4ClassRunner.runNotIgnored(BlockJUnit4ClassRunner.java:79)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:71)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:49)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:236)\n    at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)\n    at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)\nCaused by: org.springframework.beans.PropertyBatchUpdateException; nested PropertyAccessExceptions (1) are:\nPropertyAccessException 1: org.springframework.beans.MethodInvocationException: Property 'dataSource' threw exception; nested exception is java.lang.NoClassDefFoundError: org/springframework/jdbc/datasource/TransactionAwareDataSourceProxy\n    at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:101)\n    at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:57)\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1424)\n    ... 36 more\n\n出现异常的原因是因为spring-jdbcjar没导入，类找不到了","slug":"Mybatis学习中遇到的异常(3)","published":1,"updated":"2017-07-29T07:04:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjksf3cwq001ih8efx8cuot2z","content":"<p>Mybatis与Spring整合时遇到异常如下：</p>\n<p>org.springframework.beans.factory.BeanCreationException: Error creating bean with name ‘sqlSessionFactory’ defined in class path resource [applicationContext.xml]: Error setting property values; nested exception is org.springframework.beans.PropertyBatchUpdateException; nested PropertyAccessExceptions (1) are:<br>PropertyAccessException 1: org.springframework.beans.MethodInvocationException: Property ‘dataSource’ threw exception; nested exception is java.lang.NoClassDefFoundError: org/springframework/jdbc/datasource/TransactionAwareDataSourceProxy<br>    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1427)<br>    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1132)<br>    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:522)<br>    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:461)<br>    at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:295)<br>    at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223)<br>    at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:292)<br>    at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)<br>    at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:589)<br>    at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:932)<br>    at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:479)<br>    at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:139)<br>    at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:83)<br>    at pers.yijin.test.UserDaoImplTest.setUp(UserDaoImplTest.java:15)<br>    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)<br>    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)<br>    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)<br>    at java.lang.reflect.Method.invoke(Method.java:597)<br>    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)<br>    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)<br>    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)<br>    at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:27)<br>    at org.junit.runners.BlockJUnit4ClassRunner.runNotIgnored(BlockJUnit4ClassRunner.java:79)<br>    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:71)<br>    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:49)<br>    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)<br>    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)<br>    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)<br>    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)<br>    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)<br>    at org.junit.runners.ParentRunner.run(ParentRunner.java:236)<br>    at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)<br>    at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)<br>    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)<br>    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)<br>    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)<br>    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)<br>Caused by: org.springframework.beans.PropertyBatchUpdateException; nested PropertyAccessExceptions (1) are:<br>PropertyAccessException 1: org.springframework.beans.MethodInvocationException: Property ‘dataSource’ threw exception; nested exception is java.lang.NoClassDefFoundError: org/springframework/jdbc/datasource/TransactionAwareDataSourceProxy<br>    at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:101)<br>    at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:57)<br>    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1424)<br>    … 36 more</init></init></p>\n<p>出现异常的原因是因为spring-jdbcjar没导入，类找不到了</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Mybatis与Spring整合时遇到异常如下：</p>\n<p>org.springframework.beans.factory.BeanCreationException: Error creating bean with name ‘sqlSessionFactory’ defined in class path resource [applicationContext.xml]: Error setting property values; nested exception is org.springframework.beans.PropertyBatchUpdateException; nested PropertyAccessExceptions (1) are:<br>PropertyAccessException 1: org.springframework.beans.MethodInvocationException: Property ‘dataSource’ threw exception; nested exception is java.lang.NoClassDefFoundError: org/springframework/jdbc/datasource/TransactionAwareDataSourceProxy<br>    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1427)<br>    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1132)<br>    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:522)<br>    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:461)<br>    at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:295)<br>    at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223)<br>    at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:292)<br>    at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)<br>    at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:589)<br>    at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:932)<br>    at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:479)<br>    at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:139)<br>    at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:83)<br>    at pers.yijin.test.UserDaoImplTest.setUp(UserDaoImplTest.java:15)<br>    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)<br>    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)<br>    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)<br>    at java.lang.reflect.Method.invoke(Method.java:597)<br>    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)<br>    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)<br>    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)<br>    at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:27)<br>    at org.junit.runners.BlockJUnit4ClassRunner.runNotIgnored(BlockJUnit4ClassRunner.java:79)<br>    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:71)<br>    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:49)<br>    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)<br>    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)<br>    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)<br>    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)<br>    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)<br>    at org.junit.runners.ParentRunner.run(ParentRunner.java:236)<br>    at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)<br>    at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)<br>    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)<br>    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)<br>    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)<br>    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)<br>Caused by: org.springframework.beans.PropertyBatchUpdateException; nested PropertyAccessExceptions (1) are:<br>PropertyAccessException 1: org.springframework.beans.MethodInvocationException: Property ‘dataSource’ threw exception; nested exception is java.lang.NoClassDefFoundError: org/springframework/jdbc/datasource/TransactionAwareDataSourceProxy<br>    at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:101)<br>    at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:57)<br>    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1424)<br>    … 36 more</init></init></p>\n<p>出现异常的原因是因为spring-jdbcjar没导入，类找不到了</p>\n"},{"title":"Prettier完全使用指北","date":"2018-04-15T14:05:55.000Z","description":"Prettier教程","_content":"# Prettier完全使用指北\n\n## What is Prettier？\n\n* 可以自己执行的格式化工具\n* 支持多种语言\n* 集成众多编辑器\n* 少量的设置\n\n## Advantages\n\n* 保存即自动格式代码，书写代码无需关注格式\n* 无需在code review中审查代码格式\n* 提高效率，节省时间\n* ....\n\n## Get Started\n\n1. 安装Prettier\n\n```\nnpm install --save-dev --save-exact prettier\n```\n\n2. 在package.json中添加script\n\n```json\n{\n  \"scripts\": {\n    \"format\": \"prettier --write **/*.{js,vue}\"\n  }\n}\n```\n\n3. 创建一个配置文件.prettierrc，实例如下，后面有详细配置\n\n```json\n{\n  \"printWidth\": 100,\n  \"singleQuote\": true,\n  \"trailingComma\": \"es5\"\n}\n```\n\n4. 最后运行脚本\n\n```\nnpm run format\n```\n\n## Ignore Files \n\nPrettier会默认忽略node_modules目录下的代码，配置.prettierignore可忽略其他文件。\n\n## .prettierrc文件详解\n\n```json\n{\n    \"useTabs\": false,      // 制表符缩进\n    \"printWidth\": 100,     // 换行长度\n    \"tabWidth\": 2,         // 缩进空格数\n    \"singleQuote\": false,  // 使用单引号\n    \"semi\": true,          // 末尾分号设置\n    /**\n     * 最后一个对象元素加逗号\n     * 选项:\n     *   - \"none\" - 不添加\n     *   - \"es5\" - ES5中末尾添加逗号\n     *   - \"all\" - 全部添加 \n     */\n    \"trailingComma\": \"none\",\n    \"bracketSpacing\": true,       // 对象，数组加空格\n    \"jsxBracketSameLine\": false,  // JSX > 后是否另起一行\n    \"arrowParens\": \"always\", // (x) => {}箭头函数值有一个参数是否要有小括号\n    /**\n     * Prettier解析器设置\n     * 选项:\n     *   - \"flow\" 流的形式\n     *   - \"babylon\" babel解析器\n     */\n    \"parser\": \"babylon\",\n    \"requirePragma\": false,   // 是否要注释来决定是否格式化代码\n    \"proseWrap\": \"preserve\"   // 代码超出是否要换行 preserve保留\n}\n```","source":"_posts/Prettier完全使用指北.md","raw":"---\ntitle: Prettier完全使用指北\ndate: 2018-04-15 22:05:55\ncategories: 团队规范构建\ntags:\n     - 规范\ndescription: Prettier教程\n---\n# Prettier完全使用指北\n\n## What is Prettier？\n\n* 可以自己执行的格式化工具\n* 支持多种语言\n* 集成众多编辑器\n* 少量的设置\n\n## Advantages\n\n* 保存即自动格式代码，书写代码无需关注格式\n* 无需在code review中审查代码格式\n* 提高效率，节省时间\n* ....\n\n## Get Started\n\n1. 安装Prettier\n\n```\nnpm install --save-dev --save-exact prettier\n```\n\n2. 在package.json中添加script\n\n```json\n{\n  \"scripts\": {\n    \"format\": \"prettier --write **/*.{js,vue}\"\n  }\n}\n```\n\n3. 创建一个配置文件.prettierrc，实例如下，后面有详细配置\n\n```json\n{\n  \"printWidth\": 100,\n  \"singleQuote\": true,\n  \"trailingComma\": \"es5\"\n}\n```\n\n4. 最后运行脚本\n\n```\nnpm run format\n```\n\n## Ignore Files \n\nPrettier会默认忽略node_modules目录下的代码，配置.prettierignore可忽略其他文件。\n\n## .prettierrc文件详解\n\n```json\n{\n    \"useTabs\": false,      // 制表符缩进\n    \"printWidth\": 100,     // 换行长度\n    \"tabWidth\": 2,         // 缩进空格数\n    \"singleQuote\": false,  // 使用单引号\n    \"semi\": true,          // 末尾分号设置\n    /**\n     * 最后一个对象元素加逗号\n     * 选项:\n     *   - \"none\" - 不添加\n     *   - \"es5\" - ES5中末尾添加逗号\n     *   - \"all\" - 全部添加 \n     */\n    \"trailingComma\": \"none\",\n    \"bracketSpacing\": true,       // 对象，数组加空格\n    \"jsxBracketSameLine\": false,  // JSX > 后是否另起一行\n    \"arrowParens\": \"always\", // (x) => {}箭头函数值有一个参数是否要有小括号\n    /**\n     * Prettier解析器设置\n     * 选项:\n     *   - \"flow\" 流的形式\n     *   - \"babylon\" babel解析器\n     */\n    \"parser\": \"babylon\",\n    \"requirePragma\": false,   // 是否要注释来决定是否格式化代码\n    \"proseWrap\": \"preserve\"   // 代码超出是否要换行 preserve保留\n}\n```","slug":"Prettier完全使用指北","published":1,"updated":"2018-04-15T14:26:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjksf3cws001mh8ef6kb7pp5o","content":"<h1 id=\"Prettier完全使用指北\"><a href=\"#Prettier完全使用指北\" class=\"headerlink\" title=\"Prettier完全使用指北\"></a>Prettier完全使用指北</h1><h2 id=\"What-is-Prettier？\"><a href=\"#What-is-Prettier？\" class=\"headerlink\" title=\"What is Prettier？\"></a>What is Prettier？</h2><ul>\n<li>可以自己执行的格式化工具</li>\n<li>支持多种语言</li>\n<li>集成众多编辑器</li>\n<li>少量的设置</li>\n</ul>\n<h2 id=\"Advantages\"><a href=\"#Advantages\" class=\"headerlink\" title=\"Advantages\"></a>Advantages</h2><ul>\n<li>保存即自动格式代码，书写代码无需关注格式</li>\n<li>无需在code review中审查代码格式</li>\n<li>提高效率，节省时间</li>\n<li>….</li>\n</ul>\n<h2 id=\"Get-Started\"><a href=\"#Get-Started\" class=\"headerlink\" title=\"Get Started\"></a>Get Started</h2><ol>\n<li>安装Prettier</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev --save-exact prettier</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在package.json中添加script</li>\n</ol>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"format\"</span>: <span class=\"string\">\"prettier --write **/*.&#123;js,vue&#125;\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>创建一个配置文件.prettierrc，实例如下，后面有详细配置</li>\n</ol>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"printWidth\"</span>: <span class=\"number\">100</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"singleQuote\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"trailingComma\"</span>: <span class=\"string\">\"es5\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>最后运行脚本</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run format</span><br></pre></td></tr></table></figure>\n<h2 id=\"Ignore-Files\"><a href=\"#Ignore-Files\" class=\"headerlink\" title=\"Ignore Files\"></a>Ignore Files</h2><p>Prettier会默认忽略node_modules目录下的代码，配置.prettierignore可忽略其他文件。</p>\n<h2 id=\"prettierrc文件详解\"><a href=\"#prettierrc文件详解\" class=\"headerlink\" title=\".prettierrc文件详解\"></a>.prettierrc文件详解</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    \"useTabs\": false,      // 制表符缩进</span><br><span class=\"line\">    \"printWidth\": 100,     // 换行长度</span><br><span class=\"line\">    \"tabWidth\": 2,         // 缩进空格数</span><br><span class=\"line\">    \"singleQuote\": false,  // 使用单引号</span><br><span class=\"line\">    \"semi\": true,          // 末尾分号设置</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 最后一个对象元素加逗号</span><br><span class=\"line\">     * 选项:</span><br><span class=\"line\">     *   - \"none\" - 不添加</span><br><span class=\"line\">     *   - \"es5\" - ES5中末尾添加逗号</span><br><span class=\"line\">     *   - \"all\" - 全部添加 </span><br><span class=\"line\">     */</span><br><span class=\"line\">    \"trailingComma\": \"none\",</span><br><span class=\"line\">    \"bracketSpacing\": true,       // 对象，数组加空格</span><br><span class=\"line\">    \"jsxBracketSameLine\": false,  // JSX &gt; 后是否另起一行</span><br><span class=\"line\">    \"arrowParens\": \"always\", // (x) =&gt; &#123;&#125;箭头函数值有一个参数是否要有小括号</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Prettier解析器设置</span><br><span class=\"line\">     * 选项:</span><br><span class=\"line\">     *   - \"flow\" 流的形式</span><br><span class=\"line\">     *   - \"babylon\" babel解析器</span><br><span class=\"line\">     */</span><br><span class=\"line\">    \"parser\": \"babylon\",</span><br><span class=\"line\">    \"requirePragma\": false,   // 是否要注释来决定是否格式化代码</span><br><span class=\"line\">    \"proseWrap\": \"preserve\"   // 代码超出是否要换行 preserve保留</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Prettier完全使用指北\"><a href=\"#Prettier完全使用指北\" class=\"headerlink\" title=\"Prettier完全使用指北\"></a>Prettier完全使用指北</h1><h2 id=\"What-is-Prettier？\"><a href=\"#What-is-Prettier？\" class=\"headerlink\" title=\"What is Prettier？\"></a>What is Prettier？</h2><ul>\n<li>可以自己执行的格式化工具</li>\n<li>支持多种语言</li>\n<li>集成众多编辑器</li>\n<li>少量的设置</li>\n</ul>\n<h2 id=\"Advantages\"><a href=\"#Advantages\" class=\"headerlink\" title=\"Advantages\"></a>Advantages</h2><ul>\n<li>保存即自动格式代码，书写代码无需关注格式</li>\n<li>无需在code review中审查代码格式</li>\n<li>提高效率，节省时间</li>\n<li>….</li>\n</ul>\n<h2 id=\"Get-Started\"><a href=\"#Get-Started\" class=\"headerlink\" title=\"Get Started\"></a>Get Started</h2><ol>\n<li>安装Prettier</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev --save-exact prettier</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在package.json中添加script</li>\n</ol>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"format\"</span>: <span class=\"string\">\"prettier --write **/*.&#123;js,vue&#125;\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>创建一个配置文件.prettierrc，实例如下，后面有详细配置</li>\n</ol>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"printWidth\"</span>: <span class=\"number\">100</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"singleQuote\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"trailingComma\"</span>: <span class=\"string\">\"es5\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>最后运行脚本</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run format</span><br></pre></td></tr></table></figure>\n<h2 id=\"Ignore-Files\"><a href=\"#Ignore-Files\" class=\"headerlink\" title=\"Ignore Files\"></a>Ignore Files</h2><p>Prettier会默认忽略node_modules目录下的代码，配置.prettierignore可忽略其他文件。</p>\n<h2 id=\"prettierrc文件详解\"><a href=\"#prettierrc文件详解\" class=\"headerlink\" title=\".prettierrc文件详解\"></a>.prettierrc文件详解</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    \"useTabs\": false,      // 制表符缩进</span><br><span class=\"line\">    \"printWidth\": 100,     // 换行长度</span><br><span class=\"line\">    \"tabWidth\": 2,         // 缩进空格数</span><br><span class=\"line\">    \"singleQuote\": false,  // 使用单引号</span><br><span class=\"line\">    \"semi\": true,          // 末尾分号设置</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 最后一个对象元素加逗号</span><br><span class=\"line\">     * 选项:</span><br><span class=\"line\">     *   - \"none\" - 不添加</span><br><span class=\"line\">     *   - \"es5\" - ES5中末尾添加逗号</span><br><span class=\"line\">     *   - \"all\" - 全部添加 </span><br><span class=\"line\">     */</span><br><span class=\"line\">    \"trailingComma\": \"none\",</span><br><span class=\"line\">    \"bracketSpacing\": true,       // 对象，数组加空格</span><br><span class=\"line\">    \"jsxBracketSameLine\": false,  // JSX &gt; 后是否另起一行</span><br><span class=\"line\">    \"arrowParens\": \"always\", // (x) =&gt; &#123;&#125;箭头函数值有一个参数是否要有小括号</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Prettier解析器设置</span><br><span class=\"line\">     * 选项:</span><br><span class=\"line\">     *   - \"flow\" 流的形式</span><br><span class=\"line\">     *   - \"babylon\" babel解析器</span><br><span class=\"line\">     */</span><br><span class=\"line\">    \"parser\": \"babylon\",</span><br><span class=\"line\">    \"requirePragma\": false,   // 是否要注释来决定是否格式化代码</span><br><span class=\"line\">    \"proseWrap\": \"preserve\"   // 代码超出是否要换行 preserve保留</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"SSH做项目时经验总结(1)","date":"2017-07-29T13:43:59.000Z","description":"SSH做项目时经验总结-1","_content":"```\n\n1、\n    application.xml导入其他子文件\n    <import resource=\"applicationContext-staff.xml\"/>\n    Struts.xm1导入其他子文件\n    <include file=\"struts/struts-staff.xml\"></include>\n2、\n    统一访问界面的UIAction \n    <action name=\"uiAction_*_*\">\n        <result>/WEB-INF/pages/{1}/{2}.jsp</result>\n    </action>\n例如：<frame src=\"${pageContext.request.contextPath}/uiAction_fram`这里写代码片`e_left1.action\" scrolling=\"no\"/>\n3、\n登录拦截器\nprotected String doIntercept(ActionInvocation invocation) throws Exception {\n        //获得session中的对象\n        Object obj = ActionContext.getContext().getSession().get(\"staff\");\n        if(obj == null){\n            //获得当前action\n            Object action = invocation.getAction();\n            //判断是否继承了ActionSupport\n            if(action instanceof ActionSupport){\n                ActionSupport actionSupport = (ActionSupport) action;\n                //使用ActionSupport类添加提示信息\n                actionSupport.addFieldError(\"\", \"您还未登录，请登录！\");\n            }\n            //未登录，需要登录\n            return \"login\";\n        }\n        //登录过，直接放行\n        return invocation.invoke();\n    }\n4、\n 延长session关闭时间，配置spring的OpenSessionInViewFilter过滤器,并且要在struts核心过滤器前面\n    <filter>\n        <filter-name>sessionFilter</filter-name>\n        <filter-class>org.springframework.orm.hibernate3.support.OpenSessionInViewFilter</filter-class>\n    </filter>\n    <filter-mapping>\n        <filter-name>sessionFilter</filter-name>\n        <url-pattern>/*</url-pattern>\n    </filter-mapping>\n5、\n遍历时偶数判断\n<s:iterator value=\"allStaff\" status=\"vs\">\n<!-- vs.even表示判断是否为偶数，并把vs记录的遍历信息存入小mapActionContext中 -->\n    <tr class=\"<s:property value=\"#vs.even ? 'tabtd2':'tabtd1'\"/>\"> \n6、\n以注入方式配置actionName和名称空间\n<result name=\"edit\" type=\"redirectAction\">\n    <param name=\"namespace\">/</param>\n    <param name=\"actionName\">staffAction_findAll</param>\n</result>\n7、\n修饰日期，先用date标签修饰格式，在调用var属性存入ActionContext中 \n<s:date name=\"onDutyDate\" format=\"yyyy-MM-dd\" var=\"dutyDate\"/>\n            <s:textfield name=\"onDutyDate\" readonly=\"true\" value=\"%{#dutyDate}\" />\n8、\nselect标签的使用及listKey和listValue使用\n<td width=\"10%\">所属部门：</td>\n<td width=\"20%\">\n    <s:select list=\"findAllDepartment\" name=\"post.department.depId\" onchange=\"\" \n    listKey=\"depId\" listValue=\"depName\" headerKey=\"\" headerValue=\"----请--选--择----\">\n    </s:select>\n</td>\n<td width=\"8%\">职务：</td>\n<td width=\"62%\">\n    <%-- 如果职工表中的数据没有职务，则会报异常，所以要进行判断 --%>\n    <s:select list=\"post != null ? post.department.postSet : {}\" name=\"post.postId\" id=\"selectPostId\"\n    listKey=\"postId\" listValue=\"postName\" headerKey=\"\" headerValue=\"----请--选--择----\">\n    </s:select>\n</td>\n9、\n使用select，需要在action中获得需要的数据，并压入栈\n需要手动获得所有部门的集合，因为关联数据中没有部门集合这一字段\nList<CrmDepartment> findAllDepartment = departmentService.findAllDepartment();\nActionContext.getContext().getValueStack().set(\"findAllDepartment\", findAllDepartment);\n10、\n服务器处理ajax数据\npublic String findAllWithDepartment() throws Exception{\n    List<CrmPost> findAllWithDepartment = postService.findAllWithDepartment(crmPost.getDepartment());\n    //将java对象装换为json数据\n    //1.排除不需要的数据\n    JsonConfig jsonConfig = new JsonConfig();\n    jsonConfig.setExcludes(new String[]{\"department\",\"staffSet\"});\n    //2.转换\n    String jsonData = JSONArray.fromObject(findAllWithDepartment, jsonConfig).toString();\n    //3.处理乱码\n    ServletActionContext.getResponse().setContentType(\"text/html;charset=UTF-8\");\n    //4.发送给浏览器\n    ServletActionContext.getResponse().getWriter().print(jsonData);\n    return \"none\";\n}\najax代码\n<script type=\"text/javascript\">\n        function showPost(obj){\n            //选中部门\n            var depId = obj.value\n            //发送ajax通过部门查询职务\n            //1.获得引擎\n            var xmlhttp;\n            if (window.XMLHttpRequest){\n                // code for IE7+, Firefox, Chrome, Opera, Safari\n                 xmlhttp=new XMLHttpRequest();\n            }\n            else{\n                // code for IE6, IE5\n                 xmlhttp=new ActiveXObject(\"Microsoft.XMLHTTP\");\n            }\n            //2.设置回调函数\n            xmlhttp.onreadystatechange() = function(){\n                if(xmlhttp.readyState == 4 && xmlhttp.status == 200){\n                    //获得返回的数据\n                    var text = xmlhttp.responseText;\n                    //把数据装换成数组\n                    var jsonData = eval(\"(\"+text+\")\");\n                    //获得select标签\n                    var postSelectElement = document.getElementById(\"selectPostId\"); \n                    postSelectElement.innerHTML = \"<option value=''>----请--选--择----</option>\";\n                    //进行遍历\n                    for(i = 0; i < jsonData.length; i++){\n                        var post = jsonData[i];\n                        //获得Id\n                        var postId = post.postId;\n                        //获得名称\n                        var postName = post.postName;\n                        //修改html标签内容\n                        postSelectElement.innerHTML += \"<option value='\"+postId+\"'>\"+postName+\"</option>\";\n                    }\n                }\n            };\n            //3.创建链接\n            var url = \"${pageContext.request.contextPath}/postAction_findAllWithDepartment?department.depId=\"+depId;\n            xmlhttp.open(\"GET\", url);\n            //4.发送请求,如果使用POST方法，send（depId）应传入值\n            xmlhttp.send(null);\n        }\n    </script>\n11、\n条件查询拼接语句的思路\n@Override\n    public List<CrmCourseType> findCourseByCondition(CrmCourseType crmCourseType) {\n        // 用于拼接HQL语句\n        StringBuilder builder = new StringBuilder();\n        // 用来封装参数，list有序，可以重复\n        List<Object> list = new ArrayList<Object>();\n        builder.append(\"from CrmCourseType where 1=1\");\n        // 课程类别\n        if (StringUtils.isNotBlank(crmCourseType.getCourseName())) {\n            builder.append(\" and courseName like ? \");\n            list.add(\"%\" + crmCourseType.getCourseName() + \"%\");\n        }\n        // 课程简介\n        if (StringUtils.isNotBlank(crmCourseType.getRemark())) {\n            builder.append(\" and remark like ? \");\n            list.add(\"%\" + crmCourseType.getRemark() + \"%\");\n        }\n        // 学时\n        if (StringUtils.isNotBlank(crmCourseType.getTotalStart())) {\n            builder.append(\" and total >= ? \");\n            list.add(Integer.parseInt(crmCourseType.getTotalStart()));\n        }\n        if (StringUtils.isNotBlank(crmCourseType.getTotalEnd())) {\n            builder.append(\" and total <= ? \");\n            list.add(Integer.parseInt(crmCourseType.getTotalEnd()));\n        }\n        // 费用\n        if (StringUtils.isNotBlank(crmCourseType.getLessonCostStart())) {\n            builder.append(\" and courseCost >= ? \");\n            list.add(Double.parseDouble(crmCourseType.getLessonCostStart()));\n        }\n        if (StringUtils.isNotBlank(crmCourseType.getLessonCostEnd())) {\n            builder.append(\" and courseCost <= ? \");\n            list.add(Double.parseDouble(crmCourseType.getLessonCostEnd()));\n        }\n        return coursetypeDao.findCourseByCondition(builder.toString(),\n                list.toArray());\n    }\n12、\n更新和添加写在一起时要在页面中判断Id是否应该传入，如果是添加数据，没有id则使用hidden标签传入id会报错\n<s:if test=\"courseTypeId != null\">\n        <s:hidden name=\"courseTypeId\" value=\"%{courseTypeId}\"/>\n</s:if>\n13、\n标签回显action也要判断Id，如果不判断会报异常\nif(StringUtils.isNotBlank(crmCourseType.getCourseTypeId())){\n            CrmCourseType findCourse = coursetypeService.findCourseById(crmCourseType);\n            ActionContext.getContext().getValueStack().push(findCourse);\n}\n\n```\n\n","source":"_posts/SSH做项目时经验总结-1.md","raw":"---\ntitle: SSH做项目时经验总结(1)\ndate: 2017-07-29 21:43:59\ncategories: 遇到的坑\ntags:\n     - 填坑经验\ndescription: SSH做项目时经验总结-1\n---\n```\n\n1、\n    application.xml导入其他子文件\n    <import resource=\"applicationContext-staff.xml\"/>\n    Struts.xm1导入其他子文件\n    <include file=\"struts/struts-staff.xml\"></include>\n2、\n    统一访问界面的UIAction \n    <action name=\"uiAction_*_*\">\n        <result>/WEB-INF/pages/{1}/{2}.jsp</result>\n    </action>\n例如：<frame src=\"${pageContext.request.contextPath}/uiAction_fram`这里写代码片`e_left1.action\" scrolling=\"no\"/>\n3、\n登录拦截器\nprotected String doIntercept(ActionInvocation invocation) throws Exception {\n        //获得session中的对象\n        Object obj = ActionContext.getContext().getSession().get(\"staff\");\n        if(obj == null){\n            //获得当前action\n            Object action = invocation.getAction();\n            //判断是否继承了ActionSupport\n            if(action instanceof ActionSupport){\n                ActionSupport actionSupport = (ActionSupport) action;\n                //使用ActionSupport类添加提示信息\n                actionSupport.addFieldError(\"\", \"您还未登录，请登录！\");\n            }\n            //未登录，需要登录\n            return \"login\";\n        }\n        //登录过，直接放行\n        return invocation.invoke();\n    }\n4、\n 延长session关闭时间，配置spring的OpenSessionInViewFilter过滤器,并且要在struts核心过滤器前面\n    <filter>\n        <filter-name>sessionFilter</filter-name>\n        <filter-class>org.springframework.orm.hibernate3.support.OpenSessionInViewFilter</filter-class>\n    </filter>\n    <filter-mapping>\n        <filter-name>sessionFilter</filter-name>\n        <url-pattern>/*</url-pattern>\n    </filter-mapping>\n5、\n遍历时偶数判断\n<s:iterator value=\"allStaff\" status=\"vs\">\n<!-- vs.even表示判断是否为偶数，并把vs记录的遍历信息存入小mapActionContext中 -->\n    <tr class=\"<s:property value=\"#vs.even ? 'tabtd2':'tabtd1'\"/>\"> \n6、\n以注入方式配置actionName和名称空间\n<result name=\"edit\" type=\"redirectAction\">\n    <param name=\"namespace\">/</param>\n    <param name=\"actionName\">staffAction_findAll</param>\n</result>\n7、\n修饰日期，先用date标签修饰格式，在调用var属性存入ActionContext中 \n<s:date name=\"onDutyDate\" format=\"yyyy-MM-dd\" var=\"dutyDate\"/>\n            <s:textfield name=\"onDutyDate\" readonly=\"true\" value=\"%{#dutyDate}\" />\n8、\nselect标签的使用及listKey和listValue使用\n<td width=\"10%\">所属部门：</td>\n<td width=\"20%\">\n    <s:select list=\"findAllDepartment\" name=\"post.department.depId\" onchange=\"\" \n    listKey=\"depId\" listValue=\"depName\" headerKey=\"\" headerValue=\"----请--选--择----\">\n    </s:select>\n</td>\n<td width=\"8%\">职务：</td>\n<td width=\"62%\">\n    <%-- 如果职工表中的数据没有职务，则会报异常，所以要进行判断 --%>\n    <s:select list=\"post != null ? post.department.postSet : {}\" name=\"post.postId\" id=\"selectPostId\"\n    listKey=\"postId\" listValue=\"postName\" headerKey=\"\" headerValue=\"----请--选--择----\">\n    </s:select>\n</td>\n9、\n使用select，需要在action中获得需要的数据，并压入栈\n需要手动获得所有部门的集合，因为关联数据中没有部门集合这一字段\nList<CrmDepartment> findAllDepartment = departmentService.findAllDepartment();\nActionContext.getContext().getValueStack().set(\"findAllDepartment\", findAllDepartment);\n10、\n服务器处理ajax数据\npublic String findAllWithDepartment() throws Exception{\n    List<CrmPost> findAllWithDepartment = postService.findAllWithDepartment(crmPost.getDepartment());\n    //将java对象装换为json数据\n    //1.排除不需要的数据\n    JsonConfig jsonConfig = new JsonConfig();\n    jsonConfig.setExcludes(new String[]{\"department\",\"staffSet\"});\n    //2.转换\n    String jsonData = JSONArray.fromObject(findAllWithDepartment, jsonConfig).toString();\n    //3.处理乱码\n    ServletActionContext.getResponse().setContentType(\"text/html;charset=UTF-8\");\n    //4.发送给浏览器\n    ServletActionContext.getResponse().getWriter().print(jsonData);\n    return \"none\";\n}\najax代码\n<script type=\"text/javascript\">\n        function showPost(obj){\n            //选中部门\n            var depId = obj.value\n            //发送ajax通过部门查询职务\n            //1.获得引擎\n            var xmlhttp;\n            if (window.XMLHttpRequest){\n                // code for IE7+, Firefox, Chrome, Opera, Safari\n                 xmlhttp=new XMLHttpRequest();\n            }\n            else{\n                // code for IE6, IE5\n                 xmlhttp=new ActiveXObject(\"Microsoft.XMLHTTP\");\n            }\n            //2.设置回调函数\n            xmlhttp.onreadystatechange() = function(){\n                if(xmlhttp.readyState == 4 && xmlhttp.status == 200){\n                    //获得返回的数据\n                    var text = xmlhttp.responseText;\n                    //把数据装换成数组\n                    var jsonData = eval(\"(\"+text+\")\");\n                    //获得select标签\n                    var postSelectElement = document.getElementById(\"selectPostId\"); \n                    postSelectElement.innerHTML = \"<option value=''>----请--选--择----</option>\";\n                    //进行遍历\n                    for(i = 0; i < jsonData.length; i++){\n                        var post = jsonData[i];\n                        //获得Id\n                        var postId = post.postId;\n                        //获得名称\n                        var postName = post.postName;\n                        //修改html标签内容\n                        postSelectElement.innerHTML += \"<option value='\"+postId+\"'>\"+postName+\"</option>\";\n                    }\n                }\n            };\n            //3.创建链接\n            var url = \"${pageContext.request.contextPath}/postAction_findAllWithDepartment?department.depId=\"+depId;\n            xmlhttp.open(\"GET\", url);\n            //4.发送请求,如果使用POST方法，send（depId）应传入值\n            xmlhttp.send(null);\n        }\n    </script>\n11、\n条件查询拼接语句的思路\n@Override\n    public List<CrmCourseType> findCourseByCondition(CrmCourseType crmCourseType) {\n        // 用于拼接HQL语句\n        StringBuilder builder = new StringBuilder();\n        // 用来封装参数，list有序，可以重复\n        List<Object> list = new ArrayList<Object>();\n        builder.append(\"from CrmCourseType where 1=1\");\n        // 课程类别\n        if (StringUtils.isNotBlank(crmCourseType.getCourseName())) {\n            builder.append(\" and courseName like ? \");\n            list.add(\"%\" + crmCourseType.getCourseName() + \"%\");\n        }\n        // 课程简介\n        if (StringUtils.isNotBlank(crmCourseType.getRemark())) {\n            builder.append(\" and remark like ? \");\n            list.add(\"%\" + crmCourseType.getRemark() + \"%\");\n        }\n        // 学时\n        if (StringUtils.isNotBlank(crmCourseType.getTotalStart())) {\n            builder.append(\" and total >= ? \");\n            list.add(Integer.parseInt(crmCourseType.getTotalStart()));\n        }\n        if (StringUtils.isNotBlank(crmCourseType.getTotalEnd())) {\n            builder.append(\" and total <= ? \");\n            list.add(Integer.parseInt(crmCourseType.getTotalEnd()));\n        }\n        // 费用\n        if (StringUtils.isNotBlank(crmCourseType.getLessonCostStart())) {\n            builder.append(\" and courseCost >= ? \");\n            list.add(Double.parseDouble(crmCourseType.getLessonCostStart()));\n        }\n        if (StringUtils.isNotBlank(crmCourseType.getLessonCostEnd())) {\n            builder.append(\" and courseCost <= ? \");\n            list.add(Double.parseDouble(crmCourseType.getLessonCostEnd()));\n        }\n        return coursetypeDao.findCourseByCondition(builder.toString(),\n                list.toArray());\n    }\n12、\n更新和添加写在一起时要在页面中判断Id是否应该传入，如果是添加数据，没有id则使用hidden标签传入id会报错\n<s:if test=\"courseTypeId != null\">\n        <s:hidden name=\"courseTypeId\" value=\"%{courseTypeId}\"/>\n</s:if>\n13、\n标签回显action也要判断Id，如果不判断会报异常\nif(StringUtils.isNotBlank(crmCourseType.getCourseTypeId())){\n            CrmCourseType findCourse = coursetypeService.findCourseById(crmCourseType);\n            ActionContext.getContext().getValueStack().push(findCourse);\n}\n\n```\n\n","slug":"SSH做项目时经验总结-1","published":1,"updated":"2017-07-29T13:48:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjksf3cwu001qh8ef50gtj4i5","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">1、</span><br><span class=\"line\">    application.xml导入其他子文件</span><br><span class=\"line\">    &lt;import resource=&quot;applicationContext-staff.xml&quot;/&gt;</span><br><span class=\"line\">    Struts.xm1导入其他子文件</span><br><span class=\"line\">    &lt;include file=&quot;struts/struts-staff.xml&quot;&gt;&lt;/include&gt;</span><br><span class=\"line\">2、</span><br><span class=\"line\">    统一访问界面的UIAction </span><br><span class=\"line\">    &lt;action name=&quot;uiAction_*_*&quot;&gt;</span><br><span class=\"line\">        &lt;result&gt;/WEB-INF/pages/&#123;1&#125;/&#123;2&#125;.jsp&lt;/result&gt;</span><br><span class=\"line\">    &lt;/action&gt;</span><br><span class=\"line\">例如：&lt;frame src=&quot;$&#123;pageContext.request.contextPath&#125;/uiAction_fram`这里写代码片`e_left1.action&quot; scrolling=&quot;no&quot;/&gt;</span><br><span class=\"line\">3、</span><br><span class=\"line\">登录拦截器</span><br><span class=\"line\">protected String doIntercept(ActionInvocation invocation) throws Exception &#123;</span><br><span class=\"line\">        //获得session中的对象</span><br><span class=\"line\">        Object obj = ActionContext.getContext().getSession().get(&quot;staff&quot;);</span><br><span class=\"line\">        if(obj == null)&#123;</span><br><span class=\"line\">            //获得当前action</span><br><span class=\"line\">            Object action = invocation.getAction();</span><br><span class=\"line\">            //判断是否继承了ActionSupport</span><br><span class=\"line\">            if(action instanceof ActionSupport)&#123;</span><br><span class=\"line\">                ActionSupport actionSupport = (ActionSupport) action;</span><br><span class=\"line\">                //使用ActionSupport类添加提示信息</span><br><span class=\"line\">                actionSupport.addFieldError(&quot;&quot;, &quot;您还未登录，请登录！&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            //未登录，需要登录</span><br><span class=\"line\">            return &quot;login&quot;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //登录过，直接放行</span><br><span class=\"line\">        return invocation.invoke();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">4、</span><br><span class=\"line\"> 延长session关闭时间，配置spring的OpenSessionInViewFilter过滤器,并且要在struts核心过滤器前面</span><br><span class=\"line\">    &lt;filter&gt;</span><br><span class=\"line\">        &lt;filter-name&gt;sessionFilter&lt;/filter-name&gt;</span><br><span class=\"line\">        &lt;filter-class&gt;org.springframework.orm.hibernate3.support.OpenSessionInViewFilter&lt;/filter-class&gt;</span><br><span class=\"line\">    &lt;/filter&gt;</span><br><span class=\"line\">    &lt;filter-mapping&gt;</span><br><span class=\"line\">        &lt;filter-name&gt;sessionFilter&lt;/filter-name&gt;</span><br><span class=\"line\">        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class=\"line\">    &lt;/filter-mapping&gt;</span><br><span class=\"line\">5、</span><br><span class=\"line\">遍历时偶数判断</span><br><span class=\"line\">&lt;s:iterator value=&quot;allStaff&quot; status=&quot;vs&quot;&gt;</span><br><span class=\"line\">&lt;!-- vs.even表示判断是否为偶数，并把vs记录的遍历信息存入小mapActionContext中 --&gt;</span><br><span class=\"line\">    &lt;tr class=&quot;&lt;s:property value=&quot;#vs.even ? &apos;tabtd2&apos;:&apos;tabtd1&apos;&quot;/&gt;&quot;&gt; </span><br><span class=\"line\">6、</span><br><span class=\"line\">以注入方式配置actionName和名称空间</span><br><span class=\"line\">&lt;result name=&quot;edit&quot; type=&quot;redirectAction&quot;&gt;</span><br><span class=\"line\">    &lt;param name=&quot;namespace&quot;&gt;/&lt;/param&gt;</span><br><span class=\"line\">    &lt;param name=&quot;actionName&quot;&gt;staffAction_findAll&lt;/param&gt;</span><br><span class=\"line\">&lt;/result&gt;</span><br><span class=\"line\">7、</span><br><span class=\"line\">修饰日期，先用date标签修饰格式，在调用var属性存入ActionContext中 </span><br><span class=\"line\">&lt;s:date name=&quot;onDutyDate&quot; format=&quot;yyyy-MM-dd&quot; var=&quot;dutyDate&quot;/&gt;</span><br><span class=\"line\">            &lt;s:textfield name=&quot;onDutyDate&quot; readonly=&quot;true&quot; value=&quot;%&#123;#dutyDate&#125;&quot; /&gt;</span><br><span class=\"line\">8、</span><br><span class=\"line\">select标签的使用及listKey和listValue使用</span><br><span class=\"line\">&lt;td width=&quot;10%&quot;&gt;所属部门：&lt;/td&gt;</span><br><span class=\"line\">&lt;td width=&quot;20%&quot;&gt;</span><br><span class=\"line\">    &lt;s:select list=&quot;findAllDepartment&quot; name=&quot;post.department.depId&quot; onchange=&quot;&quot; </span><br><span class=\"line\">    listKey=&quot;depId&quot; listValue=&quot;depName&quot; headerKey=&quot;&quot; headerValue=&quot;----请--选--择----&quot;&gt;</span><br><span class=\"line\">    &lt;/s:select&gt;</span><br><span class=\"line\">&lt;/td&gt;</span><br><span class=\"line\">&lt;td width=&quot;8%&quot;&gt;职务：&lt;/td&gt;</span><br><span class=\"line\">&lt;td width=&quot;62%&quot;&gt;</span><br><span class=\"line\">    &lt;%-- 如果职工表中的数据没有职务，则会报异常，所以要进行判断 --%&gt;</span><br><span class=\"line\">    &lt;s:select list=&quot;post != null ? post.department.postSet : &#123;&#125;&quot; name=&quot;post.postId&quot; id=&quot;selectPostId&quot;</span><br><span class=\"line\">    listKey=&quot;postId&quot; listValue=&quot;postName&quot; headerKey=&quot;&quot; headerValue=&quot;----请--选--择----&quot;&gt;</span><br><span class=\"line\">    &lt;/s:select&gt;</span><br><span class=\"line\">&lt;/td&gt;</span><br><span class=\"line\">9、</span><br><span class=\"line\">使用select，需要在action中获得需要的数据，并压入栈</span><br><span class=\"line\">需要手动获得所有部门的集合，因为关联数据中没有部门集合这一字段</span><br><span class=\"line\">List&lt;CrmDepartment&gt; findAllDepartment = departmentService.findAllDepartment();</span><br><span class=\"line\">ActionContext.getContext().getValueStack().set(&quot;findAllDepartment&quot;, findAllDepartment);</span><br><span class=\"line\">10、</span><br><span class=\"line\">服务器处理ajax数据</span><br><span class=\"line\">public String findAllWithDepartment() throws Exception&#123;</span><br><span class=\"line\">    List&lt;CrmPost&gt; findAllWithDepartment = postService.findAllWithDepartment(crmPost.getDepartment());</span><br><span class=\"line\">    //将java对象装换为json数据</span><br><span class=\"line\">    //1.排除不需要的数据</span><br><span class=\"line\">    JsonConfig jsonConfig = new JsonConfig();</span><br><span class=\"line\">    jsonConfig.setExcludes(new String[]&#123;&quot;department&quot;,&quot;staffSet&quot;&#125;);</span><br><span class=\"line\">    //2.转换</span><br><span class=\"line\">    String jsonData = JSONArray.fromObject(findAllWithDepartment, jsonConfig).toString();</span><br><span class=\"line\">    //3.处理乱码</span><br><span class=\"line\">    ServletActionContext.getResponse().setContentType(&quot;text/html;charset=UTF-8&quot;);</span><br><span class=\"line\">    //4.发送给浏览器</span><br><span class=\"line\">    ServletActionContext.getResponse().getWriter().print(jsonData);</span><br><span class=\"line\">    return &quot;none&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">ajax代码</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">        function showPost(obj)&#123;</span><br><span class=\"line\">            //选中部门</span><br><span class=\"line\">            var depId = obj.value</span><br><span class=\"line\">            //发送ajax通过部门查询职务</span><br><span class=\"line\">            //1.获得引擎</span><br><span class=\"line\">            var xmlhttp;</span><br><span class=\"line\">            if (window.XMLHttpRequest)&#123;</span><br><span class=\"line\">                // code for IE7+, Firefox, Chrome, Opera, Safari</span><br><span class=\"line\">                 xmlhttp=new XMLHttpRequest();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            else&#123;</span><br><span class=\"line\">                // code for IE6, IE5</span><br><span class=\"line\">                 xmlhttp=new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            //2.设置回调函数</span><br><span class=\"line\">            xmlhttp.onreadystatechange() = function()&#123;</span><br><span class=\"line\">                if(xmlhttp.readyState == 4 &amp;&amp; xmlhttp.status == 200)&#123;</span><br><span class=\"line\">                    //获得返回的数据</span><br><span class=\"line\">                    var text = xmlhttp.responseText;</span><br><span class=\"line\">                    //把数据装换成数组</span><br><span class=\"line\">                    var jsonData = eval(&quot;(&quot;+text+&quot;)&quot;);</span><br><span class=\"line\">                    //获得select标签</span><br><span class=\"line\">                    var postSelectElement = document.getElementById(&quot;selectPostId&quot;); </span><br><span class=\"line\">                    postSelectElement.innerHTML = &quot;&lt;option value=&apos;&apos;&gt;----请--选--择----&lt;/option&gt;&quot;;</span><br><span class=\"line\">                    //进行遍历</span><br><span class=\"line\">                    for(i = 0; i &lt; jsonData.length; i++)&#123;</span><br><span class=\"line\">                        var post = jsonData[i];</span><br><span class=\"line\">                        //获得Id</span><br><span class=\"line\">                        var postId = post.postId;</span><br><span class=\"line\">                        //获得名称</span><br><span class=\"line\">                        var postName = post.postName;</span><br><span class=\"line\">                        //修改html标签内容</span><br><span class=\"line\">                        postSelectElement.innerHTML += &quot;&lt;option value=&apos;&quot;+postId+&quot;&apos;&gt;&quot;+postName+&quot;&lt;/option&gt;&quot;;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">            //3.创建链接</span><br><span class=\"line\">            var url = &quot;$&#123;pageContext.request.contextPath&#125;/postAction_findAllWithDepartment?department.depId=&quot;+depId;</span><br><span class=\"line\">            xmlhttp.open(&quot;GET&quot;, url);</span><br><span class=\"line\">            //4.发送请求,如果使用POST方法，send（depId）应传入值</span><br><span class=\"line\">            xmlhttp.send(null);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">11、</span><br><span class=\"line\">条件查询拼接语句的思路</span><br><span class=\"line\">@Override</span><br><span class=\"line\">    public List&lt;CrmCourseType&gt; findCourseByCondition(CrmCourseType crmCourseType) &#123;</span><br><span class=\"line\">        // 用于拼接HQL语句</span><br><span class=\"line\">        StringBuilder builder = new StringBuilder();</span><br><span class=\"line\">        // 用来封装参数，list有序，可以重复</span><br><span class=\"line\">        List&lt;Object&gt; list = new ArrayList&lt;Object&gt;();</span><br><span class=\"line\">        builder.append(&quot;from CrmCourseType where 1=1&quot;);</span><br><span class=\"line\">        // 课程类别</span><br><span class=\"line\">        if (StringUtils.isNotBlank(crmCourseType.getCourseName())) &#123;</span><br><span class=\"line\">            builder.append(&quot; and courseName like ? &quot;);</span><br><span class=\"line\">            list.add(&quot;%&quot; + crmCourseType.getCourseName() + &quot;%&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 课程简介</span><br><span class=\"line\">        if (StringUtils.isNotBlank(crmCourseType.getRemark())) &#123;</span><br><span class=\"line\">            builder.append(&quot; and remark like ? &quot;);</span><br><span class=\"line\">            list.add(&quot;%&quot; + crmCourseType.getRemark() + &quot;%&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 学时</span><br><span class=\"line\">        if (StringUtils.isNotBlank(crmCourseType.getTotalStart())) &#123;</span><br><span class=\"line\">            builder.append(&quot; and total &gt;= ? &quot;);</span><br><span class=\"line\">            list.add(Integer.parseInt(crmCourseType.getTotalStart()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (StringUtils.isNotBlank(crmCourseType.getTotalEnd())) &#123;</span><br><span class=\"line\">            builder.append(&quot; and total &lt;= ? &quot;);</span><br><span class=\"line\">            list.add(Integer.parseInt(crmCourseType.getTotalEnd()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 费用</span><br><span class=\"line\">        if (StringUtils.isNotBlank(crmCourseType.getLessonCostStart())) &#123;</span><br><span class=\"line\">            builder.append(&quot; and courseCost &gt;= ? &quot;);</span><br><span class=\"line\">            list.add(Double.parseDouble(crmCourseType.getLessonCostStart()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (StringUtils.isNotBlank(crmCourseType.getLessonCostEnd())) &#123;</span><br><span class=\"line\">            builder.append(&quot; and courseCost &lt;= ? &quot;);</span><br><span class=\"line\">            list.add(Double.parseDouble(crmCourseType.getLessonCostEnd()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return coursetypeDao.findCourseByCondition(builder.toString(),</span><br><span class=\"line\">                list.toArray());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">12、</span><br><span class=\"line\">更新和添加写在一起时要在页面中判断Id是否应该传入，如果是添加数据，没有id则使用hidden标签传入id会报错</span><br><span class=\"line\">&lt;s:if test=&quot;courseTypeId != null&quot;&gt;</span><br><span class=\"line\">        &lt;s:hidden name=&quot;courseTypeId&quot; value=&quot;%&#123;courseTypeId&#125;&quot;/&gt;</span><br><span class=\"line\">&lt;/s:if&gt;</span><br><span class=\"line\">13、</span><br><span class=\"line\">标签回显action也要判断Id，如果不判断会报异常</span><br><span class=\"line\">if(StringUtils.isNotBlank(crmCourseType.getCourseTypeId()))&#123;</span><br><span class=\"line\">            CrmCourseType findCourse = coursetypeService.findCourseById(crmCourseType);</span><br><span class=\"line\">            ActionContext.getContext().getValueStack().push(findCourse);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">1、</span><br><span class=\"line\">    application.xml导入其他子文件</span><br><span class=\"line\">    &lt;import resource=&quot;applicationContext-staff.xml&quot;/&gt;</span><br><span class=\"line\">    Struts.xm1导入其他子文件</span><br><span class=\"line\">    &lt;include file=&quot;struts/struts-staff.xml&quot;&gt;&lt;/include&gt;</span><br><span class=\"line\">2、</span><br><span class=\"line\">    统一访问界面的UIAction </span><br><span class=\"line\">    &lt;action name=&quot;uiAction_*_*&quot;&gt;</span><br><span class=\"line\">        &lt;result&gt;/WEB-INF/pages/&#123;1&#125;/&#123;2&#125;.jsp&lt;/result&gt;</span><br><span class=\"line\">    &lt;/action&gt;</span><br><span class=\"line\">例如：&lt;frame src=&quot;$&#123;pageContext.request.contextPath&#125;/uiAction_fram`这里写代码片`e_left1.action&quot; scrolling=&quot;no&quot;/&gt;</span><br><span class=\"line\">3、</span><br><span class=\"line\">登录拦截器</span><br><span class=\"line\">protected String doIntercept(ActionInvocation invocation) throws Exception &#123;</span><br><span class=\"line\">        //获得session中的对象</span><br><span class=\"line\">        Object obj = ActionContext.getContext().getSession().get(&quot;staff&quot;);</span><br><span class=\"line\">        if(obj == null)&#123;</span><br><span class=\"line\">            //获得当前action</span><br><span class=\"line\">            Object action = invocation.getAction();</span><br><span class=\"line\">            //判断是否继承了ActionSupport</span><br><span class=\"line\">            if(action instanceof ActionSupport)&#123;</span><br><span class=\"line\">                ActionSupport actionSupport = (ActionSupport) action;</span><br><span class=\"line\">                //使用ActionSupport类添加提示信息</span><br><span class=\"line\">                actionSupport.addFieldError(&quot;&quot;, &quot;您还未登录，请登录！&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            //未登录，需要登录</span><br><span class=\"line\">            return &quot;login&quot;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //登录过，直接放行</span><br><span class=\"line\">        return invocation.invoke();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">4、</span><br><span class=\"line\"> 延长session关闭时间，配置spring的OpenSessionInViewFilter过滤器,并且要在struts核心过滤器前面</span><br><span class=\"line\">    &lt;filter&gt;</span><br><span class=\"line\">        &lt;filter-name&gt;sessionFilter&lt;/filter-name&gt;</span><br><span class=\"line\">        &lt;filter-class&gt;org.springframework.orm.hibernate3.support.OpenSessionInViewFilter&lt;/filter-class&gt;</span><br><span class=\"line\">    &lt;/filter&gt;</span><br><span class=\"line\">    &lt;filter-mapping&gt;</span><br><span class=\"line\">        &lt;filter-name&gt;sessionFilter&lt;/filter-name&gt;</span><br><span class=\"line\">        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class=\"line\">    &lt;/filter-mapping&gt;</span><br><span class=\"line\">5、</span><br><span class=\"line\">遍历时偶数判断</span><br><span class=\"line\">&lt;s:iterator value=&quot;allStaff&quot; status=&quot;vs&quot;&gt;</span><br><span class=\"line\">&lt;!-- vs.even表示判断是否为偶数，并把vs记录的遍历信息存入小mapActionContext中 --&gt;</span><br><span class=\"line\">    &lt;tr class=&quot;&lt;s:property value=&quot;#vs.even ? &apos;tabtd2&apos;:&apos;tabtd1&apos;&quot;/&gt;&quot;&gt; </span><br><span class=\"line\">6、</span><br><span class=\"line\">以注入方式配置actionName和名称空间</span><br><span class=\"line\">&lt;result name=&quot;edit&quot; type=&quot;redirectAction&quot;&gt;</span><br><span class=\"line\">    &lt;param name=&quot;namespace&quot;&gt;/&lt;/param&gt;</span><br><span class=\"line\">    &lt;param name=&quot;actionName&quot;&gt;staffAction_findAll&lt;/param&gt;</span><br><span class=\"line\">&lt;/result&gt;</span><br><span class=\"line\">7、</span><br><span class=\"line\">修饰日期，先用date标签修饰格式，在调用var属性存入ActionContext中 </span><br><span class=\"line\">&lt;s:date name=&quot;onDutyDate&quot; format=&quot;yyyy-MM-dd&quot; var=&quot;dutyDate&quot;/&gt;</span><br><span class=\"line\">            &lt;s:textfield name=&quot;onDutyDate&quot; readonly=&quot;true&quot; value=&quot;%&#123;#dutyDate&#125;&quot; /&gt;</span><br><span class=\"line\">8、</span><br><span class=\"line\">select标签的使用及listKey和listValue使用</span><br><span class=\"line\">&lt;td width=&quot;10%&quot;&gt;所属部门：&lt;/td&gt;</span><br><span class=\"line\">&lt;td width=&quot;20%&quot;&gt;</span><br><span class=\"line\">    &lt;s:select list=&quot;findAllDepartment&quot; name=&quot;post.department.depId&quot; onchange=&quot;&quot; </span><br><span class=\"line\">    listKey=&quot;depId&quot; listValue=&quot;depName&quot; headerKey=&quot;&quot; headerValue=&quot;----请--选--择----&quot;&gt;</span><br><span class=\"line\">    &lt;/s:select&gt;</span><br><span class=\"line\">&lt;/td&gt;</span><br><span class=\"line\">&lt;td width=&quot;8%&quot;&gt;职务：&lt;/td&gt;</span><br><span class=\"line\">&lt;td width=&quot;62%&quot;&gt;</span><br><span class=\"line\">    &lt;%-- 如果职工表中的数据没有职务，则会报异常，所以要进行判断 --%&gt;</span><br><span class=\"line\">    &lt;s:select list=&quot;post != null ? post.department.postSet : &#123;&#125;&quot; name=&quot;post.postId&quot; id=&quot;selectPostId&quot;</span><br><span class=\"line\">    listKey=&quot;postId&quot; listValue=&quot;postName&quot; headerKey=&quot;&quot; headerValue=&quot;----请--选--择----&quot;&gt;</span><br><span class=\"line\">    &lt;/s:select&gt;</span><br><span class=\"line\">&lt;/td&gt;</span><br><span class=\"line\">9、</span><br><span class=\"line\">使用select，需要在action中获得需要的数据，并压入栈</span><br><span class=\"line\">需要手动获得所有部门的集合，因为关联数据中没有部门集合这一字段</span><br><span class=\"line\">List&lt;CrmDepartment&gt; findAllDepartment = departmentService.findAllDepartment();</span><br><span class=\"line\">ActionContext.getContext().getValueStack().set(&quot;findAllDepartment&quot;, findAllDepartment);</span><br><span class=\"line\">10、</span><br><span class=\"line\">服务器处理ajax数据</span><br><span class=\"line\">public String findAllWithDepartment() throws Exception&#123;</span><br><span class=\"line\">    List&lt;CrmPost&gt; findAllWithDepartment = postService.findAllWithDepartment(crmPost.getDepartment());</span><br><span class=\"line\">    //将java对象装换为json数据</span><br><span class=\"line\">    //1.排除不需要的数据</span><br><span class=\"line\">    JsonConfig jsonConfig = new JsonConfig();</span><br><span class=\"line\">    jsonConfig.setExcludes(new String[]&#123;&quot;department&quot;,&quot;staffSet&quot;&#125;);</span><br><span class=\"line\">    //2.转换</span><br><span class=\"line\">    String jsonData = JSONArray.fromObject(findAllWithDepartment, jsonConfig).toString();</span><br><span class=\"line\">    //3.处理乱码</span><br><span class=\"line\">    ServletActionContext.getResponse().setContentType(&quot;text/html;charset=UTF-8&quot;);</span><br><span class=\"line\">    //4.发送给浏览器</span><br><span class=\"line\">    ServletActionContext.getResponse().getWriter().print(jsonData);</span><br><span class=\"line\">    return &quot;none&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">ajax代码</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">        function showPost(obj)&#123;</span><br><span class=\"line\">            //选中部门</span><br><span class=\"line\">            var depId = obj.value</span><br><span class=\"line\">            //发送ajax通过部门查询职务</span><br><span class=\"line\">            //1.获得引擎</span><br><span class=\"line\">            var xmlhttp;</span><br><span class=\"line\">            if (window.XMLHttpRequest)&#123;</span><br><span class=\"line\">                // code for IE7+, Firefox, Chrome, Opera, Safari</span><br><span class=\"line\">                 xmlhttp=new XMLHttpRequest();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            else&#123;</span><br><span class=\"line\">                // code for IE6, IE5</span><br><span class=\"line\">                 xmlhttp=new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            //2.设置回调函数</span><br><span class=\"line\">            xmlhttp.onreadystatechange() = function()&#123;</span><br><span class=\"line\">                if(xmlhttp.readyState == 4 &amp;&amp; xmlhttp.status == 200)&#123;</span><br><span class=\"line\">                    //获得返回的数据</span><br><span class=\"line\">                    var text = xmlhttp.responseText;</span><br><span class=\"line\">                    //把数据装换成数组</span><br><span class=\"line\">                    var jsonData = eval(&quot;(&quot;+text+&quot;)&quot;);</span><br><span class=\"line\">                    //获得select标签</span><br><span class=\"line\">                    var postSelectElement = document.getElementById(&quot;selectPostId&quot;); </span><br><span class=\"line\">                    postSelectElement.innerHTML = &quot;&lt;option value=&apos;&apos;&gt;----请--选--择----&lt;/option&gt;&quot;;</span><br><span class=\"line\">                    //进行遍历</span><br><span class=\"line\">                    for(i = 0; i &lt; jsonData.length; i++)&#123;</span><br><span class=\"line\">                        var post = jsonData[i];</span><br><span class=\"line\">                        //获得Id</span><br><span class=\"line\">                        var postId = post.postId;</span><br><span class=\"line\">                        //获得名称</span><br><span class=\"line\">                        var postName = post.postName;</span><br><span class=\"line\">                        //修改html标签内容</span><br><span class=\"line\">                        postSelectElement.innerHTML += &quot;&lt;option value=&apos;&quot;+postId+&quot;&apos;&gt;&quot;+postName+&quot;&lt;/option&gt;&quot;;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">            //3.创建链接</span><br><span class=\"line\">            var url = &quot;$&#123;pageContext.request.contextPath&#125;/postAction_findAllWithDepartment?department.depId=&quot;+depId;</span><br><span class=\"line\">            xmlhttp.open(&quot;GET&quot;, url);</span><br><span class=\"line\">            //4.发送请求,如果使用POST方法，send（depId）应传入值</span><br><span class=\"line\">            xmlhttp.send(null);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">11、</span><br><span class=\"line\">条件查询拼接语句的思路</span><br><span class=\"line\">@Override</span><br><span class=\"line\">    public List&lt;CrmCourseType&gt; findCourseByCondition(CrmCourseType crmCourseType) &#123;</span><br><span class=\"line\">        // 用于拼接HQL语句</span><br><span class=\"line\">        StringBuilder builder = new StringBuilder();</span><br><span class=\"line\">        // 用来封装参数，list有序，可以重复</span><br><span class=\"line\">        List&lt;Object&gt; list = new ArrayList&lt;Object&gt;();</span><br><span class=\"line\">        builder.append(&quot;from CrmCourseType where 1=1&quot;);</span><br><span class=\"line\">        // 课程类别</span><br><span class=\"line\">        if (StringUtils.isNotBlank(crmCourseType.getCourseName())) &#123;</span><br><span class=\"line\">            builder.append(&quot; and courseName like ? &quot;);</span><br><span class=\"line\">            list.add(&quot;%&quot; + crmCourseType.getCourseName() + &quot;%&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 课程简介</span><br><span class=\"line\">        if (StringUtils.isNotBlank(crmCourseType.getRemark())) &#123;</span><br><span class=\"line\">            builder.append(&quot; and remark like ? &quot;);</span><br><span class=\"line\">            list.add(&quot;%&quot; + crmCourseType.getRemark() + &quot;%&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 学时</span><br><span class=\"line\">        if (StringUtils.isNotBlank(crmCourseType.getTotalStart())) &#123;</span><br><span class=\"line\">            builder.append(&quot; and total &gt;= ? &quot;);</span><br><span class=\"line\">            list.add(Integer.parseInt(crmCourseType.getTotalStart()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (StringUtils.isNotBlank(crmCourseType.getTotalEnd())) &#123;</span><br><span class=\"line\">            builder.append(&quot; and total &lt;= ? &quot;);</span><br><span class=\"line\">            list.add(Integer.parseInt(crmCourseType.getTotalEnd()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 费用</span><br><span class=\"line\">        if (StringUtils.isNotBlank(crmCourseType.getLessonCostStart())) &#123;</span><br><span class=\"line\">            builder.append(&quot; and courseCost &gt;= ? &quot;);</span><br><span class=\"line\">            list.add(Double.parseDouble(crmCourseType.getLessonCostStart()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (StringUtils.isNotBlank(crmCourseType.getLessonCostEnd())) &#123;</span><br><span class=\"line\">            builder.append(&quot; and courseCost &lt;= ? &quot;);</span><br><span class=\"line\">            list.add(Double.parseDouble(crmCourseType.getLessonCostEnd()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return coursetypeDao.findCourseByCondition(builder.toString(),</span><br><span class=\"line\">                list.toArray());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">12、</span><br><span class=\"line\">更新和添加写在一起时要在页面中判断Id是否应该传入，如果是添加数据，没有id则使用hidden标签传入id会报错</span><br><span class=\"line\">&lt;s:if test=&quot;courseTypeId != null&quot;&gt;</span><br><span class=\"line\">        &lt;s:hidden name=&quot;courseTypeId&quot; value=&quot;%&#123;courseTypeId&#125;&quot;/&gt;</span><br><span class=\"line\">&lt;/s:if&gt;</span><br><span class=\"line\">13、</span><br><span class=\"line\">标签回显action也要判断Id，如果不判断会报异常</span><br><span class=\"line\">if(StringUtils.isNotBlank(crmCourseType.getCourseTypeId()))&#123;</span><br><span class=\"line\">            CrmCourseType findCourse = coursetypeService.findCourseById(crmCourseType);</span><br><span class=\"line\">            ActionContext.getContext().getValueStack().push(findCourse);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"SSH做项目时经验总结(2)","date":"2017-07-29T13:43:59.000Z","description":"SSH做项目时经验总结-2","_content":"```\n1、\n/**\n * 用于存放分页数据的类\n */\npublic class PageBean<T> {\n\n    private int pageNum; // 第几页\n    private int pageSize; // 每页显示的个数\n    private int totalRecord;// 总记录数\n\n    private int startIndex; // 开始索引\n    private int totalPage; // 总分页数\n\n    private List<T> data; // 查询到的分页数据集合\n\n    // 动态显示条\n    private int start;\n    private int end;\n\n    // 生成一个三个参数的构造方法，使对象被创建时，所有参数就都被赋值\n    public PageBean(int pageNum, int pageSize, int totalRecord) {\n        super();\n        this.pageNum = pageNum;\n        this.pageSize = pageSize;\n        this.totalRecord = totalRecord;\n\n        // 计算开始索引\n        this.startIndex = (this.pageNum - 1) * this.pageSize;\n        // 计算总分页数\n        this.totalPage = (this.totalRecord + this.pageSize - 1) / this.pageSize;\n\n        // 动态显示条的初始值\n        this.start = 1;\n        this.end = 10;\n\n        // 判断总分页数和动态显示的关系，如果总分页数比10小，则动态显示条最大为总分页数\n        if (this.totalPage <= 10) {\n            this.end = this.totalPage;\n        } else {\n            // 如果总分页数比10大，则动态显示的start值应为当前页减去4页，end值为当前页加上5页\n            this.start = this.pageNum - 4;\n            this.end = this.pageNum + 5;\n            // 当前页为前4页时，如果当start的值为负数时，则start恒定为1，end为10\n            if (this.start < 1) {\n                this.start = 1;\n                this.end = 10;\n            }\n            // 当前页为最后5页，则end值肯定比总分页数大，这时需要使end等于总分页数\n            if (this.end > this.totalPage) {\n                this.end = this.totalPage;\n                this.start = this.end - 9;\n            }\n        }\n    }\n\n2、\n    dao操作\n    public int getTotalRecord(String condition, Object[] params) {\n        List<Long> list = this.getHibernateTemplate().find(condition, params);\n        // 长整形转换成整形intValue()\n        return list.get(0).intValue();\n    }\n\n    @Override\n    public List<CrmCourseType> findCourseByCondition(String condition,\n            Object[] params, int startIndex, int pageSize) {\n        return this.getHibernateTemplate().execute(\n                new PageHibernateCallBack<CrmCourseType>().setHql(condition)\n                        .setParams(params).setStartIndex(startIndex)\n                        .setPageSize(pageSize));\n    }\n\n3、\n    /**\n * 用于分页的回调函数\n *\n * @author wyj\n *\n * @param <T>\n */\npublic class PageHibernateCallBack<T> implements HibernateCallback<List<T>> {\n    private String hql;  给query对象传入的hql语句\n    private Object[] params; 传入参数数组\n    private int startIndex; 传入分页用的开始索引\n    private int pageSize;   分页用的每页显示个数\n\n    // 链式调用\n    public PageHibernateCallBack<T> setHql(String hql) {\n        this.hql = hql;\n        return this;\n    }\n    public PageHibernateCallBack<T> setParams(Object[] params) {\n        this.params = params;\n        return this;\n    }\n    public PageHibernateCallBack<T> setStartIndex(int startIndex) {\n        this.startIndex = startIndex;\n        return this;\n    }\n    public PageHibernateCallBack<T> setPageSize(int pageSize) {\n        this.pageSize = pageSize;\n        return this;\n    }\n    @Override\n    public List<T> doInHibernate(Session session) throws HibernateException,\n            SQLException {\n        // 获得query对象\n        Query query = session.createQuery(hql);\n        // 遍历多个参数\n        for (int i = 0; i < params.length; i++) {\n            // 给query对象设置参数\n            query.setParameter(i, params[i]);\n        }\n        // 设置分页所用到的数据\n        query.setFirstResult(startIndex);\n        query.setMaxResults(pageSize);\n        // 查询所有\n        return query.list();\n    }\n\n4、\n    Service层中添加的操作\n    //获取总记录数\n        int totalRecord = this.coursetypeDao.getTotalRecord(condition,params);\n        //创建pageBean对象\n        PageBean<CrmCourseType> pageBean = new PageBean<CrmCourseType>(pageNum, pageSize, totalRecord);\n        //进行分页查询，获得分页数据\n        List<CrmCourseType> data = this.coursetypeDao.findCourseByCondition(condition, params, pageBean.getStartIndex(), pageBean.getPageSize());\n        pageBean.setData(data);\n        return pageBean;\n\n5、\njsp的编写\n<span>第<s:property value=\"pageNum\" />/<s:property value=\"totalPage\" />页</span>\n        <span>\n            <s:if test=\"pageNum gt 1\">\n                <a href=\"javascript:void(0)\" onclick=\"showPage(1)\">[首页]</a>&nbsp;&nbsp;\n                <a href=\"javascript:void(0)\" onclick=\"showPage(<s:property value=\"pageNum - 1\" /> )\">[上一页]</a>&nbsp;&nbsp;\n            </s:if>\n          <!--动态滚动条 -->\n            <s:iterator begin=\"start\" end=\"end\" var=\"num\">\n                <a href=\"#\" onclick=\"showPage(<s:property value=\"#num\" />)\"><s:property value=\"#num\" /></a>\n            </s:iterator>\n\n            <s:if test=\"pageNum lt totalPage\">\n                <a href=\"javascript:void(0)\" onclick=\"showPage(<s:property value=\"pageNum + 1\"/> )\">[下一页]</a>&nbsp;&nbsp;\n                <a href=\"javascript:void(0)\" onclick=\"showPage(<s:property value=\"totalPage\"/>)\">[尾页]</a>\n            </s:if>\n        </span>\n\n    <script type=\"text/javascript\">\n        function showPage(num){\n            //修改隐藏域的值\n            document.getElementById(\"pageNum\").value = num;\n            //提交表单\n            document.forms[0].submit();\n        }\n    </script>\n    form表单\n        <%-- 添加隐藏域，传入pageNum --%>\n        <s:hidden id=\"pageNum\" name=\"pageNum\" value=\"1\"/>\n\n6、Iterator标签消失的问题，传入的集合找不到了\n\n7、this关键字，哪个类被new。this就指哪个类\n\n8、BaseDao\npublic interface BaseDao<T> {\n    /**\n     * 添加操作\n     *\n     * @param t\n     */\n    public void save(T t);\n\n    /**\n     * 删除操作\n     *\n     * @param t\n     */\n    public void delete(T t);\n\n    /**\n     * 修改操作\n     *\n     * @param t\n     */\n    public void update(T t);\n\n    /**\n     * 添加或更新操作\n     *\n     * @param t\n     */\n    public void saveOrUpdate(T t);\n\n    /**\n     * 通过Id查询\n     *\n     * @param id\n     * @return\n     */\n    public T findById(java.io.Serializable id);\n\n    /**\n     * 查询所有\n     *\n     * @return\n     */\n    public List<T> findAll();\n\n    /**\n     * 通过条件查询所有\n     *\n     * @param condition\n     * @param params\n     * @return\n     */\n    public List<T> findAllByCondition(String condition, Object[] params);\n\n    /**\n     * 条件+分页查询\n     *\n     * @param condition\n     * @param params\n     * @param startIndex\n     * @param pageSize\n     * @return\n     */\n    public List<T> findAllByPage(String condition, Object[] params,\n            int startIndex, int pageSize);\n\n    /**\n     * 查询总记录数+条件查询\n     *\n     * @param condition\n     * @param params\n     * @return\n     */\n    public int getTotalRecord(String condition, Object[] params);\n\n    /**\n     * 离线查询\n     *\n     * @param criteria\n     * @return\n     */\n    public List<T> findAllByQBC(DetachedCriteria criteria);\n\n    /**\n     * 使用QBC进行分页查询\n     *\n     * @param criteria\n     * @param condition\n     * @param params\n     * @return\n     */\n    public List<T> findAllByPage(DetachedCriteria criteria, int startIndex,\n            int pageSize);\n\n}\n\n\n9、\nBaseDao的实现类\npublic class BaseDaoImpl<T> extends HibernateDaoSupport implements BaseDao<T> {\n\n    private Class<?> beanClass;\n    //泛型<T>在编译时是无类型的，只是变量，T只有在运行以后才可以获得具体类型，子类被new时，父类的构造方法会执行\n    public BaseDaoImpl() {\n        //ParameterizedType是被参数化了的类型，例如：BaseDaoImpl<CrmClasses>\n        ParameterizedType parameterizedType = (ParameterizedType) this\n                .getClass().getGenericSuperclass()获得带泛型参数的class对象;\n        //getActualTypeArguments()获得所有实际参数值，就是泛型的类型，一般情况下为1个。返回类型为.class的字节码文件\n        beanClass = (Class<?>) parameterizedType.getActualTypeArguments()[0];\n    }\n\n    public void save(T t) {\n        this.getHibernateTemplate().save(t);\n    }\n\n    public void delete(T t) {\n        this.getHibernateTemplate().delete(t);\n    }\n\n    public void update(T t) {\n        this.getHibernateTemplate().update(t);\n    }\n\n    public T findById(Serializable id) {\n        return (T) this.getHibernateTemplate().get(beanClass, id);\n    }\n\n    public List<T> findAll() {\n        // getName()获得全限定名\n        return this.getHibernateTemplate().find(\"from \" + beanClass.getName());\n    }\n\n    public List<T> findAllByCondition(String condition, Object[] params) {\n        String hql = \"from \" + beanClass.getName() + \" where 1 = 1 \"\n                + condition;\n        return this.getHibernateTemplate().find(hql, params);\n    }\n\n    public List<T> findAllByPage(String condition, Object[] params,\n            int startIndex, int pageSize) {\n        String hql = \"from \" + beanClass.getName() + \" where 1 = 1 \"\n                + condition;\n        return this.getHibernateTemplate().execute(\n                new PageHibernateCallBack<T>().setHql(hql).setParams(params)\n                        .setStartIndex(startIndex).setPageSize(pageSize));\n    }\n\n    public int getTotalRecord(String condition, Object[] params) {\n        String hql = \"select count(c) from \" + beanClass.getName()\n                + \" as c where 1 = 1 \" + condition;\n        List<Long> list = this.getHibernateTemplate().find(hql, params);\n        return list.get(0).intValue();\n    }\n\n    离线查询\n    public List<T> findAllByQBC(DetachedCriteria criteria) {\n        return this.getHibernateTemplate().findByCriteria(criteria);\n    }\n\n    public List<T> findAllByPage(DetachedCriteria criteria, int startIndex,\n            int pageSize) {\n        return this.getHibernateTemplate().findByCriteria(criteria, startIndex,\n                pageSize);\n    }\n\n    public void saveOrUpdate(T t) {\n        this.getHibernateTemplate().saveOrUpdate(t);\n    }\n}\n\n\n10、\nBaseAction\npublic class BaseAction<T> extends ActionSupport implements ModelDriven<T> {\n\n    private T t;\n\n    @Override\n    public T getModel() {\n        return t;\n    }\n\n\n    /泛型<T>在编译时是无类型的，只是变量，T只有在运行以后才可以获得具体类型，子类被new时，父类的构造方法会执行\n    @SuppressWarnings(\"unchecked\")\n    public BaseAction() {\n        try {\n            //ParameterizedType是被参数化了的类型，例如：BaseDaoImpl<CrmClasses>\n            ParameterizedType parameterizedType = (ParameterizedType) this\n                    .getClass().getGenericSuperclass();\n            //getActualTypeArguments()获得所有实际参数值，就是泛型的类型，一般情况下为1个。返回类型为.class的字节码文件\n            Class<T> clazz = (Class<T>) parameterizedType\n                    .getActualTypeArguments()[0];\n            // 反射创建实例\n            t = clazz.newInstance();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    // 注入service\n    private StaffService staffService;\n    private PostService postService;\n    private DepartmentService departmentService;\n    private CoursetypeService coursetypeService;\n\n    public StaffService getStaffService() {\n        return staffService;\n    }\n\n    public void setStaffService(StaffService staffService) {\n        this.staffService = staffService;\n    }\n\n    public PostService getPostService() {\n        return postService;\n    }\n\n    public void setPostService(PostService postService) {\n        this.postService = postService;\n    }\n\n    public DepartmentService getDepartmentService() {\n        return departmentService;\n    }\n\n    public void setDepartmentService(DepartmentService departmentService) {\n        this.departmentService = departmentService;\n    }\n\n    public CoursetypeService getCoursetypeService() {\n        return coursetypeService;\n    }\n\n    public void setCoursetypeService(CoursetypeService coursetypeService) {\n        this.coursetypeService = coursetypeService;\n    }\n\n    //分页数据\n    private int pageNum = 1;\n    private int pageSize = 2;\n\n    public void setPageNum(int pageNum) {\n        this.pageNum = pageNum;\n    }\n    public void setPageSize(int pageSize) {\n        this.pageSize = pageSize;\n    }\n    public int getPageNum() {\n        return pageNum;\n    }\n    public int getPageSize() {\n        return pageSize;\n    }\n\n    //简化值栈操作\n    public void push(Object o){\n        ActionContext.getContext().getValueStack().push(o);\n    }\n    public void put(String key,Object value){\n        ActionContext.getContext().put(key, value);\n    }\n    public void set(String key,Object o){\n        ActionContext.getContext().getValueStack().set(key, o);\n    }\n    public void putSession(String key,Object value){\n        ActionContext.getContext().getSession().put(key, value);\n    }\n    public void putApplication(String key,Object value){\n        ActionContext.getContext().getApplication().put(key, value);\n    }\n}\n\n11、\n文件上传\n    获取文件上传的三个值\n    private File schedule; // 上传内容\n    private String scheduleFileName; // 上传的文件名\n    private String scheduleContentType; // 上传的类型\n    上传操作\n    public String upload() throws IOException {\n        //获取上传目的地的虚拟路径\n        String parentDir = ServletActionContext.getServletContext().getRealPath(\"/WEB-INF/upload\");\n        //给上传文件改名\n        String fileName = UUID.randomUUID().toString().replace(\"-\", \"\");\n        //保存文件\n        FileUtils.copyFile(schedule, new File(parentDir, fileName));\n    配置拦截器可通过的扩展名\n    <interceptor-ref name=\"defaultStack\">\n        <param name=\"fileUpload.allowedExtensions\">xls,xslx</param>\n    使用@InputConfig(resultName=\"uploadInput\")修改input视图的name\n\n```\n","source":"_posts/SSH做项目时经验总结-2.md","raw":"---\ntitle: SSH做项目时经验总结(2)\ndate: 2017-07-29 21:43:59\ncategories: 遇到的坑\ntags:\n     - 填坑经验\ndescription: SSH做项目时经验总结-2\n---\n```\n1、\n/**\n * 用于存放分页数据的类\n */\npublic class PageBean<T> {\n\n    private int pageNum; // 第几页\n    private int pageSize; // 每页显示的个数\n    private int totalRecord;// 总记录数\n\n    private int startIndex; // 开始索引\n    private int totalPage; // 总分页数\n\n    private List<T> data; // 查询到的分页数据集合\n\n    // 动态显示条\n    private int start;\n    private int end;\n\n    // 生成一个三个参数的构造方法，使对象被创建时，所有参数就都被赋值\n    public PageBean(int pageNum, int pageSize, int totalRecord) {\n        super();\n        this.pageNum = pageNum;\n        this.pageSize = pageSize;\n        this.totalRecord = totalRecord;\n\n        // 计算开始索引\n        this.startIndex = (this.pageNum - 1) * this.pageSize;\n        // 计算总分页数\n        this.totalPage = (this.totalRecord + this.pageSize - 1) / this.pageSize;\n\n        // 动态显示条的初始值\n        this.start = 1;\n        this.end = 10;\n\n        // 判断总分页数和动态显示的关系，如果总分页数比10小，则动态显示条最大为总分页数\n        if (this.totalPage <= 10) {\n            this.end = this.totalPage;\n        } else {\n            // 如果总分页数比10大，则动态显示的start值应为当前页减去4页，end值为当前页加上5页\n            this.start = this.pageNum - 4;\n            this.end = this.pageNum + 5;\n            // 当前页为前4页时，如果当start的值为负数时，则start恒定为1，end为10\n            if (this.start < 1) {\n                this.start = 1;\n                this.end = 10;\n            }\n            // 当前页为最后5页，则end值肯定比总分页数大，这时需要使end等于总分页数\n            if (this.end > this.totalPage) {\n                this.end = this.totalPage;\n                this.start = this.end - 9;\n            }\n        }\n    }\n\n2、\n    dao操作\n    public int getTotalRecord(String condition, Object[] params) {\n        List<Long> list = this.getHibernateTemplate().find(condition, params);\n        // 长整形转换成整形intValue()\n        return list.get(0).intValue();\n    }\n\n    @Override\n    public List<CrmCourseType> findCourseByCondition(String condition,\n            Object[] params, int startIndex, int pageSize) {\n        return this.getHibernateTemplate().execute(\n                new PageHibernateCallBack<CrmCourseType>().setHql(condition)\n                        .setParams(params).setStartIndex(startIndex)\n                        .setPageSize(pageSize));\n    }\n\n3、\n    /**\n * 用于分页的回调函数\n *\n * @author wyj\n *\n * @param <T>\n */\npublic class PageHibernateCallBack<T> implements HibernateCallback<List<T>> {\n    private String hql;  给query对象传入的hql语句\n    private Object[] params; 传入参数数组\n    private int startIndex; 传入分页用的开始索引\n    private int pageSize;   分页用的每页显示个数\n\n    // 链式调用\n    public PageHibernateCallBack<T> setHql(String hql) {\n        this.hql = hql;\n        return this;\n    }\n    public PageHibernateCallBack<T> setParams(Object[] params) {\n        this.params = params;\n        return this;\n    }\n    public PageHibernateCallBack<T> setStartIndex(int startIndex) {\n        this.startIndex = startIndex;\n        return this;\n    }\n    public PageHibernateCallBack<T> setPageSize(int pageSize) {\n        this.pageSize = pageSize;\n        return this;\n    }\n    @Override\n    public List<T> doInHibernate(Session session) throws HibernateException,\n            SQLException {\n        // 获得query对象\n        Query query = session.createQuery(hql);\n        // 遍历多个参数\n        for (int i = 0; i < params.length; i++) {\n            // 给query对象设置参数\n            query.setParameter(i, params[i]);\n        }\n        // 设置分页所用到的数据\n        query.setFirstResult(startIndex);\n        query.setMaxResults(pageSize);\n        // 查询所有\n        return query.list();\n    }\n\n4、\n    Service层中添加的操作\n    //获取总记录数\n        int totalRecord = this.coursetypeDao.getTotalRecord(condition,params);\n        //创建pageBean对象\n        PageBean<CrmCourseType> pageBean = new PageBean<CrmCourseType>(pageNum, pageSize, totalRecord);\n        //进行分页查询，获得分页数据\n        List<CrmCourseType> data = this.coursetypeDao.findCourseByCondition(condition, params, pageBean.getStartIndex(), pageBean.getPageSize());\n        pageBean.setData(data);\n        return pageBean;\n\n5、\njsp的编写\n<span>第<s:property value=\"pageNum\" />/<s:property value=\"totalPage\" />页</span>\n        <span>\n            <s:if test=\"pageNum gt 1\">\n                <a href=\"javascript:void(0)\" onclick=\"showPage(1)\">[首页]</a>&nbsp;&nbsp;\n                <a href=\"javascript:void(0)\" onclick=\"showPage(<s:property value=\"pageNum - 1\" /> )\">[上一页]</a>&nbsp;&nbsp;\n            </s:if>\n          <!--动态滚动条 -->\n            <s:iterator begin=\"start\" end=\"end\" var=\"num\">\n                <a href=\"#\" onclick=\"showPage(<s:property value=\"#num\" />)\"><s:property value=\"#num\" /></a>\n            </s:iterator>\n\n            <s:if test=\"pageNum lt totalPage\">\n                <a href=\"javascript:void(0)\" onclick=\"showPage(<s:property value=\"pageNum + 1\"/> )\">[下一页]</a>&nbsp;&nbsp;\n                <a href=\"javascript:void(0)\" onclick=\"showPage(<s:property value=\"totalPage\"/>)\">[尾页]</a>\n            </s:if>\n        </span>\n\n    <script type=\"text/javascript\">\n        function showPage(num){\n            //修改隐藏域的值\n            document.getElementById(\"pageNum\").value = num;\n            //提交表单\n            document.forms[0].submit();\n        }\n    </script>\n    form表单\n        <%-- 添加隐藏域，传入pageNum --%>\n        <s:hidden id=\"pageNum\" name=\"pageNum\" value=\"1\"/>\n\n6、Iterator标签消失的问题，传入的集合找不到了\n\n7、this关键字，哪个类被new。this就指哪个类\n\n8、BaseDao\npublic interface BaseDao<T> {\n    /**\n     * 添加操作\n     *\n     * @param t\n     */\n    public void save(T t);\n\n    /**\n     * 删除操作\n     *\n     * @param t\n     */\n    public void delete(T t);\n\n    /**\n     * 修改操作\n     *\n     * @param t\n     */\n    public void update(T t);\n\n    /**\n     * 添加或更新操作\n     *\n     * @param t\n     */\n    public void saveOrUpdate(T t);\n\n    /**\n     * 通过Id查询\n     *\n     * @param id\n     * @return\n     */\n    public T findById(java.io.Serializable id);\n\n    /**\n     * 查询所有\n     *\n     * @return\n     */\n    public List<T> findAll();\n\n    /**\n     * 通过条件查询所有\n     *\n     * @param condition\n     * @param params\n     * @return\n     */\n    public List<T> findAllByCondition(String condition, Object[] params);\n\n    /**\n     * 条件+分页查询\n     *\n     * @param condition\n     * @param params\n     * @param startIndex\n     * @param pageSize\n     * @return\n     */\n    public List<T> findAllByPage(String condition, Object[] params,\n            int startIndex, int pageSize);\n\n    /**\n     * 查询总记录数+条件查询\n     *\n     * @param condition\n     * @param params\n     * @return\n     */\n    public int getTotalRecord(String condition, Object[] params);\n\n    /**\n     * 离线查询\n     *\n     * @param criteria\n     * @return\n     */\n    public List<T> findAllByQBC(DetachedCriteria criteria);\n\n    /**\n     * 使用QBC进行分页查询\n     *\n     * @param criteria\n     * @param condition\n     * @param params\n     * @return\n     */\n    public List<T> findAllByPage(DetachedCriteria criteria, int startIndex,\n            int pageSize);\n\n}\n\n\n9、\nBaseDao的实现类\npublic class BaseDaoImpl<T> extends HibernateDaoSupport implements BaseDao<T> {\n\n    private Class<?> beanClass;\n    //泛型<T>在编译时是无类型的，只是变量，T只有在运行以后才可以获得具体类型，子类被new时，父类的构造方法会执行\n    public BaseDaoImpl() {\n        //ParameterizedType是被参数化了的类型，例如：BaseDaoImpl<CrmClasses>\n        ParameterizedType parameterizedType = (ParameterizedType) this\n                .getClass().getGenericSuperclass()获得带泛型参数的class对象;\n        //getActualTypeArguments()获得所有实际参数值，就是泛型的类型，一般情况下为1个。返回类型为.class的字节码文件\n        beanClass = (Class<?>) parameterizedType.getActualTypeArguments()[0];\n    }\n\n    public void save(T t) {\n        this.getHibernateTemplate().save(t);\n    }\n\n    public void delete(T t) {\n        this.getHibernateTemplate().delete(t);\n    }\n\n    public void update(T t) {\n        this.getHibernateTemplate().update(t);\n    }\n\n    public T findById(Serializable id) {\n        return (T) this.getHibernateTemplate().get(beanClass, id);\n    }\n\n    public List<T> findAll() {\n        // getName()获得全限定名\n        return this.getHibernateTemplate().find(\"from \" + beanClass.getName());\n    }\n\n    public List<T> findAllByCondition(String condition, Object[] params) {\n        String hql = \"from \" + beanClass.getName() + \" where 1 = 1 \"\n                + condition;\n        return this.getHibernateTemplate().find(hql, params);\n    }\n\n    public List<T> findAllByPage(String condition, Object[] params,\n            int startIndex, int pageSize) {\n        String hql = \"from \" + beanClass.getName() + \" where 1 = 1 \"\n                + condition;\n        return this.getHibernateTemplate().execute(\n                new PageHibernateCallBack<T>().setHql(hql).setParams(params)\n                        .setStartIndex(startIndex).setPageSize(pageSize));\n    }\n\n    public int getTotalRecord(String condition, Object[] params) {\n        String hql = \"select count(c) from \" + beanClass.getName()\n                + \" as c where 1 = 1 \" + condition;\n        List<Long> list = this.getHibernateTemplate().find(hql, params);\n        return list.get(0).intValue();\n    }\n\n    离线查询\n    public List<T> findAllByQBC(DetachedCriteria criteria) {\n        return this.getHibernateTemplate().findByCriteria(criteria);\n    }\n\n    public List<T> findAllByPage(DetachedCriteria criteria, int startIndex,\n            int pageSize) {\n        return this.getHibernateTemplate().findByCriteria(criteria, startIndex,\n                pageSize);\n    }\n\n    public void saveOrUpdate(T t) {\n        this.getHibernateTemplate().saveOrUpdate(t);\n    }\n}\n\n\n10、\nBaseAction\npublic class BaseAction<T> extends ActionSupport implements ModelDriven<T> {\n\n    private T t;\n\n    @Override\n    public T getModel() {\n        return t;\n    }\n\n\n    /泛型<T>在编译时是无类型的，只是变量，T只有在运行以后才可以获得具体类型，子类被new时，父类的构造方法会执行\n    @SuppressWarnings(\"unchecked\")\n    public BaseAction() {\n        try {\n            //ParameterizedType是被参数化了的类型，例如：BaseDaoImpl<CrmClasses>\n            ParameterizedType parameterizedType = (ParameterizedType) this\n                    .getClass().getGenericSuperclass();\n            //getActualTypeArguments()获得所有实际参数值，就是泛型的类型，一般情况下为1个。返回类型为.class的字节码文件\n            Class<T> clazz = (Class<T>) parameterizedType\n                    .getActualTypeArguments()[0];\n            // 反射创建实例\n            t = clazz.newInstance();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    // 注入service\n    private StaffService staffService;\n    private PostService postService;\n    private DepartmentService departmentService;\n    private CoursetypeService coursetypeService;\n\n    public StaffService getStaffService() {\n        return staffService;\n    }\n\n    public void setStaffService(StaffService staffService) {\n        this.staffService = staffService;\n    }\n\n    public PostService getPostService() {\n        return postService;\n    }\n\n    public void setPostService(PostService postService) {\n        this.postService = postService;\n    }\n\n    public DepartmentService getDepartmentService() {\n        return departmentService;\n    }\n\n    public void setDepartmentService(DepartmentService departmentService) {\n        this.departmentService = departmentService;\n    }\n\n    public CoursetypeService getCoursetypeService() {\n        return coursetypeService;\n    }\n\n    public void setCoursetypeService(CoursetypeService coursetypeService) {\n        this.coursetypeService = coursetypeService;\n    }\n\n    //分页数据\n    private int pageNum = 1;\n    private int pageSize = 2;\n\n    public void setPageNum(int pageNum) {\n        this.pageNum = pageNum;\n    }\n    public void setPageSize(int pageSize) {\n        this.pageSize = pageSize;\n    }\n    public int getPageNum() {\n        return pageNum;\n    }\n    public int getPageSize() {\n        return pageSize;\n    }\n\n    //简化值栈操作\n    public void push(Object o){\n        ActionContext.getContext().getValueStack().push(o);\n    }\n    public void put(String key,Object value){\n        ActionContext.getContext().put(key, value);\n    }\n    public void set(String key,Object o){\n        ActionContext.getContext().getValueStack().set(key, o);\n    }\n    public void putSession(String key,Object value){\n        ActionContext.getContext().getSession().put(key, value);\n    }\n    public void putApplication(String key,Object value){\n        ActionContext.getContext().getApplication().put(key, value);\n    }\n}\n\n11、\n文件上传\n    获取文件上传的三个值\n    private File schedule; // 上传内容\n    private String scheduleFileName; // 上传的文件名\n    private String scheduleContentType; // 上传的类型\n    上传操作\n    public String upload() throws IOException {\n        //获取上传目的地的虚拟路径\n        String parentDir = ServletActionContext.getServletContext().getRealPath(\"/WEB-INF/upload\");\n        //给上传文件改名\n        String fileName = UUID.randomUUID().toString().replace(\"-\", \"\");\n        //保存文件\n        FileUtils.copyFile(schedule, new File(parentDir, fileName));\n    配置拦截器可通过的扩展名\n    <interceptor-ref name=\"defaultStack\">\n        <param name=\"fileUpload.allowedExtensions\">xls,xslx</param>\n    使用@InputConfig(resultName=\"uploadInput\")修改input视图的name\n\n```\n","slug":"SSH做项目时经验总结-2","published":1,"updated":"2017-07-29T13:48:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjksf3cwv001th8efyac393gs","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 用于存放分页数据的类</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class PageBean&lt;T&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private int pageNum; // 第几页</span><br><span class=\"line\">    private int pageSize; // 每页显示的个数</span><br><span class=\"line\">    private int totalRecord;// 总记录数</span><br><span class=\"line\"></span><br><span class=\"line\">    private int startIndex; // 开始索引</span><br><span class=\"line\">    private int totalPage; // 总分页数</span><br><span class=\"line\"></span><br><span class=\"line\">    private List&lt;T&gt; data; // 查询到的分页数据集合</span><br><span class=\"line\"></span><br><span class=\"line\">    // 动态显示条</span><br><span class=\"line\">    private int start;</span><br><span class=\"line\">    private int end;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 生成一个三个参数的构造方法，使对象被创建时，所有参数就都被赋值</span><br><span class=\"line\">    public PageBean(int pageNum, int pageSize, int totalRecord) &#123;</span><br><span class=\"line\">        super();</span><br><span class=\"line\">        this.pageNum = pageNum;</span><br><span class=\"line\">        this.pageSize = pageSize;</span><br><span class=\"line\">        this.totalRecord = totalRecord;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 计算开始索引</span><br><span class=\"line\">        this.startIndex = (this.pageNum - 1) * this.pageSize;</span><br><span class=\"line\">        // 计算总分页数</span><br><span class=\"line\">        this.totalPage = (this.totalRecord + this.pageSize - 1) / this.pageSize;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 动态显示条的初始值</span><br><span class=\"line\">        this.start = 1;</span><br><span class=\"line\">        this.end = 10;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 判断总分页数和动态显示的关系，如果总分页数比10小，则动态显示条最大为总分页数</span><br><span class=\"line\">        if (this.totalPage &lt;= 10) &#123;</span><br><span class=\"line\">            this.end = this.totalPage;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            // 如果总分页数比10大，则动态显示的start值应为当前页减去4页，end值为当前页加上5页</span><br><span class=\"line\">            this.start = this.pageNum - 4;</span><br><span class=\"line\">            this.end = this.pageNum + 5;</span><br><span class=\"line\">            // 当前页为前4页时，如果当start的值为负数时，则start恒定为1，end为10</span><br><span class=\"line\">            if (this.start &lt; 1) &#123;</span><br><span class=\"line\">                this.start = 1;</span><br><span class=\"line\">                this.end = 10;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            // 当前页为最后5页，则end值肯定比总分页数大，这时需要使end等于总分页数</span><br><span class=\"line\">            if (this.end &gt; this.totalPage) &#123;</span><br><span class=\"line\">                this.end = this.totalPage;</span><br><span class=\"line\">                this.start = this.end - 9;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">2、</span><br><span class=\"line\">    dao操作</span><br><span class=\"line\">    public int getTotalRecord(String condition, Object[] params) &#123;</span><br><span class=\"line\">        List&lt;Long&gt; list = this.getHibernateTemplate().find(condition, params);</span><br><span class=\"line\">        // 长整形转换成整形intValue()</span><br><span class=\"line\">        return list.get(0).intValue();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public List&lt;CrmCourseType&gt; findCourseByCondition(String condition,</span><br><span class=\"line\">            Object[] params, int startIndex, int pageSize) &#123;</span><br><span class=\"line\">        return this.getHibernateTemplate().execute(</span><br><span class=\"line\">                new PageHibernateCallBack&lt;CrmCourseType&gt;().setHql(condition)</span><br><span class=\"line\">                        .setParams(params).setStartIndex(startIndex)</span><br><span class=\"line\">                        .setPageSize(pageSize));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">3、</span><br><span class=\"line\">    /**</span><br><span class=\"line\"> * 用于分页的回调函数</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author wyj</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @param &lt;T&gt;</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class PageHibernateCallBack&lt;T&gt; implements HibernateCallback&lt;List&lt;T&gt;&gt; &#123;</span><br><span class=\"line\">    private String hql;  给query对象传入的hql语句</span><br><span class=\"line\">    private Object[] params; 传入参数数组</span><br><span class=\"line\">    private int startIndex; 传入分页用的开始索引</span><br><span class=\"line\">    private int pageSize;   分页用的每页显示个数</span><br><span class=\"line\"></span><br><span class=\"line\">    // 链式调用</span><br><span class=\"line\">    public PageHibernateCallBack&lt;T&gt; setHql(String hql) &#123;</span><br><span class=\"line\">        this.hql = hql;</span><br><span class=\"line\">        return this;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public PageHibernateCallBack&lt;T&gt; setParams(Object[] params) &#123;</span><br><span class=\"line\">        this.params = params;</span><br><span class=\"line\">        return this;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public PageHibernateCallBack&lt;T&gt; setStartIndex(int startIndex) &#123;</span><br><span class=\"line\">        this.startIndex = startIndex;</span><br><span class=\"line\">        return this;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public PageHibernateCallBack&lt;T&gt; setPageSize(int pageSize) &#123;</span><br><span class=\"line\">        this.pageSize = pageSize;</span><br><span class=\"line\">        return this;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public List&lt;T&gt; doInHibernate(Session session) throws HibernateException,</span><br><span class=\"line\">            SQLException &#123;</span><br><span class=\"line\">        // 获得query对象</span><br><span class=\"line\">        Query query = session.createQuery(hql);</span><br><span class=\"line\">        // 遍历多个参数</span><br><span class=\"line\">        for (int i = 0; i &lt; params.length; i++) &#123;</span><br><span class=\"line\">            // 给query对象设置参数</span><br><span class=\"line\">            query.setParameter(i, params[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 设置分页所用到的数据</span><br><span class=\"line\">        query.setFirstResult(startIndex);</span><br><span class=\"line\">        query.setMaxResults(pageSize);</span><br><span class=\"line\">        // 查询所有</span><br><span class=\"line\">        return query.list();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">4、</span><br><span class=\"line\">    Service层中添加的操作</span><br><span class=\"line\">    //获取总记录数</span><br><span class=\"line\">        int totalRecord = this.coursetypeDao.getTotalRecord(condition,params);</span><br><span class=\"line\">        //创建pageBean对象</span><br><span class=\"line\">        PageBean&lt;CrmCourseType&gt; pageBean = new PageBean&lt;CrmCourseType&gt;(pageNum, pageSize, totalRecord);</span><br><span class=\"line\">        //进行分页查询，获得分页数据</span><br><span class=\"line\">        List&lt;CrmCourseType&gt; data = this.coursetypeDao.findCourseByCondition(condition, params, pageBean.getStartIndex(), pageBean.getPageSize());</span><br><span class=\"line\">        pageBean.setData(data);</span><br><span class=\"line\">        return pageBean;</span><br><span class=\"line\"></span><br><span class=\"line\">5、</span><br><span class=\"line\">jsp的编写</span><br><span class=\"line\">&lt;span&gt;第&lt;s:property value=&quot;pageNum&quot; /&gt;/&lt;s:property value=&quot;totalPage&quot; /&gt;页&lt;/span&gt;</span><br><span class=\"line\">        &lt;span&gt;</span><br><span class=\"line\">            &lt;s:if test=&quot;pageNum gt 1&quot;&gt;</span><br><span class=\"line\">                &lt;a href=&quot;javascript:void(0)&quot; onclick=&quot;showPage(1)&quot;&gt;[首页]&lt;/a&gt;&amp;nbsp;&amp;nbsp;</span><br><span class=\"line\">                &lt;a href=&quot;javascript:void(0)&quot; onclick=&quot;showPage(&lt;s:property value=&quot;pageNum - 1&quot; /&gt; )&quot;&gt;[上一页]&lt;/a&gt;&amp;nbsp;&amp;nbsp;</span><br><span class=\"line\">            &lt;/s:if&gt;</span><br><span class=\"line\">          &lt;!--动态滚动条 --&gt;</span><br><span class=\"line\">            &lt;s:iterator begin=&quot;start&quot; end=&quot;end&quot; var=&quot;num&quot;&gt;</span><br><span class=\"line\">                &lt;a href=&quot;#&quot; onclick=&quot;showPage(&lt;s:property value=&quot;#num&quot; /&gt;)&quot;&gt;&lt;s:property value=&quot;#num&quot; /&gt;&lt;/a&gt;</span><br><span class=\"line\">            &lt;/s:iterator&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">            &lt;s:if test=&quot;pageNum lt totalPage&quot;&gt;</span><br><span class=\"line\">                &lt;a href=&quot;javascript:void(0)&quot; onclick=&quot;showPage(&lt;s:property value=&quot;pageNum + 1&quot;/&gt; )&quot;&gt;[下一页]&lt;/a&gt;&amp;nbsp;&amp;nbsp;</span><br><span class=\"line\">                &lt;a href=&quot;javascript:void(0)&quot; onclick=&quot;showPage(&lt;s:property value=&quot;totalPage&quot;/&gt;)&quot;&gt;[尾页]&lt;/a&gt;</span><br><span class=\"line\">            &lt;/s:if&gt;</span><br><span class=\"line\">        &lt;/span&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">        function showPage(num)&#123;</span><br><span class=\"line\">            //修改隐藏域的值</span><br><span class=\"line\">            document.getElementById(&quot;pageNum&quot;).value = num;</span><br><span class=\"line\">            //提交表单</span><br><span class=\"line\">            document.forms[0].submit();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">    form表单</span><br><span class=\"line\">        &lt;%-- 添加隐藏域，传入pageNum --%&gt;</span><br><span class=\"line\">        &lt;s:hidden id=&quot;pageNum&quot; name=&quot;pageNum&quot; value=&quot;1&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">6、Iterator标签消失的问题，传入的集合找不到了</span><br><span class=\"line\"></span><br><span class=\"line\">7、this关键字，哪个类被new。this就指哪个类</span><br><span class=\"line\"></span><br><span class=\"line\">8、BaseDao</span><br><span class=\"line\">public interface BaseDao&lt;T&gt; &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 添加操作</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param t</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public void save(T t);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 删除操作</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param t</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public void delete(T t);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 修改操作</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param t</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public void update(T t);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 添加或更新操作</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param t</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public void saveOrUpdate(T t);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 通过Id查询</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param id</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public T findById(java.io.Serializable id);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 查询所有</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public List&lt;T&gt; findAll();</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 通过条件查询所有</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param condition</span><br><span class=\"line\">     * @param params</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public List&lt;T&gt; findAllByCondition(String condition, Object[] params);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 条件+分页查询</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param condition</span><br><span class=\"line\">     * @param params</span><br><span class=\"line\">     * @param startIndex</span><br><span class=\"line\">     * @param pageSize</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public List&lt;T&gt; findAllByPage(String condition, Object[] params,</span><br><span class=\"line\">            int startIndex, int pageSize);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 查询总记录数+条件查询</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param condition</span><br><span class=\"line\">     * @param params</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public int getTotalRecord(String condition, Object[] params);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 离线查询</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param criteria</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public List&lt;T&gt; findAllByQBC(DetachedCriteria criteria);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 使用QBC进行分页查询</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param criteria</span><br><span class=\"line\">     * @param condition</span><br><span class=\"line\">     * @param params</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public List&lt;T&gt; findAllByPage(DetachedCriteria criteria, int startIndex,</span><br><span class=\"line\">            int pageSize);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">9、</span><br><span class=\"line\">BaseDao的实现类</span><br><span class=\"line\">public class BaseDaoImpl&lt;T&gt; extends HibernateDaoSupport implements BaseDao&lt;T&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private Class&lt;?&gt; beanClass;</span><br><span class=\"line\">    //泛型&lt;T&gt;在编译时是无类型的，只是变量，T只有在运行以后才可以获得具体类型，子类被new时，父类的构造方法会执行</span><br><span class=\"line\">    public BaseDaoImpl() &#123;</span><br><span class=\"line\">        //ParameterizedType是被参数化了的类型，例如：BaseDaoImpl&lt;CrmClasses&gt;</span><br><span class=\"line\">        ParameterizedType parameterizedType = (ParameterizedType) this</span><br><span class=\"line\">                .getClass().getGenericSuperclass()获得带泛型参数的class对象;</span><br><span class=\"line\">        //getActualTypeArguments()获得所有实际参数值，就是泛型的类型，一般情况下为1个。返回类型为.class的字节码文件</span><br><span class=\"line\">        beanClass = (Class&lt;?&gt;) parameterizedType.getActualTypeArguments()[0];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void save(T t) &#123;</span><br><span class=\"line\">        this.getHibernateTemplate().save(t);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void delete(T t) &#123;</span><br><span class=\"line\">        this.getHibernateTemplate().delete(t);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void update(T t) &#123;</span><br><span class=\"line\">        this.getHibernateTemplate().update(t);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public T findById(Serializable id) &#123;</span><br><span class=\"line\">        return (T) this.getHibernateTemplate().get(beanClass, id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public List&lt;T&gt; findAll() &#123;</span><br><span class=\"line\">        // getName()获得全限定名</span><br><span class=\"line\">        return this.getHibernateTemplate().find(&quot;from &quot; + beanClass.getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public List&lt;T&gt; findAllByCondition(String condition, Object[] params) &#123;</span><br><span class=\"line\">        String hql = &quot;from &quot; + beanClass.getName() + &quot; where 1 = 1 &quot;</span><br><span class=\"line\">                + condition;</span><br><span class=\"line\">        return this.getHibernateTemplate().find(hql, params);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public List&lt;T&gt; findAllByPage(String condition, Object[] params,</span><br><span class=\"line\">            int startIndex, int pageSize) &#123;</span><br><span class=\"line\">        String hql = &quot;from &quot; + beanClass.getName() + &quot; where 1 = 1 &quot;</span><br><span class=\"line\">                + condition;</span><br><span class=\"line\">        return this.getHibernateTemplate().execute(</span><br><span class=\"line\">                new PageHibernateCallBack&lt;T&gt;().setHql(hql).setParams(params)</span><br><span class=\"line\">                        .setStartIndex(startIndex).setPageSize(pageSize));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int getTotalRecord(String condition, Object[] params) &#123;</span><br><span class=\"line\">        String hql = &quot;select count(c) from &quot; + beanClass.getName()</span><br><span class=\"line\">                + &quot; as c where 1 = 1 &quot; + condition;</span><br><span class=\"line\">        List&lt;Long&gt; list = this.getHibernateTemplate().find(hql, params);</span><br><span class=\"line\">        return list.get(0).intValue();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    离线查询</span><br><span class=\"line\">    public List&lt;T&gt; findAllByQBC(DetachedCriteria criteria) &#123;</span><br><span class=\"line\">        return this.getHibernateTemplate().findByCriteria(criteria);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public List&lt;T&gt; findAllByPage(DetachedCriteria criteria, int startIndex,</span><br><span class=\"line\">            int pageSize) &#123;</span><br><span class=\"line\">        return this.getHibernateTemplate().findByCriteria(criteria, startIndex,</span><br><span class=\"line\">                pageSize);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void saveOrUpdate(T t) &#123;</span><br><span class=\"line\">        this.getHibernateTemplate().saveOrUpdate(t);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">10、</span><br><span class=\"line\">BaseAction</span><br><span class=\"line\">public class BaseAction&lt;T&gt; extends ActionSupport implements ModelDriven&lt;T&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private T t;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public T getModel() &#123;</span><br><span class=\"line\">        return t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /泛型&lt;T&gt;在编译时是无类型的，只是变量，T只有在运行以后才可以获得具体类型，子类被new时，父类的构造方法会执行</span><br><span class=\"line\">    @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class=\"line\">    public BaseAction() &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            //ParameterizedType是被参数化了的类型，例如：BaseDaoImpl&lt;CrmClasses&gt;</span><br><span class=\"line\">            ParameterizedType parameterizedType = (ParameterizedType) this</span><br><span class=\"line\">                    .getClass().getGenericSuperclass();</span><br><span class=\"line\">            //getActualTypeArguments()获得所有实际参数值，就是泛型的类型，一般情况下为1个。返回类型为.class的字节码文件</span><br><span class=\"line\">            Class&lt;T&gt; clazz = (Class&lt;T&gt;) parameterizedType</span><br><span class=\"line\">                    .getActualTypeArguments()[0];</span><br><span class=\"line\">            // 反射创建实例</span><br><span class=\"line\">            t = clazz.newInstance();</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 注入service</span><br><span class=\"line\">    private StaffService staffService;</span><br><span class=\"line\">    private PostService postService;</span><br><span class=\"line\">    private DepartmentService departmentService;</span><br><span class=\"line\">    private CoursetypeService coursetypeService;</span><br><span class=\"line\"></span><br><span class=\"line\">    public StaffService getStaffService() &#123;</span><br><span class=\"line\">        return staffService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setStaffService(StaffService staffService) &#123;</span><br><span class=\"line\">        this.staffService = staffService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public PostService getPostService() &#123;</span><br><span class=\"line\">        return postService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setPostService(PostService postService) &#123;</span><br><span class=\"line\">        this.postService = postService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public DepartmentService getDepartmentService() &#123;</span><br><span class=\"line\">        return departmentService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setDepartmentService(DepartmentService departmentService) &#123;</span><br><span class=\"line\">        this.departmentService = departmentService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public CoursetypeService getCoursetypeService() &#123;</span><br><span class=\"line\">        return coursetypeService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setCoursetypeService(CoursetypeService coursetypeService) &#123;</span><br><span class=\"line\">        this.coursetypeService = coursetypeService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //分页数据</span><br><span class=\"line\">    private int pageNum = 1;</span><br><span class=\"line\">    private int pageSize = 2;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setPageNum(int pageNum) &#123;</span><br><span class=\"line\">        this.pageNum = pageNum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public void setPageSize(int pageSize) &#123;</span><br><span class=\"line\">        this.pageSize = pageSize;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public int getPageNum() &#123;</span><br><span class=\"line\">        return pageNum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public int getPageSize() &#123;</span><br><span class=\"line\">        return pageSize;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //简化值栈操作</span><br><span class=\"line\">    public void push(Object o)&#123;</span><br><span class=\"line\">        ActionContext.getContext().getValueStack().push(o);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public void put(String key,Object value)&#123;</span><br><span class=\"line\">        ActionContext.getContext().put(key, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public void set(String key,Object o)&#123;</span><br><span class=\"line\">        ActionContext.getContext().getValueStack().set(key, o);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public void putSession(String key,Object value)&#123;</span><br><span class=\"line\">        ActionContext.getContext().getSession().put(key, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public void putApplication(String key,Object value)&#123;</span><br><span class=\"line\">        ActionContext.getContext().getApplication().put(key, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">11、</span><br><span class=\"line\">文件上传</span><br><span class=\"line\">    获取文件上传的三个值</span><br><span class=\"line\">    private File schedule; // 上传内容</span><br><span class=\"line\">    private String scheduleFileName; // 上传的文件名</span><br><span class=\"line\">    private String scheduleContentType; // 上传的类型</span><br><span class=\"line\">    上传操作</span><br><span class=\"line\">    public String upload() throws IOException &#123;</span><br><span class=\"line\">        //获取上传目的地的虚拟路径</span><br><span class=\"line\">        String parentDir = ServletActionContext.getServletContext().getRealPath(&quot;/WEB-INF/upload&quot;);</span><br><span class=\"line\">        //给上传文件改名</span><br><span class=\"line\">        String fileName = UUID.randomUUID().toString().replace(&quot;-&quot;, &quot;&quot;);</span><br><span class=\"line\">        //保存文件</span><br><span class=\"line\">        FileUtils.copyFile(schedule, new File(parentDir, fileName));</span><br><span class=\"line\">    配置拦截器可通过的扩展名</span><br><span class=\"line\">    &lt;interceptor-ref name=&quot;defaultStack&quot;&gt;</span><br><span class=\"line\">        &lt;param name=&quot;fileUpload.allowedExtensions&quot;&gt;xls,xslx&lt;/param&gt;</span><br><span class=\"line\">    使用@InputConfig(resultName=&quot;uploadInput&quot;)修改input视图的name</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 用于存放分页数据的类</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class PageBean&lt;T&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private int pageNum; // 第几页</span><br><span class=\"line\">    private int pageSize; // 每页显示的个数</span><br><span class=\"line\">    private int totalRecord;// 总记录数</span><br><span class=\"line\"></span><br><span class=\"line\">    private int startIndex; // 开始索引</span><br><span class=\"line\">    private int totalPage; // 总分页数</span><br><span class=\"line\"></span><br><span class=\"line\">    private List&lt;T&gt; data; // 查询到的分页数据集合</span><br><span class=\"line\"></span><br><span class=\"line\">    // 动态显示条</span><br><span class=\"line\">    private int start;</span><br><span class=\"line\">    private int end;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 生成一个三个参数的构造方法，使对象被创建时，所有参数就都被赋值</span><br><span class=\"line\">    public PageBean(int pageNum, int pageSize, int totalRecord) &#123;</span><br><span class=\"line\">        super();</span><br><span class=\"line\">        this.pageNum = pageNum;</span><br><span class=\"line\">        this.pageSize = pageSize;</span><br><span class=\"line\">        this.totalRecord = totalRecord;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 计算开始索引</span><br><span class=\"line\">        this.startIndex = (this.pageNum - 1) * this.pageSize;</span><br><span class=\"line\">        // 计算总分页数</span><br><span class=\"line\">        this.totalPage = (this.totalRecord + this.pageSize - 1) / this.pageSize;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 动态显示条的初始值</span><br><span class=\"line\">        this.start = 1;</span><br><span class=\"line\">        this.end = 10;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 判断总分页数和动态显示的关系，如果总分页数比10小，则动态显示条最大为总分页数</span><br><span class=\"line\">        if (this.totalPage &lt;= 10) &#123;</span><br><span class=\"line\">            this.end = this.totalPage;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            // 如果总分页数比10大，则动态显示的start值应为当前页减去4页，end值为当前页加上5页</span><br><span class=\"line\">            this.start = this.pageNum - 4;</span><br><span class=\"line\">            this.end = this.pageNum + 5;</span><br><span class=\"line\">            // 当前页为前4页时，如果当start的值为负数时，则start恒定为1，end为10</span><br><span class=\"line\">            if (this.start &lt; 1) &#123;</span><br><span class=\"line\">                this.start = 1;</span><br><span class=\"line\">                this.end = 10;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            // 当前页为最后5页，则end值肯定比总分页数大，这时需要使end等于总分页数</span><br><span class=\"line\">            if (this.end &gt; this.totalPage) &#123;</span><br><span class=\"line\">                this.end = this.totalPage;</span><br><span class=\"line\">                this.start = this.end - 9;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">2、</span><br><span class=\"line\">    dao操作</span><br><span class=\"line\">    public int getTotalRecord(String condition, Object[] params) &#123;</span><br><span class=\"line\">        List&lt;Long&gt; list = this.getHibernateTemplate().find(condition, params);</span><br><span class=\"line\">        // 长整形转换成整形intValue()</span><br><span class=\"line\">        return list.get(0).intValue();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public List&lt;CrmCourseType&gt; findCourseByCondition(String condition,</span><br><span class=\"line\">            Object[] params, int startIndex, int pageSize) &#123;</span><br><span class=\"line\">        return this.getHibernateTemplate().execute(</span><br><span class=\"line\">                new PageHibernateCallBack&lt;CrmCourseType&gt;().setHql(condition)</span><br><span class=\"line\">                        .setParams(params).setStartIndex(startIndex)</span><br><span class=\"line\">                        .setPageSize(pageSize));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">3、</span><br><span class=\"line\">    /**</span><br><span class=\"line\"> * 用于分页的回调函数</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author wyj</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @param &lt;T&gt;</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class PageHibernateCallBack&lt;T&gt; implements HibernateCallback&lt;List&lt;T&gt;&gt; &#123;</span><br><span class=\"line\">    private String hql;  给query对象传入的hql语句</span><br><span class=\"line\">    private Object[] params; 传入参数数组</span><br><span class=\"line\">    private int startIndex; 传入分页用的开始索引</span><br><span class=\"line\">    private int pageSize;   分页用的每页显示个数</span><br><span class=\"line\"></span><br><span class=\"line\">    // 链式调用</span><br><span class=\"line\">    public PageHibernateCallBack&lt;T&gt; setHql(String hql) &#123;</span><br><span class=\"line\">        this.hql = hql;</span><br><span class=\"line\">        return this;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public PageHibernateCallBack&lt;T&gt; setParams(Object[] params) &#123;</span><br><span class=\"line\">        this.params = params;</span><br><span class=\"line\">        return this;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public PageHibernateCallBack&lt;T&gt; setStartIndex(int startIndex) &#123;</span><br><span class=\"line\">        this.startIndex = startIndex;</span><br><span class=\"line\">        return this;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public PageHibernateCallBack&lt;T&gt; setPageSize(int pageSize) &#123;</span><br><span class=\"line\">        this.pageSize = pageSize;</span><br><span class=\"line\">        return this;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public List&lt;T&gt; doInHibernate(Session session) throws HibernateException,</span><br><span class=\"line\">            SQLException &#123;</span><br><span class=\"line\">        // 获得query对象</span><br><span class=\"line\">        Query query = session.createQuery(hql);</span><br><span class=\"line\">        // 遍历多个参数</span><br><span class=\"line\">        for (int i = 0; i &lt; params.length; i++) &#123;</span><br><span class=\"line\">            // 给query对象设置参数</span><br><span class=\"line\">            query.setParameter(i, params[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 设置分页所用到的数据</span><br><span class=\"line\">        query.setFirstResult(startIndex);</span><br><span class=\"line\">        query.setMaxResults(pageSize);</span><br><span class=\"line\">        // 查询所有</span><br><span class=\"line\">        return query.list();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">4、</span><br><span class=\"line\">    Service层中添加的操作</span><br><span class=\"line\">    //获取总记录数</span><br><span class=\"line\">        int totalRecord = this.coursetypeDao.getTotalRecord(condition,params);</span><br><span class=\"line\">        //创建pageBean对象</span><br><span class=\"line\">        PageBean&lt;CrmCourseType&gt; pageBean = new PageBean&lt;CrmCourseType&gt;(pageNum, pageSize, totalRecord);</span><br><span class=\"line\">        //进行分页查询，获得分页数据</span><br><span class=\"line\">        List&lt;CrmCourseType&gt; data = this.coursetypeDao.findCourseByCondition(condition, params, pageBean.getStartIndex(), pageBean.getPageSize());</span><br><span class=\"line\">        pageBean.setData(data);</span><br><span class=\"line\">        return pageBean;</span><br><span class=\"line\"></span><br><span class=\"line\">5、</span><br><span class=\"line\">jsp的编写</span><br><span class=\"line\">&lt;span&gt;第&lt;s:property value=&quot;pageNum&quot; /&gt;/&lt;s:property value=&quot;totalPage&quot; /&gt;页&lt;/span&gt;</span><br><span class=\"line\">        &lt;span&gt;</span><br><span class=\"line\">            &lt;s:if test=&quot;pageNum gt 1&quot;&gt;</span><br><span class=\"line\">                &lt;a href=&quot;javascript:void(0)&quot; onclick=&quot;showPage(1)&quot;&gt;[首页]&lt;/a&gt;&amp;nbsp;&amp;nbsp;</span><br><span class=\"line\">                &lt;a href=&quot;javascript:void(0)&quot; onclick=&quot;showPage(&lt;s:property value=&quot;pageNum - 1&quot; /&gt; )&quot;&gt;[上一页]&lt;/a&gt;&amp;nbsp;&amp;nbsp;</span><br><span class=\"line\">            &lt;/s:if&gt;</span><br><span class=\"line\">          &lt;!--动态滚动条 --&gt;</span><br><span class=\"line\">            &lt;s:iterator begin=&quot;start&quot; end=&quot;end&quot; var=&quot;num&quot;&gt;</span><br><span class=\"line\">                &lt;a href=&quot;#&quot; onclick=&quot;showPage(&lt;s:property value=&quot;#num&quot; /&gt;)&quot;&gt;&lt;s:property value=&quot;#num&quot; /&gt;&lt;/a&gt;</span><br><span class=\"line\">            &lt;/s:iterator&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">            &lt;s:if test=&quot;pageNum lt totalPage&quot;&gt;</span><br><span class=\"line\">                &lt;a href=&quot;javascript:void(0)&quot; onclick=&quot;showPage(&lt;s:property value=&quot;pageNum + 1&quot;/&gt; )&quot;&gt;[下一页]&lt;/a&gt;&amp;nbsp;&amp;nbsp;</span><br><span class=\"line\">                &lt;a href=&quot;javascript:void(0)&quot; onclick=&quot;showPage(&lt;s:property value=&quot;totalPage&quot;/&gt;)&quot;&gt;[尾页]&lt;/a&gt;</span><br><span class=\"line\">            &lt;/s:if&gt;</span><br><span class=\"line\">        &lt;/span&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">        function showPage(num)&#123;</span><br><span class=\"line\">            //修改隐藏域的值</span><br><span class=\"line\">            document.getElementById(&quot;pageNum&quot;).value = num;</span><br><span class=\"line\">            //提交表单</span><br><span class=\"line\">            document.forms[0].submit();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">    form表单</span><br><span class=\"line\">        &lt;%-- 添加隐藏域，传入pageNum --%&gt;</span><br><span class=\"line\">        &lt;s:hidden id=&quot;pageNum&quot; name=&quot;pageNum&quot; value=&quot;1&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">6、Iterator标签消失的问题，传入的集合找不到了</span><br><span class=\"line\"></span><br><span class=\"line\">7、this关键字，哪个类被new。this就指哪个类</span><br><span class=\"line\"></span><br><span class=\"line\">8、BaseDao</span><br><span class=\"line\">public interface BaseDao&lt;T&gt; &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 添加操作</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param t</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public void save(T t);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 删除操作</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param t</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public void delete(T t);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 修改操作</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param t</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public void update(T t);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 添加或更新操作</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param t</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public void saveOrUpdate(T t);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 通过Id查询</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param id</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public T findById(java.io.Serializable id);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 查询所有</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public List&lt;T&gt; findAll();</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 通过条件查询所有</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param condition</span><br><span class=\"line\">     * @param params</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public List&lt;T&gt; findAllByCondition(String condition, Object[] params);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 条件+分页查询</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param condition</span><br><span class=\"line\">     * @param params</span><br><span class=\"line\">     * @param startIndex</span><br><span class=\"line\">     * @param pageSize</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public List&lt;T&gt; findAllByPage(String condition, Object[] params,</span><br><span class=\"line\">            int startIndex, int pageSize);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 查询总记录数+条件查询</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param condition</span><br><span class=\"line\">     * @param params</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public int getTotalRecord(String condition, Object[] params);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 离线查询</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param criteria</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public List&lt;T&gt; findAllByQBC(DetachedCriteria criteria);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 使用QBC进行分页查询</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param criteria</span><br><span class=\"line\">     * @param condition</span><br><span class=\"line\">     * @param params</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public List&lt;T&gt; findAllByPage(DetachedCriteria criteria, int startIndex,</span><br><span class=\"line\">            int pageSize);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">9、</span><br><span class=\"line\">BaseDao的实现类</span><br><span class=\"line\">public class BaseDaoImpl&lt;T&gt; extends HibernateDaoSupport implements BaseDao&lt;T&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private Class&lt;?&gt; beanClass;</span><br><span class=\"line\">    //泛型&lt;T&gt;在编译时是无类型的，只是变量，T只有在运行以后才可以获得具体类型，子类被new时，父类的构造方法会执行</span><br><span class=\"line\">    public BaseDaoImpl() &#123;</span><br><span class=\"line\">        //ParameterizedType是被参数化了的类型，例如：BaseDaoImpl&lt;CrmClasses&gt;</span><br><span class=\"line\">        ParameterizedType parameterizedType = (ParameterizedType) this</span><br><span class=\"line\">                .getClass().getGenericSuperclass()获得带泛型参数的class对象;</span><br><span class=\"line\">        //getActualTypeArguments()获得所有实际参数值，就是泛型的类型，一般情况下为1个。返回类型为.class的字节码文件</span><br><span class=\"line\">        beanClass = (Class&lt;?&gt;) parameterizedType.getActualTypeArguments()[0];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void save(T t) &#123;</span><br><span class=\"line\">        this.getHibernateTemplate().save(t);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void delete(T t) &#123;</span><br><span class=\"line\">        this.getHibernateTemplate().delete(t);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void update(T t) &#123;</span><br><span class=\"line\">        this.getHibernateTemplate().update(t);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public T findById(Serializable id) &#123;</span><br><span class=\"line\">        return (T) this.getHibernateTemplate().get(beanClass, id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public List&lt;T&gt; findAll() &#123;</span><br><span class=\"line\">        // getName()获得全限定名</span><br><span class=\"line\">        return this.getHibernateTemplate().find(&quot;from &quot; + beanClass.getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public List&lt;T&gt; findAllByCondition(String condition, Object[] params) &#123;</span><br><span class=\"line\">        String hql = &quot;from &quot; + beanClass.getName() + &quot; where 1 = 1 &quot;</span><br><span class=\"line\">                + condition;</span><br><span class=\"line\">        return this.getHibernateTemplate().find(hql, params);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public List&lt;T&gt; findAllByPage(String condition, Object[] params,</span><br><span class=\"line\">            int startIndex, int pageSize) &#123;</span><br><span class=\"line\">        String hql = &quot;from &quot; + beanClass.getName() + &quot; where 1 = 1 &quot;</span><br><span class=\"line\">                + condition;</span><br><span class=\"line\">        return this.getHibernateTemplate().execute(</span><br><span class=\"line\">                new PageHibernateCallBack&lt;T&gt;().setHql(hql).setParams(params)</span><br><span class=\"line\">                        .setStartIndex(startIndex).setPageSize(pageSize));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int getTotalRecord(String condition, Object[] params) &#123;</span><br><span class=\"line\">        String hql = &quot;select count(c) from &quot; + beanClass.getName()</span><br><span class=\"line\">                + &quot; as c where 1 = 1 &quot; + condition;</span><br><span class=\"line\">        List&lt;Long&gt; list = this.getHibernateTemplate().find(hql, params);</span><br><span class=\"line\">        return list.get(0).intValue();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    离线查询</span><br><span class=\"line\">    public List&lt;T&gt; findAllByQBC(DetachedCriteria criteria) &#123;</span><br><span class=\"line\">        return this.getHibernateTemplate().findByCriteria(criteria);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public List&lt;T&gt; findAllByPage(DetachedCriteria criteria, int startIndex,</span><br><span class=\"line\">            int pageSize) &#123;</span><br><span class=\"line\">        return this.getHibernateTemplate().findByCriteria(criteria, startIndex,</span><br><span class=\"line\">                pageSize);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void saveOrUpdate(T t) &#123;</span><br><span class=\"line\">        this.getHibernateTemplate().saveOrUpdate(t);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">10、</span><br><span class=\"line\">BaseAction</span><br><span class=\"line\">public class BaseAction&lt;T&gt; extends ActionSupport implements ModelDriven&lt;T&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private T t;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public T getModel() &#123;</span><br><span class=\"line\">        return t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /泛型&lt;T&gt;在编译时是无类型的，只是变量，T只有在运行以后才可以获得具体类型，子类被new时，父类的构造方法会执行</span><br><span class=\"line\">    @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class=\"line\">    public BaseAction() &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            //ParameterizedType是被参数化了的类型，例如：BaseDaoImpl&lt;CrmClasses&gt;</span><br><span class=\"line\">            ParameterizedType parameterizedType = (ParameterizedType) this</span><br><span class=\"line\">                    .getClass().getGenericSuperclass();</span><br><span class=\"line\">            //getActualTypeArguments()获得所有实际参数值，就是泛型的类型，一般情况下为1个。返回类型为.class的字节码文件</span><br><span class=\"line\">            Class&lt;T&gt; clazz = (Class&lt;T&gt;) parameterizedType</span><br><span class=\"line\">                    .getActualTypeArguments()[0];</span><br><span class=\"line\">            // 反射创建实例</span><br><span class=\"line\">            t = clazz.newInstance();</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 注入service</span><br><span class=\"line\">    private StaffService staffService;</span><br><span class=\"line\">    private PostService postService;</span><br><span class=\"line\">    private DepartmentService departmentService;</span><br><span class=\"line\">    private CoursetypeService coursetypeService;</span><br><span class=\"line\"></span><br><span class=\"line\">    public StaffService getStaffService() &#123;</span><br><span class=\"line\">        return staffService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setStaffService(StaffService staffService) &#123;</span><br><span class=\"line\">        this.staffService = staffService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public PostService getPostService() &#123;</span><br><span class=\"line\">        return postService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setPostService(PostService postService) &#123;</span><br><span class=\"line\">        this.postService = postService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public DepartmentService getDepartmentService() &#123;</span><br><span class=\"line\">        return departmentService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setDepartmentService(DepartmentService departmentService) &#123;</span><br><span class=\"line\">        this.departmentService = departmentService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public CoursetypeService getCoursetypeService() &#123;</span><br><span class=\"line\">        return coursetypeService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setCoursetypeService(CoursetypeService coursetypeService) &#123;</span><br><span class=\"line\">        this.coursetypeService = coursetypeService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //分页数据</span><br><span class=\"line\">    private int pageNum = 1;</span><br><span class=\"line\">    private int pageSize = 2;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setPageNum(int pageNum) &#123;</span><br><span class=\"line\">        this.pageNum = pageNum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public void setPageSize(int pageSize) &#123;</span><br><span class=\"line\">        this.pageSize = pageSize;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public int getPageNum() &#123;</span><br><span class=\"line\">        return pageNum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public int getPageSize() &#123;</span><br><span class=\"line\">        return pageSize;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //简化值栈操作</span><br><span class=\"line\">    public void push(Object o)&#123;</span><br><span class=\"line\">        ActionContext.getContext().getValueStack().push(o);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public void put(String key,Object value)&#123;</span><br><span class=\"line\">        ActionContext.getContext().put(key, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public void set(String key,Object o)&#123;</span><br><span class=\"line\">        ActionContext.getContext().getValueStack().set(key, o);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public void putSession(String key,Object value)&#123;</span><br><span class=\"line\">        ActionContext.getContext().getSession().put(key, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public void putApplication(String key,Object value)&#123;</span><br><span class=\"line\">        ActionContext.getContext().getApplication().put(key, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">11、</span><br><span class=\"line\">文件上传</span><br><span class=\"line\">    获取文件上传的三个值</span><br><span class=\"line\">    private File schedule; // 上传内容</span><br><span class=\"line\">    private String scheduleFileName; // 上传的文件名</span><br><span class=\"line\">    private String scheduleContentType; // 上传的类型</span><br><span class=\"line\">    上传操作</span><br><span class=\"line\">    public String upload() throws IOException &#123;</span><br><span class=\"line\">        //获取上传目的地的虚拟路径</span><br><span class=\"line\">        String parentDir = ServletActionContext.getServletContext().getRealPath(&quot;/WEB-INF/upload&quot;);</span><br><span class=\"line\">        //给上传文件改名</span><br><span class=\"line\">        String fileName = UUID.randomUUID().toString().replace(&quot;-&quot;, &quot;&quot;);</span><br><span class=\"line\">        //保存文件</span><br><span class=\"line\">        FileUtils.copyFile(schedule, new File(parentDir, fileName));</span><br><span class=\"line\">    配置拦截器可通过的扩展名</span><br><span class=\"line\">    &lt;interceptor-ref name=&quot;defaultStack&quot;&gt;</span><br><span class=\"line\">        &lt;param name=&quot;fileUpload.allowedExtensions&quot;&gt;xls,xslx&lt;/param&gt;</span><br><span class=\"line\">    使用@InputConfig(resultName=&quot;uploadInput&quot;)修改input视图的name</span><br></pre></td></tr></table></figure>\n"},{"title":"SSH做项目时经验总结(3)","date":"2017-07-29T13:43:59.000Z","description":"SSH做项目时经验总结-3","_content":"**SSH做项目时经验总结 （3）**\n1.IllegalArgumentException occurred while calling setter of pers.yijin.bms.domain.User.messageList\nhbm.xml文件与实体类文件还有数据库中的文件不匹配的情况就会出现\n\n2.Write operations are not allowed in read-only mode (FlushMode.MANUAL): Turn your Session into FlushMode.COMMIT/AUTO or remove 'readOnly' marker from transaction definition.\n开启OpenSessionInViewFilter来阻止延迟加载的错误,我们开启OpenSessionInViewFilter这个过滤器的时候FlushMode就已经被默认设置为了MANUAL！\n如果FlushMode是MANUAL或NEVEL,在操作过程中 hibernate会将事务设置为readonly，解决方法在过滤器中注入：\n\n\n```\n    <init-param>\n        <param-name>flushMode</param-name>\n        <param-value>AUTO</param-value>\n    </init-param>\n```\n\n3.hibernate延长session关闭时间后，删除数据需要flush()刷session\n\n4.直接把list压入栈struts2的iterator标签不能取值\n\n","source":"_posts/SSH做项目时经验总结-3.md","raw":"---\ntitle: SSH做项目时经验总结(3)\ndate: 2017-07-29 21:43:59\ncategories: 遇到的坑\ntags:\n     - 填坑经验\ndescription: SSH做项目时经验总结-3\n---\n**SSH做项目时经验总结 （3）**\n1.IllegalArgumentException occurred while calling setter of pers.yijin.bms.domain.User.messageList\nhbm.xml文件与实体类文件还有数据库中的文件不匹配的情况就会出现\n\n2.Write operations are not allowed in read-only mode (FlushMode.MANUAL): Turn your Session into FlushMode.COMMIT/AUTO or remove 'readOnly' marker from transaction definition.\n开启OpenSessionInViewFilter来阻止延迟加载的错误,我们开启OpenSessionInViewFilter这个过滤器的时候FlushMode就已经被默认设置为了MANUAL！\n如果FlushMode是MANUAL或NEVEL,在操作过程中 hibernate会将事务设置为readonly，解决方法在过滤器中注入：\n\n\n```\n    <init-param>\n        <param-name>flushMode</param-name>\n        <param-value>AUTO</param-value>\n    </init-param>\n```\n\n3.hibernate延长session关闭时间后，删除数据需要flush()刷session\n\n4.直接把list压入栈struts2的iterator标签不能取值\n\n","slug":"SSH做项目时经验总结-3","published":1,"updated":"2017-07-29T13:48:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjksf3cwx001xh8efxy8yfv5z","content":"<p><strong>SSH做项目时经验总结 （3）</strong><br>1.IllegalArgumentException occurred while calling setter of pers.yijin.bms.domain.User.messageList<br>hbm.xml文件与实体类文件还有数据库中的文件不匹配的情况就会出现</p>\n<p>2.Write operations are not allowed in read-only mode (FlushMode.MANUAL): Turn your Session into FlushMode.COMMIT/AUTO or remove ‘readOnly’ marker from transaction definition.<br>开启OpenSessionInViewFilter来阻止延迟加载的错误,我们开启OpenSessionInViewFilter这个过滤器的时候FlushMode就已经被默认设置为了MANUAL！<br>如果FlushMode是MANUAL或NEVEL,在操作过程中 hibernate会将事务设置为readonly，解决方法在过滤器中注入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;init-param&gt;</span><br><span class=\"line\">    &lt;param-name&gt;flushMode&lt;/param-name&gt;</span><br><span class=\"line\">    &lt;param-value&gt;AUTO&lt;/param-value&gt;</span><br><span class=\"line\">&lt;/init-param&gt;</span><br></pre></td></tr></table></figure>\n<p>3.hibernate延长session关闭时间后，删除数据需要flush()刷session</p>\n<p>4.直接把list压入栈struts2的iterator标签不能取值</p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>SSH做项目时经验总结 （3）</strong><br>1.IllegalArgumentException occurred while calling setter of pers.yijin.bms.domain.User.messageList<br>hbm.xml文件与实体类文件还有数据库中的文件不匹配的情况就会出现</p>\n<p>2.Write operations are not allowed in read-only mode (FlushMode.MANUAL): Turn your Session into FlushMode.COMMIT/AUTO or remove ‘readOnly’ marker from transaction definition.<br>开启OpenSessionInViewFilter来阻止延迟加载的错误,我们开启OpenSessionInViewFilter这个过滤器的时候FlushMode就已经被默认设置为了MANUAL！<br>如果FlushMode是MANUAL或NEVEL,在操作过程中 hibernate会将事务设置为readonly，解决方法在过滤器中注入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;init-param&gt;</span><br><span class=\"line\">    &lt;param-name&gt;flushMode&lt;/param-name&gt;</span><br><span class=\"line\">    &lt;param-value&gt;AUTO&lt;/param-value&gt;</span><br><span class=\"line\">&lt;/init-param&gt;</span><br></pre></td></tr></table></figure>\n<p>3.hibernate延长session关闭时间后，删除数据需要flush()刷session</p>\n<p>4.直接把list压入栈struts2的iterator标签不能取值</p>\n"},{"title":"Struts2框架的工作流程总结","date":"2017-07-29T06:30:35.000Z","description":"Struts2框架的工作流程总结","_content":"先放一张图片(处理过的)\n![这里写图片描述](http://img.blog.csdn.net/20170311210630800?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ2xhZGlhdG9yX3d5ag==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n**1.**\n用户使用***客户端***浏览器发送一个***请求***（HttpServletRequest）到***服务器***（Tomcat）\n**2.**\n这个请求会经过几个***过滤器***（Filter）最后到达Struts2的核心过滤器***FilterDispatcher***\n**3.**\nFilterDispatcher询问***动作映射ActionMapper***来找到***对应***的Action类\n**4.**\n接着FilterDispatcher会把请求提交到Action的***代理类ActionProxy***\n**5.**\nActionProxy会读取***配置文件struts.xml***来确定执行哪个方法\n**6.**\nActionProxy会创建一个***ActionInvocation***，ActionInvocation中持有Action实例和所有与Action相关的拦截器Interceptor\n**7.**\nActionInvocation会让Action在执行之前，***执行与Action相关的拦截器***，接着执行Action，***返回Result***结果视图，通常是Jsp页面，最后***倒序***执行与Action相关的拦截器\n**8.**\n最后Struts2框架把***响应HttpServletResponse***返回给客户端\n\n","source":"_posts/Struts2框架的工作流程总结.md","raw":"---\ntitle: Struts2框架的工作流程总结\ndate: 2017-07-29 14:30:35\ncategories: struts2框架\ntags:\n     - 框架\n     - struts2\ndescription: Struts2框架的工作流程总结\n---\n先放一张图片(处理过的)\n![这里写图片描述](http://img.blog.csdn.net/20170311210630800?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ2xhZGlhdG9yX3d5ag==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n**1.**\n用户使用***客户端***浏览器发送一个***请求***（HttpServletRequest）到***服务器***（Tomcat）\n**2.**\n这个请求会经过几个***过滤器***（Filter）最后到达Struts2的核心过滤器***FilterDispatcher***\n**3.**\nFilterDispatcher询问***动作映射ActionMapper***来找到***对应***的Action类\n**4.**\n接着FilterDispatcher会把请求提交到Action的***代理类ActionProxy***\n**5.**\nActionProxy会读取***配置文件struts.xml***来确定执行哪个方法\n**6.**\nActionProxy会创建一个***ActionInvocation***，ActionInvocation中持有Action实例和所有与Action相关的拦截器Interceptor\n**7.**\nActionInvocation会让Action在执行之前，***执行与Action相关的拦截器***，接着执行Action，***返回Result***结果视图，通常是Jsp页面，最后***倒序***执行与Action相关的拦截器\n**8.**\n最后Struts2框架把***响应HttpServletResponse***返回给客户端\n\n","slug":"Struts2框架的工作流程总结","published":1,"updated":"2017-07-29T13:54:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjksf3cx20020h8efx4h8s7ul","content":"<p>先放一张图片(处理过的)<br><img src=\"http://img.blog.csdn.net/20170311210630800?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ2xhZGlhdG9yX3d5ag==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br><strong>1.</strong><br>用户使用<strong><em>客户端</em></strong>浏览器发送一个<strong><em>请求</em></strong>（HttpServletRequest）到<strong><em>服务器</em></strong>（Tomcat）<br><strong>2.</strong><br>这个请求会经过几个<strong><em>过滤器</em></strong>（Filter）最后到达Struts2的核心过滤器<strong><em>FilterDispatcher</em></strong><br><strong>3.</strong><br>FilterDispatcher询问<strong><em>动作映射ActionMapper</em></strong>来找到<strong><em>对应</em></strong>的Action类<br><strong>4.</strong><br>接着FilterDispatcher会把请求提交到Action的<strong><em>代理类ActionProxy</em></strong><br><strong>5.</strong><br>ActionProxy会读取<strong><em>配置文件struts.xml</em></strong>来确定执行哪个方法<br><strong>6.</strong><br>ActionProxy会创建一个<strong><em>ActionInvocation</em></strong>，ActionInvocation中持有Action实例和所有与Action相关的拦截器Interceptor<br><strong>7.</strong><br>ActionInvocation会让Action在执行之前，<strong><em>执行与Action相关的拦截器</em></strong>，接着执行Action，<strong><em>返回Result</em></strong>结果视图，通常是Jsp页面，最后<strong><em>倒序</em></strong>执行与Action相关的拦截器<br><strong>8.</strong><br>最后Struts2框架把<strong><em>响应HttpServletResponse</em></strong>返回给客户端</p>\n","site":{"data":{}},"excerpt":"","more":"<p>先放一张图片(处理过的)<br><img src=\"http://img.blog.csdn.net/20170311210630800?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ2xhZGlhdG9yX3d5ag==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br><strong>1.</strong><br>用户使用<strong><em>客户端</em></strong>浏览器发送一个<strong><em>请求</em></strong>（HttpServletRequest）到<strong><em>服务器</em></strong>（Tomcat）<br><strong>2.</strong><br>这个请求会经过几个<strong><em>过滤器</em></strong>（Filter）最后到达Struts2的核心过滤器<strong><em>FilterDispatcher</em></strong><br><strong>3.</strong><br>FilterDispatcher询问<strong><em>动作映射ActionMapper</em></strong>来找到<strong><em>对应</em></strong>的Action类<br><strong>4.</strong><br>接着FilterDispatcher会把请求提交到Action的<strong><em>代理类ActionProxy</em></strong><br><strong>5.</strong><br>ActionProxy会读取<strong><em>配置文件struts.xml</em></strong>来确定执行哪个方法<br><strong>6.</strong><br>ActionProxy会创建一个<strong><em>ActionInvocation</em></strong>，ActionInvocation中持有Action实例和所有与Action相关的拦截器Interceptor<br><strong>7.</strong><br>ActionInvocation会让Action在执行之前，<strong><em>执行与Action相关的拦截器</em></strong>，接着执行Action，<strong><em>返回Result</em></strong>结果视图，通常是Jsp页面，最后<strong><em>倒序</em></strong>执行与Action相关的拦截器<br><strong>8.</strong><br>最后Struts2框架把<strong><em>响应HttpServletResponse</em></strong>返回给客户端</p>\n"},{"title":"css常见问题总结","date":"2017-10-17T13:30:12.000Z","description":"记录在生产环境下遇到的css问题","_content":"# css遮罩层的实现\n```\n.shadeBox {\n    position: fixed;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    background: #aaa;\n    opacity: 0.7;\n    display: none;\n    z-index: 99;\n}\n```\n解释：\n1. 要铺满整个页面    top: 0;bottom: 0;left: 0;right: 0;\n2. 透明度和颜色设置\n3. 图层在最上面z-index:99;\n4. 随着页面滚动position:fixed\n\n# 使一个div随另一个div的高度变化而变化\n两个div的父元素设置：overflow:hidden;\n需要变化的子元素设置：padding-bottom: 1000px;margin-bottom: -1000px;\n\n# CSS行内元素的特征\n诸如像span、a等这些行内元素，使用margin-top、margin-bottom、padding-top、padding-bottom、width、height等是无效的，只能设置left和right。如果想让这些属性生效，要添加display:inline-block。\ndisplay:inline-block:使元素成为行内块元素。\n\n# CSS属性pointer-events\n设置pointer-events:none; 时元素永远不会成为鼠标事件的target。但是，当其后代元素的pointer-events属性指定其他值时，鼠标事件可以指向后代元素，在这种情况下，鼠标事件将在捕获或冒泡阶触发父元素的事件侦听器。\n\n# CSS设置内容溢出显示省略号\n```\n/* 行内容溢出显示省略号 */\noverflow: hidden;\ntext-overflow: ellipsis;\nwhite-space: nowrap;\n\n/* 多行显示省略号 */\ndisplay:-webkit-box; // 弹性盒子\n-webkit-box-orient:vertical // 从上到下垂直排列子元素\n-webkit-line-clamp:3 // 显示行数\noverflow:hidden // 超出部分隐藏\n```\n# CSSflex布局\nhttp://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\n# CSS伪类active的使用\n在WebAPP中为列表和需要点击的Dom对象添加active伪类，使其在点击时能产生高亮效果，接近原生APP体验。\n\n# 适配手机dpi的1像素边框\n基于伪类+缩放的实现(基于stylus的写法)\n伪类：\n```\nborder-1px($color)\n    position: relative\n    &:after\n        position: absolute\n        display: block\n        left: 0\n        bottom: 0\n        width: 100%\n        border-top: 1px solid $color\n        content: ' '\n```\n缩放：\n```\n@media (-webkit-min-device-pixel-ratio: 1.5),(min-device-pixel-ratio: 1.5)\n    .border-1px\n        &::after\n            // 根据Y轴来定义缩放\n            -webkit-transform: scaleY(0.7)\n            transform: scaleY(0.7)\n\n@media (-webkit-min-device-pixel-ratio: 2),(min-device-pixel-ratio: 2)\n    .border-1px\n        &::after\n            // 根据Y轴来定义缩放\n            -webkit-transform: scaleY(0.5)\n            transform: scaleY(0.5)\n```\n\n# 两个行内元素之间去掉空白间隙\n因为两个元素之间空字符导致的，父盒子font-size设置为0即可，获知两个元素之间不用回车换行。\n\n# 清除浮动的理解\nhttps://juejin.im/post/59e7190bf265da4307025d91\n\n# 模糊半透明背景图的设置\n父盒子position为relative\n背景图设置：\n```\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    z-index: -1;\n    filter: blur(10px); // 图片模糊设置\n```\n\n# 经典的CSS sticky footer布局\nSticky Footer，完美的绝对底部https://aotu.io/notes/2017/04/13/Sticky-footer/index.html\n兼容性最好的实现：\n将内容区用一个容器包起来，需要定位在底部的元素与容器平级，就像这样:\n```\n<div>\n    <div class=\"wrapper clearfix\">\n        <div class=\"content\"></div>\n    </div>\n    <div class=\"footer\"></div>\n</div>\n```\n样式如下：\n```\n.wrapper{\n    min-height: 100%; // 需要设置最小高度\n}\n.clearfix{\n    display: inline-block;\n}\n// 设置伪类来清除浮动\n.clearfix: after{\n    display: block\n    content: '.'\n    height: 0\n    line-height: 0\n    clear: both\n    visibility: hidden\n}\n.wrapper .content{\n    padding-bottom: 64px; // 为footer留出位置\n}\n.footer{\n    position: relative;\n    margin: -64px auto 0 auto;\n    clear: both; // 清除浮动\n}\n```\n\n# 图片加载失败显示默认图片\n","source":"_posts/css常见问题总结.md","raw":"---\ntitle: css常见问题总结\ndate: 2017-10-17 21:30:12\ncategories: css\ntags:\n     - css\n     - 填坑经验\ndescription: 记录在生产环境下遇到的css问题\n---\n# css遮罩层的实现\n```\n.shadeBox {\n    position: fixed;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    background: #aaa;\n    opacity: 0.7;\n    display: none;\n    z-index: 99;\n}\n```\n解释：\n1. 要铺满整个页面    top: 0;bottom: 0;left: 0;right: 0;\n2. 透明度和颜色设置\n3. 图层在最上面z-index:99;\n4. 随着页面滚动position:fixed\n\n# 使一个div随另一个div的高度变化而变化\n两个div的父元素设置：overflow:hidden;\n需要变化的子元素设置：padding-bottom: 1000px;margin-bottom: -1000px;\n\n# CSS行内元素的特征\n诸如像span、a等这些行内元素，使用margin-top、margin-bottom、padding-top、padding-bottom、width、height等是无效的，只能设置left和right。如果想让这些属性生效，要添加display:inline-block。\ndisplay:inline-block:使元素成为行内块元素。\n\n# CSS属性pointer-events\n设置pointer-events:none; 时元素永远不会成为鼠标事件的target。但是，当其后代元素的pointer-events属性指定其他值时，鼠标事件可以指向后代元素，在这种情况下，鼠标事件将在捕获或冒泡阶触发父元素的事件侦听器。\n\n# CSS设置内容溢出显示省略号\n```\n/* 行内容溢出显示省略号 */\noverflow: hidden;\ntext-overflow: ellipsis;\nwhite-space: nowrap;\n\n/* 多行显示省略号 */\ndisplay:-webkit-box; // 弹性盒子\n-webkit-box-orient:vertical // 从上到下垂直排列子元素\n-webkit-line-clamp:3 // 显示行数\noverflow:hidden // 超出部分隐藏\n```\n# CSSflex布局\nhttp://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\n# CSS伪类active的使用\n在WebAPP中为列表和需要点击的Dom对象添加active伪类，使其在点击时能产生高亮效果，接近原生APP体验。\n\n# 适配手机dpi的1像素边框\n基于伪类+缩放的实现(基于stylus的写法)\n伪类：\n```\nborder-1px($color)\n    position: relative\n    &:after\n        position: absolute\n        display: block\n        left: 0\n        bottom: 0\n        width: 100%\n        border-top: 1px solid $color\n        content: ' '\n```\n缩放：\n```\n@media (-webkit-min-device-pixel-ratio: 1.5),(min-device-pixel-ratio: 1.5)\n    .border-1px\n        &::after\n            // 根据Y轴来定义缩放\n            -webkit-transform: scaleY(0.7)\n            transform: scaleY(0.7)\n\n@media (-webkit-min-device-pixel-ratio: 2),(min-device-pixel-ratio: 2)\n    .border-1px\n        &::after\n            // 根据Y轴来定义缩放\n            -webkit-transform: scaleY(0.5)\n            transform: scaleY(0.5)\n```\n\n# 两个行内元素之间去掉空白间隙\n因为两个元素之间空字符导致的，父盒子font-size设置为0即可，获知两个元素之间不用回车换行。\n\n# 清除浮动的理解\nhttps://juejin.im/post/59e7190bf265da4307025d91\n\n# 模糊半透明背景图的设置\n父盒子position为relative\n背景图设置：\n```\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    z-index: -1;\n    filter: blur(10px); // 图片模糊设置\n```\n\n# 经典的CSS sticky footer布局\nSticky Footer，完美的绝对底部https://aotu.io/notes/2017/04/13/Sticky-footer/index.html\n兼容性最好的实现：\n将内容区用一个容器包起来，需要定位在底部的元素与容器平级，就像这样:\n```\n<div>\n    <div class=\"wrapper clearfix\">\n        <div class=\"content\"></div>\n    </div>\n    <div class=\"footer\"></div>\n</div>\n```\n样式如下：\n```\n.wrapper{\n    min-height: 100%; // 需要设置最小高度\n}\n.clearfix{\n    display: inline-block;\n}\n// 设置伪类来清除浮动\n.clearfix: after{\n    display: block\n    content: '.'\n    height: 0\n    line-height: 0\n    clear: both\n    visibility: hidden\n}\n.wrapper .content{\n    padding-bottom: 64px; // 为footer留出位置\n}\n.footer{\n    position: relative;\n    margin: -64px auto 0 auto;\n    clear: both; // 清除浮动\n}\n```\n\n# 图片加载失败显示默认图片\n","slug":"css常见问题总结","published":1,"updated":"2017-11-06T15:15:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjksf3cx30024h8ef6jv4d4iz","content":"<h1 id=\"css遮罩层的实现\"><a href=\"#css遮罩层的实现\" class=\"headerlink\" title=\"css遮罩层的实现\"></a>css遮罩层的实现</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.shadeBox &#123;</span><br><span class=\"line\">    position: fixed;</span><br><span class=\"line\">    top: 0;</span><br><span class=\"line\">    bottom: 0;</span><br><span class=\"line\">    left: 0;</span><br><span class=\"line\">    right: 0;</span><br><span class=\"line\">    background: #aaa;</span><br><span class=\"line\">    opacity: 0.7;</span><br><span class=\"line\">    display: none;</span><br><span class=\"line\">    z-index: 99;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>解释：</p>\n<ol>\n<li>要铺满整个页面    top: 0;bottom: 0;left: 0;right: 0;</li>\n<li>透明度和颜色设置</li>\n<li>图层在最上面z-index:99;</li>\n<li>随着页面滚动position:fixed</li>\n</ol>\n<h1 id=\"使一个div随另一个div的高度变化而变化\"><a href=\"#使一个div随另一个div的高度变化而变化\" class=\"headerlink\" title=\"使一个div随另一个div的高度变化而变化\"></a>使一个div随另一个div的高度变化而变化</h1><p>两个div的父元素设置：overflow:hidden;<br>需要变化的子元素设置：padding-bottom: 1000px;margin-bottom: -1000px;</p>\n<h1 id=\"CSS行内元素的特征\"><a href=\"#CSS行内元素的特征\" class=\"headerlink\" title=\"CSS行内元素的特征\"></a>CSS行内元素的特征</h1><p>诸如像span、a等这些行内元素，使用margin-top、margin-bottom、padding-top、padding-bottom、width、height等是无效的，只能设置left和right。如果想让这些属性生效，要添加display:inline-block。<br>display:inline-block:使元素成为行内块元素。</p>\n<h1 id=\"CSS属性pointer-events\"><a href=\"#CSS属性pointer-events\" class=\"headerlink\" title=\"CSS属性pointer-events\"></a>CSS属性pointer-events</h1><p>设置pointer-events:none; 时元素永远不会成为鼠标事件的target。但是，当其后代元素的pointer-events属性指定其他值时，鼠标事件可以指向后代元素，在这种情况下，鼠标事件将在捕获或冒泡阶触发父元素的事件侦听器。</p>\n<h1 id=\"CSS设置内容溢出显示省略号\"><a href=\"#CSS设置内容溢出显示省略号\" class=\"headerlink\" title=\"CSS设置内容溢出显示省略号\"></a>CSS设置内容溢出显示省略号</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* 行内容溢出显示省略号 */</span><br><span class=\"line\">overflow: hidden;</span><br><span class=\"line\">text-overflow: ellipsis;</span><br><span class=\"line\">white-space: nowrap;</span><br><span class=\"line\"></span><br><span class=\"line\">/* 多行显示省略号 */</span><br><span class=\"line\">display:-webkit-box; // 弹性盒子</span><br><span class=\"line\">-webkit-box-orient:vertical // 从上到下垂直排列子元素</span><br><span class=\"line\">-webkit-line-clamp:3 // 显示行数</span><br><span class=\"line\">overflow:hidden // 超出部分隐藏</span><br></pre></td></tr></table></figure>\n<h1 id=\"CSSflex布局\"><a href=\"#CSSflex布局\" class=\"headerlink\" title=\"CSSflex布局\"></a>CSSflex布局</h1><p><a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html</a></p>\n<h1 id=\"CSS伪类active的使用\"><a href=\"#CSS伪类active的使用\" class=\"headerlink\" title=\"CSS伪类active的使用\"></a>CSS伪类active的使用</h1><p>在WebAPP中为列表和需要点击的Dom对象添加active伪类，使其在点击时能产生高亮效果，接近原生APP体验。</p>\n<h1 id=\"适配手机dpi的1像素边框\"><a href=\"#适配手机dpi的1像素边框\" class=\"headerlink\" title=\"适配手机dpi的1像素边框\"></a>适配手机dpi的1像素边框</h1><p>基于伪类+缩放的实现(基于stylus的写法)<br>伪类：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">border-1px($color)</span><br><span class=\"line\">    position: relative</span><br><span class=\"line\">    &amp;:after</span><br><span class=\"line\">        position: absolute</span><br><span class=\"line\">        display: block</span><br><span class=\"line\">        left: 0</span><br><span class=\"line\">        bottom: 0</span><br><span class=\"line\">        width: 100%</span><br><span class=\"line\">        border-top: 1px solid $color</span><br><span class=\"line\">        content: &apos; &apos;</span><br></pre></td></tr></table></figure></p>\n<p>缩放：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@media (-webkit-min-device-pixel-ratio: 1.5),(min-device-pixel-ratio: 1.5)</span><br><span class=\"line\">    .border-1px</span><br><span class=\"line\">        &amp;::after</span><br><span class=\"line\">            // 根据Y轴来定义缩放</span><br><span class=\"line\">            -webkit-transform: scaleY(0.7)</span><br><span class=\"line\">            transform: scaleY(0.7)</span><br><span class=\"line\"></span><br><span class=\"line\">@media (-webkit-min-device-pixel-ratio: 2),(min-device-pixel-ratio: 2)</span><br><span class=\"line\">    .border-1px</span><br><span class=\"line\">        &amp;::after</span><br><span class=\"line\">            // 根据Y轴来定义缩放</span><br><span class=\"line\">            -webkit-transform: scaleY(0.5)</span><br><span class=\"line\">            transform: scaleY(0.5)</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"两个行内元素之间去掉空白间隙\"><a href=\"#两个行内元素之间去掉空白间隙\" class=\"headerlink\" title=\"两个行内元素之间去掉空白间隙\"></a>两个行内元素之间去掉空白间隙</h1><p>因为两个元素之间空字符导致的，父盒子font-size设置为0即可，获知两个元素之间不用回车换行。</p>\n<h1 id=\"清除浮动的理解\"><a href=\"#清除浮动的理解\" class=\"headerlink\" title=\"清除浮动的理解\"></a>清除浮动的理解</h1><p><a href=\"https://juejin.im/post/59e7190bf265da4307025d91\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/59e7190bf265da4307025d91</a></p>\n<h1 id=\"模糊半透明背景图的设置\"><a href=\"#模糊半透明背景图的设置\" class=\"headerlink\" title=\"模糊半透明背景图的设置\"></a>模糊半透明背景图的设置</h1><p>父盒子position为relative<br>背景图设置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">position: absolute;</span><br><span class=\"line\">top: 0;</span><br><span class=\"line\">left: 0;</span><br><span class=\"line\">width: 100%;</span><br><span class=\"line\">height: 100%;</span><br><span class=\"line\">z-index: -1;</span><br><span class=\"line\">filter: blur(10px); // 图片模糊设置</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"经典的CSS-sticky-footer布局\"><a href=\"#经典的CSS-sticky-footer布局\" class=\"headerlink\" title=\"经典的CSS sticky footer布局\"></a>经典的CSS sticky footer布局</h1><p>Sticky Footer，完美的绝对底部<a href=\"https://aotu.io/notes/2017/04/13/Sticky-footer/index.html\" target=\"_blank\" rel=\"noopener\">https://aotu.io/notes/2017/04/13/Sticky-footer/index.html</a><br>兼容性最好的实现：<br>将内容区用一个容器包起来，需要定位在底部的元素与容器平级，就像这样:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;wrapper clearfix&quot;&gt;</span><br><span class=\"line\">        &lt;div class=&quot;content&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;footer&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>样式如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.wrapper&#123;</span><br><span class=\"line\">    min-height: 100%; // 需要设置最小高度</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.clearfix&#123;</span><br><span class=\"line\">    display: inline-block;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 设置伪类来清除浮动</span><br><span class=\"line\">.clearfix: after&#123;</span><br><span class=\"line\">    display: block</span><br><span class=\"line\">    content: &apos;.&apos;</span><br><span class=\"line\">    height: 0</span><br><span class=\"line\">    line-height: 0</span><br><span class=\"line\">    clear: both</span><br><span class=\"line\">    visibility: hidden</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.wrapper .content&#123;</span><br><span class=\"line\">    padding-bottom: 64px; // 为footer留出位置</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.footer&#123;</span><br><span class=\"line\">    position: relative;</span><br><span class=\"line\">    margin: -64px auto 0 auto;</span><br><span class=\"line\">    clear: both; // 清除浮动</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"图片加载失败显示默认图片\"><a href=\"#图片加载失败显示默认图片\" class=\"headerlink\" title=\"图片加载失败显示默认图片\"></a>图片加载失败显示默认图片</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"css遮罩层的实现\"><a href=\"#css遮罩层的实现\" class=\"headerlink\" title=\"css遮罩层的实现\"></a>css遮罩层的实现</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.shadeBox &#123;</span><br><span class=\"line\">    position: fixed;</span><br><span class=\"line\">    top: 0;</span><br><span class=\"line\">    bottom: 0;</span><br><span class=\"line\">    left: 0;</span><br><span class=\"line\">    right: 0;</span><br><span class=\"line\">    background: #aaa;</span><br><span class=\"line\">    opacity: 0.7;</span><br><span class=\"line\">    display: none;</span><br><span class=\"line\">    z-index: 99;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>解释：</p>\n<ol>\n<li>要铺满整个页面    top: 0;bottom: 0;left: 0;right: 0;</li>\n<li>透明度和颜色设置</li>\n<li>图层在最上面z-index:99;</li>\n<li>随着页面滚动position:fixed</li>\n</ol>\n<h1 id=\"使一个div随另一个div的高度变化而变化\"><a href=\"#使一个div随另一个div的高度变化而变化\" class=\"headerlink\" title=\"使一个div随另一个div的高度变化而变化\"></a>使一个div随另一个div的高度变化而变化</h1><p>两个div的父元素设置：overflow:hidden;<br>需要变化的子元素设置：padding-bottom: 1000px;margin-bottom: -1000px;</p>\n<h1 id=\"CSS行内元素的特征\"><a href=\"#CSS行内元素的特征\" class=\"headerlink\" title=\"CSS行内元素的特征\"></a>CSS行内元素的特征</h1><p>诸如像span、a等这些行内元素，使用margin-top、margin-bottom、padding-top、padding-bottom、width、height等是无效的，只能设置left和right。如果想让这些属性生效，要添加display:inline-block。<br>display:inline-block:使元素成为行内块元素。</p>\n<h1 id=\"CSS属性pointer-events\"><a href=\"#CSS属性pointer-events\" class=\"headerlink\" title=\"CSS属性pointer-events\"></a>CSS属性pointer-events</h1><p>设置pointer-events:none; 时元素永远不会成为鼠标事件的target。但是，当其后代元素的pointer-events属性指定其他值时，鼠标事件可以指向后代元素，在这种情况下，鼠标事件将在捕获或冒泡阶触发父元素的事件侦听器。</p>\n<h1 id=\"CSS设置内容溢出显示省略号\"><a href=\"#CSS设置内容溢出显示省略号\" class=\"headerlink\" title=\"CSS设置内容溢出显示省略号\"></a>CSS设置内容溢出显示省略号</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* 行内容溢出显示省略号 */</span><br><span class=\"line\">overflow: hidden;</span><br><span class=\"line\">text-overflow: ellipsis;</span><br><span class=\"line\">white-space: nowrap;</span><br><span class=\"line\"></span><br><span class=\"line\">/* 多行显示省略号 */</span><br><span class=\"line\">display:-webkit-box; // 弹性盒子</span><br><span class=\"line\">-webkit-box-orient:vertical // 从上到下垂直排列子元素</span><br><span class=\"line\">-webkit-line-clamp:3 // 显示行数</span><br><span class=\"line\">overflow:hidden // 超出部分隐藏</span><br></pre></td></tr></table></figure>\n<h1 id=\"CSSflex布局\"><a href=\"#CSSflex布局\" class=\"headerlink\" title=\"CSSflex布局\"></a>CSSflex布局</h1><p><a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html</a></p>\n<h1 id=\"CSS伪类active的使用\"><a href=\"#CSS伪类active的使用\" class=\"headerlink\" title=\"CSS伪类active的使用\"></a>CSS伪类active的使用</h1><p>在WebAPP中为列表和需要点击的Dom对象添加active伪类，使其在点击时能产生高亮效果，接近原生APP体验。</p>\n<h1 id=\"适配手机dpi的1像素边框\"><a href=\"#适配手机dpi的1像素边框\" class=\"headerlink\" title=\"适配手机dpi的1像素边框\"></a>适配手机dpi的1像素边框</h1><p>基于伪类+缩放的实现(基于stylus的写法)<br>伪类：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">border-1px($color)</span><br><span class=\"line\">    position: relative</span><br><span class=\"line\">    &amp;:after</span><br><span class=\"line\">        position: absolute</span><br><span class=\"line\">        display: block</span><br><span class=\"line\">        left: 0</span><br><span class=\"line\">        bottom: 0</span><br><span class=\"line\">        width: 100%</span><br><span class=\"line\">        border-top: 1px solid $color</span><br><span class=\"line\">        content: &apos; &apos;</span><br></pre></td></tr></table></figure></p>\n<p>缩放：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@media (-webkit-min-device-pixel-ratio: 1.5),(min-device-pixel-ratio: 1.5)</span><br><span class=\"line\">    .border-1px</span><br><span class=\"line\">        &amp;::after</span><br><span class=\"line\">            // 根据Y轴来定义缩放</span><br><span class=\"line\">            -webkit-transform: scaleY(0.7)</span><br><span class=\"line\">            transform: scaleY(0.7)</span><br><span class=\"line\"></span><br><span class=\"line\">@media (-webkit-min-device-pixel-ratio: 2),(min-device-pixel-ratio: 2)</span><br><span class=\"line\">    .border-1px</span><br><span class=\"line\">        &amp;::after</span><br><span class=\"line\">            // 根据Y轴来定义缩放</span><br><span class=\"line\">            -webkit-transform: scaleY(0.5)</span><br><span class=\"line\">            transform: scaleY(0.5)</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"两个行内元素之间去掉空白间隙\"><a href=\"#两个行内元素之间去掉空白间隙\" class=\"headerlink\" title=\"两个行内元素之间去掉空白间隙\"></a>两个行内元素之间去掉空白间隙</h1><p>因为两个元素之间空字符导致的，父盒子font-size设置为0即可，获知两个元素之间不用回车换行。</p>\n<h1 id=\"清除浮动的理解\"><a href=\"#清除浮动的理解\" class=\"headerlink\" title=\"清除浮动的理解\"></a>清除浮动的理解</h1><p><a href=\"https://juejin.im/post/59e7190bf265da4307025d91\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/59e7190bf265da4307025d91</a></p>\n<h1 id=\"模糊半透明背景图的设置\"><a href=\"#模糊半透明背景图的设置\" class=\"headerlink\" title=\"模糊半透明背景图的设置\"></a>模糊半透明背景图的设置</h1><p>父盒子position为relative<br>背景图设置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">position: absolute;</span><br><span class=\"line\">top: 0;</span><br><span class=\"line\">left: 0;</span><br><span class=\"line\">width: 100%;</span><br><span class=\"line\">height: 100%;</span><br><span class=\"line\">z-index: -1;</span><br><span class=\"line\">filter: blur(10px); // 图片模糊设置</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"经典的CSS-sticky-footer布局\"><a href=\"#经典的CSS-sticky-footer布局\" class=\"headerlink\" title=\"经典的CSS sticky footer布局\"></a>经典的CSS sticky footer布局</h1><p>Sticky Footer，完美的绝对底部<a href=\"https://aotu.io/notes/2017/04/13/Sticky-footer/index.html\" target=\"_blank\" rel=\"noopener\">https://aotu.io/notes/2017/04/13/Sticky-footer/index.html</a><br>兼容性最好的实现：<br>将内容区用一个容器包起来，需要定位在底部的元素与容器平级，就像这样:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;wrapper clearfix&quot;&gt;</span><br><span class=\"line\">        &lt;div class=&quot;content&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;footer&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>样式如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.wrapper&#123;</span><br><span class=\"line\">    min-height: 100%; // 需要设置最小高度</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.clearfix&#123;</span><br><span class=\"line\">    display: inline-block;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 设置伪类来清除浮动</span><br><span class=\"line\">.clearfix: after&#123;</span><br><span class=\"line\">    display: block</span><br><span class=\"line\">    content: &apos;.&apos;</span><br><span class=\"line\">    height: 0</span><br><span class=\"line\">    line-height: 0</span><br><span class=\"line\">    clear: both</span><br><span class=\"line\">    visibility: hidden</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.wrapper .content&#123;</span><br><span class=\"line\">    padding-bottom: 64px; // 为footer留出位置</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.footer&#123;</span><br><span class=\"line\">    position: relative;</span><br><span class=\"line\">    margin: -64px auto 0 auto;</span><br><span class=\"line\">    clear: both; // 清除浮动</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"图片加载失败显示默认图片\"><a href=\"#图片加载失败显示默认图片\" class=\"headerlink\" title=\"图片加载失败显示默认图片\"></a>图片加载失败显示默认图片</h1>"},{"title":"前端实现图片懒加载的几种方式","date":"2017-08-23T12:44:10.000Z","description":"前端实现图片懒加载的几种方式","_content":"## 1、基于原生JS中的IntersectionObserver对象实现的图片懒加载\n基本思想：\n1. 把图片地址先存入到data-src这个自定义属性中，并且不设置img元素的src属性。\n2. 当监听到img元素出现在视口中了，将该img的data-src属性赋值给src属性，实现\n懒加载。\n实例如下所示：\n```\n<body>\n    <div>\n        <img alt=\"loading...\" data-src=\"rand0.jpg\">\n    </div>\n    <div>\n        <img alt=\"loading...\" data-src=\"rand1.jpg\">\n    </div>\n    <div>\n        <img alt=\"loading...\" data-src=\"rand2.jpg\">\n    </div>\n    <div>\n        <img alt=\"loading...\" data-src=\"rand3.jpg\">\n    </div>\n</body>\n<script>\n    // IntersectionObserver实例可以自动观察元素是否在视口内\n    var io = new IntersectionObserver(function(ioes) {\n        // 遍历观察对象数组(img对象)\n        ioes.forEach(function(ioe) {\n            // 获得被观察的目标元素，是一个 DOM 节点对象\n            var el = ioe.target;\n            // 获得目标元素的可见比例，完全可见时为1，完全不可见时小于等于0\n            var intersectionRatio = ioe.intersectionRatio;\n            if (intersectionRatio > 0 && intersectionRatio <= 1) {\n                loadImg(el);\n            }\n        });\n        el.onload = el.onerror = function(){\n            io.unobserve(el);\n        };\n    });\n\n    /**\n     * 检查图片是否在窗口内\n     * @author yijin\n     */\n    (function checkImgs() {\n        // 获得所有的img元素列表，返回对象是NodeList\n        var imgs = document.querySelectorAll(\"img\");\n        // 遍历img元素列表，监听每一个img元素\n        imgs.forEach(function(item) {\n            // 开始观察\n            io.observe(item);\n        });\n    }());\n\n    /**\n     * 加载图片\n     * @param el 传入的元素对象\n     * @author yijin\n     */\n    function loadImg(el) {\n        if (!el.src) {\n            var source = el.dataset.src;\n            el.src = source;\n        }\n    }\n</script>\n```","source":"_posts/前端实现图片懒加载的几种方式.md","raw":"---\ntitle: 前端实现图片懒加载的几种方式\ndate: 2017-08-23 20:44:10\ncategories: JS实战\ntags:\n     - 实战\n     - JavaScript\ndescription: 前端实现图片懒加载的几种方式\n---\n## 1、基于原生JS中的IntersectionObserver对象实现的图片懒加载\n基本思想：\n1. 把图片地址先存入到data-src这个自定义属性中，并且不设置img元素的src属性。\n2. 当监听到img元素出现在视口中了，将该img的data-src属性赋值给src属性，实现\n懒加载。\n实例如下所示：\n```\n<body>\n    <div>\n        <img alt=\"loading...\" data-src=\"rand0.jpg\">\n    </div>\n    <div>\n        <img alt=\"loading...\" data-src=\"rand1.jpg\">\n    </div>\n    <div>\n        <img alt=\"loading...\" data-src=\"rand2.jpg\">\n    </div>\n    <div>\n        <img alt=\"loading...\" data-src=\"rand3.jpg\">\n    </div>\n</body>\n<script>\n    // IntersectionObserver实例可以自动观察元素是否在视口内\n    var io = new IntersectionObserver(function(ioes) {\n        // 遍历观察对象数组(img对象)\n        ioes.forEach(function(ioe) {\n            // 获得被观察的目标元素，是一个 DOM 节点对象\n            var el = ioe.target;\n            // 获得目标元素的可见比例，完全可见时为1，完全不可见时小于等于0\n            var intersectionRatio = ioe.intersectionRatio;\n            if (intersectionRatio > 0 && intersectionRatio <= 1) {\n                loadImg(el);\n            }\n        });\n        el.onload = el.onerror = function(){\n            io.unobserve(el);\n        };\n    });\n\n    /**\n     * 检查图片是否在窗口内\n     * @author yijin\n     */\n    (function checkImgs() {\n        // 获得所有的img元素列表，返回对象是NodeList\n        var imgs = document.querySelectorAll(\"img\");\n        // 遍历img元素列表，监听每一个img元素\n        imgs.forEach(function(item) {\n            // 开始观察\n            io.observe(item);\n        });\n    }());\n\n    /**\n     * 加载图片\n     * @param el 传入的元素对象\n     * @author yijin\n     */\n    function loadImg(el) {\n        if (!el.src) {\n            var source = el.dataset.src;\n            el.src = source;\n        }\n    }\n</script>\n```","slug":"前端实现图片懒加载的几种方式","published":1,"updated":"2017-08-23T12:59:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjksf3cx50027h8efdq407bu0","content":"<h2 id=\"1、基于原生JS中的IntersectionObserver对象实现的图片懒加载\"><a href=\"#1、基于原生JS中的IntersectionObserver对象实现的图片懒加载\" class=\"headerlink\" title=\"1、基于原生JS中的IntersectionObserver对象实现的图片懒加载\"></a>1、基于原生JS中的IntersectionObserver对象实现的图片懒加载</h2><p>基本思想：</p>\n<ol>\n<li>把图片地址先存入到data-src这个自定义属性中，并且不设置img元素的src属性。</li>\n<li>当监听到img元素出现在视口中了，将该img的data-src属性赋值给src属性，实现<br>懒加载。<br>实例如下所示：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">        &lt;img alt=&quot;loading...&quot; data-src=&quot;rand0.jpg&quot;&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">        &lt;img alt=&quot;loading...&quot; data-src=&quot;rand1.jpg&quot;&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">        &lt;img alt=&quot;loading...&quot; data-src=&quot;rand2.jpg&quot;&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">        &lt;img alt=&quot;loading...&quot; data-src=&quot;rand3.jpg&quot;&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    // IntersectionObserver实例可以自动观察元素是否在视口内</span><br><span class=\"line\">    var io = new IntersectionObserver(function(ioes) &#123;</span><br><span class=\"line\">        // 遍历观察对象数组(img对象)</span><br><span class=\"line\">        ioes.forEach(function(ioe) &#123;</span><br><span class=\"line\">            // 获得被观察的目标元素，是一个 DOM 节点对象</span><br><span class=\"line\">            var el = ioe.target;</span><br><span class=\"line\">            // 获得目标元素的可见比例，完全可见时为1，完全不可见时小于等于0</span><br><span class=\"line\">            var intersectionRatio = ioe.intersectionRatio;</span><br><span class=\"line\">            if (intersectionRatio &gt; 0 &amp;&amp; intersectionRatio &lt;= 1) &#123;</span><br><span class=\"line\">                loadImg(el);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        el.onload = el.onerror = function()&#123;</span><br><span class=\"line\">            io.unobserve(el);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 检查图片是否在窗口内</span><br><span class=\"line\">     * @author yijin</span><br><span class=\"line\">     */</span><br><span class=\"line\">    (function checkImgs() &#123;</span><br><span class=\"line\">        // 获得所有的img元素列表，返回对象是NodeList</span><br><span class=\"line\">        var imgs = document.querySelectorAll(&quot;img&quot;);</span><br><span class=\"line\">        // 遍历img元素列表，监听每一个img元素</span><br><span class=\"line\">        imgs.forEach(function(item) &#123;</span><br><span class=\"line\">            // 开始观察</span><br><span class=\"line\">            io.observe(item);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;());</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 加载图片</span><br><span class=\"line\">     * @param el 传入的元素对象</span><br><span class=\"line\">     * @author yijin</span><br><span class=\"line\">     */</span><br><span class=\"line\">    function loadImg(el) &#123;</span><br><span class=\"line\">        if (!el.src) &#123;</span><br><span class=\"line\">            var source = el.dataset.src;</span><br><span class=\"line\">            el.src = source;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1、基于原生JS中的IntersectionObserver对象实现的图片懒加载\"><a href=\"#1、基于原生JS中的IntersectionObserver对象实现的图片懒加载\" class=\"headerlink\" title=\"1、基于原生JS中的IntersectionObserver对象实现的图片懒加载\"></a>1、基于原生JS中的IntersectionObserver对象实现的图片懒加载</h2><p>基本思想：</p>\n<ol>\n<li>把图片地址先存入到data-src这个自定义属性中，并且不设置img元素的src属性。</li>\n<li>当监听到img元素出现在视口中了，将该img的data-src属性赋值给src属性，实现<br>懒加载。<br>实例如下所示：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">        &lt;img alt=&quot;loading...&quot; data-src=&quot;rand0.jpg&quot;&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">        &lt;img alt=&quot;loading...&quot; data-src=&quot;rand1.jpg&quot;&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">        &lt;img alt=&quot;loading...&quot; data-src=&quot;rand2.jpg&quot;&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">        &lt;img alt=&quot;loading...&quot; data-src=&quot;rand3.jpg&quot;&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    // IntersectionObserver实例可以自动观察元素是否在视口内</span><br><span class=\"line\">    var io = new IntersectionObserver(function(ioes) &#123;</span><br><span class=\"line\">        // 遍历观察对象数组(img对象)</span><br><span class=\"line\">        ioes.forEach(function(ioe) &#123;</span><br><span class=\"line\">            // 获得被观察的目标元素，是一个 DOM 节点对象</span><br><span class=\"line\">            var el = ioe.target;</span><br><span class=\"line\">            // 获得目标元素的可见比例，完全可见时为1，完全不可见时小于等于0</span><br><span class=\"line\">            var intersectionRatio = ioe.intersectionRatio;</span><br><span class=\"line\">            if (intersectionRatio &gt; 0 &amp;&amp; intersectionRatio &lt;= 1) &#123;</span><br><span class=\"line\">                loadImg(el);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        el.onload = el.onerror = function()&#123;</span><br><span class=\"line\">            io.unobserve(el);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 检查图片是否在窗口内</span><br><span class=\"line\">     * @author yijin</span><br><span class=\"line\">     */</span><br><span class=\"line\">    (function checkImgs() &#123;</span><br><span class=\"line\">        // 获得所有的img元素列表，返回对象是NodeList</span><br><span class=\"line\">        var imgs = document.querySelectorAll(&quot;img&quot;);</span><br><span class=\"line\">        // 遍历img元素列表，监听每一个img元素</span><br><span class=\"line\">        imgs.forEach(function(item) &#123;</span><br><span class=\"line\">            // 开始观察</span><br><span class=\"line\">            io.observe(item);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;());</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 加载图片</span><br><span class=\"line\">     * @param el 传入的元素对象</span><br><span class=\"line\">     * @author yijin</span><br><span class=\"line\">     */</span><br><span class=\"line\">    function loadImg(el) &#123;</span><br><span class=\"line\">        if (!el.src) &#123;</span><br><span class=\"line\">            var source = el.dataset.src;</span><br><span class=\"line\">            el.src = source;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"如何将Cmder集成到Atom中","date":"2018-04-17T14:21:18.000Z","description":"Win10环境下在Atom中集成Cmder","_content":"# 如何将Cmder集成到Atom中\n\n1. 在Cmder根目录中创建文件atom.bat，将下列命令写入\n\n```\n@echo off \nSET CMDER_ROOT=C:\\Path\\To\\cmder #注释（去掉） Cmder安装根目录\n%CMDER_ROOT%\\vendor\\init.bat\n```\n2. 安装Atom插件 [platformio-ide-terminal](https://atom.io/packages/platformio-ide-terminal)\n\n3. 安装完毕后在插件的setting中的配置如下：\n\n    Auto Run Command:\n\n    **“C:\\Path\\To\\cmder\\atom.bat”** atom.bat的路径\n\n    Shell Override:\n\n    **C:\\Windows\\System32\\cmd.exe**\n\n","source":"_posts/如何将Cmder集成到Atom中.md","raw":"---\ntitle: 如何将Cmder集成到Atom中\ndate: 2018-04-17 22:21:18\ncategories: 团队规范构建\ntags:\n     - 插件\ndescription: Win10环境下在Atom中集成Cmder\n---\n# 如何将Cmder集成到Atom中\n\n1. 在Cmder根目录中创建文件atom.bat，将下列命令写入\n\n```\n@echo off \nSET CMDER_ROOT=C:\\Path\\To\\cmder #注释（去掉） Cmder安装根目录\n%CMDER_ROOT%\\vendor\\init.bat\n```\n2. 安装Atom插件 [platformio-ide-terminal](https://atom.io/packages/platformio-ide-terminal)\n\n3. 安装完毕后在插件的setting中的配置如下：\n\n    Auto Run Command:\n\n    **“C:\\Path\\To\\cmder\\atom.bat”** atom.bat的路径\n\n    Shell Override:\n\n    **C:\\Windows\\System32\\cmd.exe**\n\n","slug":"如何将Cmder集成到Atom中","published":1,"updated":"2018-04-17T14:29:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjksf3cx6002bh8ef4xlpz52n","content":"<h1 id=\"如何将Cmder集成到Atom中\"><a href=\"#如何将Cmder集成到Atom中\" class=\"headerlink\" title=\"如何将Cmder集成到Atom中\"></a>如何将Cmder集成到Atom中</h1><ol>\n<li>在Cmder根目录中创建文件atom.bat，将下列命令写入</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@echo off </span><br><span class=\"line\">SET CMDER_ROOT=C:\\Path\\To\\cmder #注释（去掉） Cmder安装根目录</span><br><span class=\"line\">%CMDER_ROOT%\\vendor\\init.bat</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li><p>安装Atom插件 <a href=\"https://atom.io/packages/platformio-ide-terminal\" target=\"_blank\" rel=\"noopener\">platformio-ide-terminal</a></p>\n</li>\n<li><p>安装完毕后在插件的setting中的配置如下：</p>\n<p> Auto Run Command:</p>\n<p> <strong>“C:\\Path\\To\\cmder\\atom.bat”</strong> atom.bat的路径</p>\n<p> Shell Override:</p>\n<p> <strong>C:\\Windows\\System32\\cmd.exe</strong></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"如何将Cmder集成到Atom中\"><a href=\"#如何将Cmder集成到Atom中\" class=\"headerlink\" title=\"如何将Cmder集成到Atom中\"></a>如何将Cmder集成到Atom中</h1><ol>\n<li>在Cmder根目录中创建文件atom.bat，将下列命令写入</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@echo off </span><br><span class=\"line\">SET CMDER_ROOT=C:\\Path\\To\\cmder #注释（去掉） Cmder安装根目录</span><br><span class=\"line\">%CMDER_ROOT%\\vendor\\init.bat</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li><p>安装Atom插件 <a href=\"https://atom.io/packages/platformio-ide-terminal\" target=\"_blank\" rel=\"noopener\">platformio-ide-terminal</a></p>\n</li>\n<li><p>安装完毕后在插件的setting中的配置如下：</p>\n<p> Auto Run Command:</p>\n<p> <strong>“C:\\Path\\To\\cmder\\atom.bat”</strong> atom.bat的路径</p>\n<p> Shell Override:</p>\n<p> <strong>C:\\Windows\\System32\\cmd.exe</strong></p>\n</li>\n</ol>\n"},{"title":"工作中填坑杂谈(1)","date":"2017-08-07T13:10:54.000Z","description":"记录工作中踩到的坑，无序。。。","_content":"## 通过$.ajax({}).responseText获得返回的URL来获取URL指向页面的HTML代码\n实际开发中我们有时候需要通过切换不同的页面来达到不同的效果，我们可以通过ajax异步访问一个controller，在这个controller中最后返回一个指向页面的URL地址，那么我们就可以用$.ajax({}).responseText来获取URL地址中页面的HTML代码来追加到当前页面。\n## 序列化input输入框或者是表单\njQuery的serialize()方法可以序列化表单值，来创建URL编码的文本字符串，序列化的值可在 AJAX 请求时用于 get方式传参。\n可以选择一个或多个表单元素（比如 input 及/或 文本框），或者 form 元素本身。\n使用方法：$(元素).serialize();\n\n>注：**serialize()会自动调用encodeURIComponent方法对数据进行编码** \n\n## 使用MyEclipse打开框架配置文件时卡死，有可能是因为文件默认打开方式不对\nXML配置文件的打开方式不要用MyEclipse自带的。\n## CSS行内元素的特征\n诸如像span、a等这些行内元素，使用margin-top、margin-bottom、padding-top、padding-bottom、width、height等是无效的，只能设置left和right。如果想让这些属性生效，要添加display:inline-block。\ndisplay:inline-block:使元素成为行内块元素。\n## jQuery的parents()的用法\n通过Element.parents()获取元素所有的祖先元素，并用find()找到自己想要的元素。\n## jQuery的remove()的用法\n使用Element.remove()把元素自身移除，同时也会移除元素内部的一切，包括绑定的事件以及与该元素相关的数据。\n## js中字符串转换为数字\nparseInt(string)\n## 在实现一个通讯录模块时需要将中文转换为拼音\n中文转拼音的使用找到了一个pinyin.js。\n## js对象根据字段排序\n示例：\n```\njson.sort(function(a,b){\n    if(a.value < b.value){\n        return -1;\n    }else if(a.value > b.value){\n        return 1;\n    }else{\n        return 0;\n    }\n});\n```\n## CSS属性pointer-events\n设置pointer-events:none; 时元素永远不会成为鼠标事件的target。但是，当其后代元素的pointer-events属性指定其他值时，鼠标事件可以指向后代元素，在这种情况下，鼠标事件将在捕获或冒泡阶触发父元素的事件侦听器。\n## MyEclipse项目部署时不能自动部署jar时的处理方法\n在项目根目录点击右键之后选择build path，找到deployment assembly(部署程序集)，进行手动添加jar包。\n## CSS设置内容溢出显示省略号\n```\n/* 行内容溢出显示省略号 */\noverflow: hidden;\ntext-overflow: ellipsis;\nwhite-space: nowrap;\n\n/* 多行显示省略号 */\ndisplay:-webkit-box; // 弹性盒子\n-webkit-box-orient:vertical // 从上到下垂直排列子元素\n-webkit-line-clamp:3 // 显示行数\noverflow:hidden // 超出部分隐藏\n```\n## CSSflex布局\nhttp://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\n## CSS伪类active的使用\n在WebAPP中为列表和需要点击的Dom对象添加active伪类，使其在点击时能产生高亮效果，接近原生APP体验。\n## 移动端APP实现双击手机返回键退出\n以APPCan平台为例：\n\n```\n// 初始化需要用的变量\nvar currentTime, firstTime, secondTime, clickCount = 0;\n// 如果按了手机上的返回键，就退出程序\nuexWindow.onKeyPressed = function(k) {\n    if (k == 0) {\n        // 点击次数加1\n        clickCount++;\n        appcan.window.openToast(\"再按一次可退出程序\", 1000, '8', '0');\n        // 获得时间\n        currentTime = new Date();\n        // 点击了一次\n        if (clickCount == 1) {\n            firstTime = currentTime.getTime();\n        } else if (clickCount == 2) { // 第二次点击\n            secondTime = currentTime.getTime();\n            // 两秒之内连续按才能退出应用程序\n            if (secondTime - firstTime < 2000) {\n                uexWidgetOne.exit(1);\n            } else {\n                clickCount = 0;\n            }\n        } else {\n            clickCount = 0; // 点击次数大于2时置为0\n        }\n    }\n};\n// 监听物理返回键并拦截返回键(0)\nuexWindow.setReportKey(0, 1);\n```","source":"_posts/工作填坑杂谈(1).md","raw":"---\ntitle: 工作中填坑杂谈(1)\ndate: 2017-08-07 21:10:54\ncategories: 遇到的坑\ntags:\n     - 填坑经验\ndescription: 记录工作中踩到的坑，无序。。。\n---\n## 通过$.ajax({}).responseText获得返回的URL来获取URL指向页面的HTML代码\n实际开发中我们有时候需要通过切换不同的页面来达到不同的效果，我们可以通过ajax异步访问一个controller，在这个controller中最后返回一个指向页面的URL地址，那么我们就可以用$.ajax({}).responseText来获取URL地址中页面的HTML代码来追加到当前页面。\n## 序列化input输入框或者是表单\njQuery的serialize()方法可以序列化表单值，来创建URL编码的文本字符串，序列化的值可在 AJAX 请求时用于 get方式传参。\n可以选择一个或多个表单元素（比如 input 及/或 文本框），或者 form 元素本身。\n使用方法：$(元素).serialize();\n\n>注：**serialize()会自动调用encodeURIComponent方法对数据进行编码** \n\n## 使用MyEclipse打开框架配置文件时卡死，有可能是因为文件默认打开方式不对\nXML配置文件的打开方式不要用MyEclipse自带的。\n## CSS行内元素的特征\n诸如像span、a等这些行内元素，使用margin-top、margin-bottom、padding-top、padding-bottom、width、height等是无效的，只能设置left和right。如果想让这些属性生效，要添加display:inline-block。\ndisplay:inline-block:使元素成为行内块元素。\n## jQuery的parents()的用法\n通过Element.parents()获取元素所有的祖先元素，并用find()找到自己想要的元素。\n## jQuery的remove()的用法\n使用Element.remove()把元素自身移除，同时也会移除元素内部的一切，包括绑定的事件以及与该元素相关的数据。\n## js中字符串转换为数字\nparseInt(string)\n## 在实现一个通讯录模块时需要将中文转换为拼音\n中文转拼音的使用找到了一个pinyin.js。\n## js对象根据字段排序\n示例：\n```\njson.sort(function(a,b){\n    if(a.value < b.value){\n        return -1;\n    }else if(a.value > b.value){\n        return 1;\n    }else{\n        return 0;\n    }\n});\n```\n## CSS属性pointer-events\n设置pointer-events:none; 时元素永远不会成为鼠标事件的target。但是，当其后代元素的pointer-events属性指定其他值时，鼠标事件可以指向后代元素，在这种情况下，鼠标事件将在捕获或冒泡阶触发父元素的事件侦听器。\n## MyEclipse项目部署时不能自动部署jar时的处理方法\n在项目根目录点击右键之后选择build path，找到deployment assembly(部署程序集)，进行手动添加jar包。\n## CSS设置内容溢出显示省略号\n```\n/* 行内容溢出显示省略号 */\noverflow: hidden;\ntext-overflow: ellipsis;\nwhite-space: nowrap;\n\n/* 多行显示省略号 */\ndisplay:-webkit-box; // 弹性盒子\n-webkit-box-orient:vertical // 从上到下垂直排列子元素\n-webkit-line-clamp:3 // 显示行数\noverflow:hidden // 超出部分隐藏\n```\n## CSSflex布局\nhttp://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\n## CSS伪类active的使用\n在WebAPP中为列表和需要点击的Dom对象添加active伪类，使其在点击时能产生高亮效果，接近原生APP体验。\n## 移动端APP实现双击手机返回键退出\n以APPCan平台为例：\n\n```\n// 初始化需要用的变量\nvar currentTime, firstTime, secondTime, clickCount = 0;\n// 如果按了手机上的返回键，就退出程序\nuexWindow.onKeyPressed = function(k) {\n    if (k == 0) {\n        // 点击次数加1\n        clickCount++;\n        appcan.window.openToast(\"再按一次可退出程序\", 1000, '8', '0');\n        // 获得时间\n        currentTime = new Date();\n        // 点击了一次\n        if (clickCount == 1) {\n            firstTime = currentTime.getTime();\n        } else if (clickCount == 2) { // 第二次点击\n            secondTime = currentTime.getTime();\n            // 两秒之内连续按才能退出应用程序\n            if (secondTime - firstTime < 2000) {\n                uexWidgetOne.exit(1);\n            } else {\n                clickCount = 0;\n            }\n        } else {\n            clickCount = 0; // 点击次数大于2时置为0\n        }\n    }\n};\n// 监听物理返回键并拦截返回键(0)\nuexWindow.setReportKey(0, 1);\n```","slug":"工作填坑杂谈(1)","published":1,"updated":"2017-08-28T15:06:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjksf3cx7002eh8efjob3v0og","content":"<h2 id=\"通过-ajax-responseText获得返回的URL来获取URL指向页面的HTML代码\"><a href=\"#通过-ajax-responseText获得返回的URL来获取URL指向页面的HTML代码\" class=\"headerlink\" title=\"通过$.ajax({}).responseText获得返回的URL来获取URL指向页面的HTML代码\"></a>通过$.ajax({}).responseText获得返回的URL来获取URL指向页面的HTML代码</h2><p>实际开发中我们有时候需要通过切换不同的页面来达到不同的效果，我们可以通过ajax异步访问一个controller，在这个controller中最后返回一个指向页面的URL地址，那么我们就可以用$.ajax({}).responseText来获取URL地址中页面的HTML代码来追加到当前页面。</p>\n<h2 id=\"序列化input输入框或者是表单\"><a href=\"#序列化input输入框或者是表单\" class=\"headerlink\" title=\"序列化input输入框或者是表单\"></a>序列化input输入框或者是表单</h2><p>jQuery的serialize()方法可以序列化表单值，来创建URL编码的文本字符串，序列化的值可在 AJAX 请求时用于 get方式传参。<br>可以选择一个或多个表单元素（比如 input 及/或 文本框），或者 form 元素本身。<br>使用方法：$(元素).serialize();</p>\n<blockquote>\n<p>注：<strong>serialize()会自动调用encodeURIComponent方法对数据进行编码</strong> </p>\n</blockquote>\n<h2 id=\"使用MyEclipse打开框架配置文件时卡死，有可能是因为文件默认打开方式不对\"><a href=\"#使用MyEclipse打开框架配置文件时卡死，有可能是因为文件默认打开方式不对\" class=\"headerlink\" title=\"使用MyEclipse打开框架配置文件时卡死，有可能是因为文件默认打开方式不对\"></a>使用MyEclipse打开框架配置文件时卡死，有可能是因为文件默认打开方式不对</h2><p>XML配置文件的打开方式不要用MyEclipse自带的。</p>\n<h2 id=\"CSS行内元素的特征\"><a href=\"#CSS行内元素的特征\" class=\"headerlink\" title=\"CSS行内元素的特征\"></a>CSS行内元素的特征</h2><p>诸如像span、a等这些行内元素，使用margin-top、margin-bottom、padding-top、padding-bottom、width、height等是无效的，只能设置left和right。如果想让这些属性生效，要添加display:inline-block。<br>display:inline-block:使元素成为行内块元素。</p>\n<h2 id=\"jQuery的parents-的用法\"><a href=\"#jQuery的parents-的用法\" class=\"headerlink\" title=\"jQuery的parents()的用法\"></a>jQuery的parents()的用法</h2><p>通过Element.parents()获取元素所有的祖先元素，并用find()找到自己想要的元素。</p>\n<h2 id=\"jQuery的remove-的用法\"><a href=\"#jQuery的remove-的用法\" class=\"headerlink\" title=\"jQuery的remove()的用法\"></a>jQuery的remove()的用法</h2><p>使用Element.remove()把元素自身移除，同时也会移除元素内部的一切，包括绑定的事件以及与该元素相关的数据。</p>\n<h2 id=\"js中字符串转换为数字\"><a href=\"#js中字符串转换为数字\" class=\"headerlink\" title=\"js中字符串转换为数字\"></a>js中字符串转换为数字</h2><p>parseInt(string)</p>\n<h2 id=\"在实现一个通讯录模块时需要将中文转换为拼音\"><a href=\"#在实现一个通讯录模块时需要将中文转换为拼音\" class=\"headerlink\" title=\"在实现一个通讯录模块时需要将中文转换为拼音\"></a>在实现一个通讯录模块时需要将中文转换为拼音</h2><p>中文转拼音的使用找到了一个pinyin.js。</p>\n<h2 id=\"js对象根据字段排序\"><a href=\"#js对象根据字段排序\" class=\"headerlink\" title=\"js对象根据字段排序\"></a>js对象根据字段排序</h2><p>示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">json.sort(function(a,b)&#123;</span><br><span class=\"line\">    if(a.value &lt; b.value)&#123;</span><br><span class=\"line\">        return -1;</span><br><span class=\"line\">    &#125;else if(a.value &gt; b.value)&#123;</span><br><span class=\"line\">        return 1;</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        return 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"CSS属性pointer-events\"><a href=\"#CSS属性pointer-events\" class=\"headerlink\" title=\"CSS属性pointer-events\"></a>CSS属性pointer-events</h2><p>设置pointer-events:none; 时元素永远不会成为鼠标事件的target。但是，当其后代元素的pointer-events属性指定其他值时，鼠标事件可以指向后代元素，在这种情况下，鼠标事件将在捕获或冒泡阶触发父元素的事件侦听器。</p>\n<h2 id=\"MyEclipse项目部署时不能自动部署jar时的处理方法\"><a href=\"#MyEclipse项目部署时不能自动部署jar时的处理方法\" class=\"headerlink\" title=\"MyEclipse项目部署时不能自动部署jar时的处理方法\"></a>MyEclipse项目部署时不能自动部署jar时的处理方法</h2><p>在项目根目录点击右键之后选择build path，找到deployment assembly(部署程序集)，进行手动添加jar包。</p>\n<h2 id=\"CSS设置内容溢出显示省略号\"><a href=\"#CSS设置内容溢出显示省略号\" class=\"headerlink\" title=\"CSS设置内容溢出显示省略号\"></a>CSS设置内容溢出显示省略号</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* 行内容溢出显示省略号 */</span><br><span class=\"line\">overflow: hidden;</span><br><span class=\"line\">text-overflow: ellipsis;</span><br><span class=\"line\">white-space: nowrap;</span><br><span class=\"line\"></span><br><span class=\"line\">/* 多行显示省略号 */</span><br><span class=\"line\">display:-webkit-box; // 弹性盒子</span><br><span class=\"line\">-webkit-box-orient:vertical // 从上到下垂直排列子元素</span><br><span class=\"line\">-webkit-line-clamp:3 // 显示行数</span><br><span class=\"line\">overflow:hidden // 超出部分隐藏</span><br></pre></td></tr></table></figure>\n<h2 id=\"CSSflex布局\"><a href=\"#CSSflex布局\" class=\"headerlink\" title=\"CSSflex布局\"></a>CSSflex布局</h2><p><a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html</a></p>\n<h2 id=\"CSS伪类active的使用\"><a href=\"#CSS伪类active的使用\" class=\"headerlink\" title=\"CSS伪类active的使用\"></a>CSS伪类active的使用</h2><p>在WebAPP中为列表和需要点击的Dom对象添加active伪类，使其在点击时能产生高亮效果，接近原生APP体验。</p>\n<h2 id=\"移动端APP实现双击手机返回键退出\"><a href=\"#移动端APP实现双击手机返回键退出\" class=\"headerlink\" title=\"移动端APP实现双击手机返回键退出\"></a>移动端APP实现双击手机返回键退出</h2><p>以APPCan平台为例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 初始化需要用的变量</span><br><span class=\"line\">var currentTime, firstTime, secondTime, clickCount = 0;</span><br><span class=\"line\">// 如果按了手机上的返回键，就退出程序</span><br><span class=\"line\">uexWindow.onKeyPressed = function(k) &#123;</span><br><span class=\"line\">    if (k == 0) &#123;</span><br><span class=\"line\">        // 点击次数加1</span><br><span class=\"line\">        clickCount++;</span><br><span class=\"line\">        appcan.window.openToast(&quot;再按一次可退出程序&quot;, 1000, &apos;8&apos;, &apos;0&apos;);</span><br><span class=\"line\">        // 获得时间</span><br><span class=\"line\">        currentTime = new Date();</span><br><span class=\"line\">        // 点击了一次</span><br><span class=\"line\">        if (clickCount == 1) &#123;</span><br><span class=\"line\">            firstTime = currentTime.getTime();</span><br><span class=\"line\">        &#125; else if (clickCount == 2) &#123; // 第二次点击</span><br><span class=\"line\">            secondTime = currentTime.getTime();</span><br><span class=\"line\">            // 两秒之内连续按才能退出应用程序</span><br><span class=\"line\">            if (secondTime - firstTime &lt; 2000) &#123;</span><br><span class=\"line\">                uexWidgetOne.exit(1);</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                clickCount = 0;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            clickCount = 0; // 点击次数大于2时置为0</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">// 监听物理返回键并拦截返回键(0)</span><br><span class=\"line\">uexWindow.setReportKey(0, 1);</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"通过-ajax-responseText获得返回的URL来获取URL指向页面的HTML代码\"><a href=\"#通过-ajax-responseText获得返回的URL来获取URL指向页面的HTML代码\" class=\"headerlink\" title=\"通过$.ajax({}).responseText获得返回的URL来获取URL指向页面的HTML代码\"></a>通过$.ajax({}).responseText获得返回的URL来获取URL指向页面的HTML代码</h2><p>实际开发中我们有时候需要通过切换不同的页面来达到不同的效果，我们可以通过ajax异步访问一个controller，在这个controller中最后返回一个指向页面的URL地址，那么我们就可以用$.ajax({}).responseText来获取URL地址中页面的HTML代码来追加到当前页面。</p>\n<h2 id=\"序列化input输入框或者是表单\"><a href=\"#序列化input输入框或者是表单\" class=\"headerlink\" title=\"序列化input输入框或者是表单\"></a>序列化input输入框或者是表单</h2><p>jQuery的serialize()方法可以序列化表单值，来创建URL编码的文本字符串，序列化的值可在 AJAX 请求时用于 get方式传参。<br>可以选择一个或多个表单元素（比如 input 及/或 文本框），或者 form 元素本身。<br>使用方法：$(元素).serialize();</p>\n<blockquote>\n<p>注：<strong>serialize()会自动调用encodeURIComponent方法对数据进行编码</strong> </p>\n</blockquote>\n<h2 id=\"使用MyEclipse打开框架配置文件时卡死，有可能是因为文件默认打开方式不对\"><a href=\"#使用MyEclipse打开框架配置文件时卡死，有可能是因为文件默认打开方式不对\" class=\"headerlink\" title=\"使用MyEclipse打开框架配置文件时卡死，有可能是因为文件默认打开方式不对\"></a>使用MyEclipse打开框架配置文件时卡死，有可能是因为文件默认打开方式不对</h2><p>XML配置文件的打开方式不要用MyEclipse自带的。</p>\n<h2 id=\"CSS行内元素的特征\"><a href=\"#CSS行内元素的特征\" class=\"headerlink\" title=\"CSS行内元素的特征\"></a>CSS行内元素的特征</h2><p>诸如像span、a等这些行内元素，使用margin-top、margin-bottom、padding-top、padding-bottom、width、height等是无效的，只能设置left和right。如果想让这些属性生效，要添加display:inline-block。<br>display:inline-block:使元素成为行内块元素。</p>\n<h2 id=\"jQuery的parents-的用法\"><a href=\"#jQuery的parents-的用法\" class=\"headerlink\" title=\"jQuery的parents()的用法\"></a>jQuery的parents()的用法</h2><p>通过Element.parents()获取元素所有的祖先元素，并用find()找到自己想要的元素。</p>\n<h2 id=\"jQuery的remove-的用法\"><a href=\"#jQuery的remove-的用法\" class=\"headerlink\" title=\"jQuery的remove()的用法\"></a>jQuery的remove()的用法</h2><p>使用Element.remove()把元素自身移除，同时也会移除元素内部的一切，包括绑定的事件以及与该元素相关的数据。</p>\n<h2 id=\"js中字符串转换为数字\"><a href=\"#js中字符串转换为数字\" class=\"headerlink\" title=\"js中字符串转换为数字\"></a>js中字符串转换为数字</h2><p>parseInt(string)</p>\n<h2 id=\"在实现一个通讯录模块时需要将中文转换为拼音\"><a href=\"#在实现一个通讯录模块时需要将中文转换为拼音\" class=\"headerlink\" title=\"在实现一个通讯录模块时需要将中文转换为拼音\"></a>在实现一个通讯录模块时需要将中文转换为拼音</h2><p>中文转拼音的使用找到了一个pinyin.js。</p>\n<h2 id=\"js对象根据字段排序\"><a href=\"#js对象根据字段排序\" class=\"headerlink\" title=\"js对象根据字段排序\"></a>js对象根据字段排序</h2><p>示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">json.sort(function(a,b)&#123;</span><br><span class=\"line\">    if(a.value &lt; b.value)&#123;</span><br><span class=\"line\">        return -1;</span><br><span class=\"line\">    &#125;else if(a.value &gt; b.value)&#123;</span><br><span class=\"line\">        return 1;</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        return 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"CSS属性pointer-events\"><a href=\"#CSS属性pointer-events\" class=\"headerlink\" title=\"CSS属性pointer-events\"></a>CSS属性pointer-events</h2><p>设置pointer-events:none; 时元素永远不会成为鼠标事件的target。但是，当其后代元素的pointer-events属性指定其他值时，鼠标事件可以指向后代元素，在这种情况下，鼠标事件将在捕获或冒泡阶触发父元素的事件侦听器。</p>\n<h2 id=\"MyEclipse项目部署时不能自动部署jar时的处理方法\"><a href=\"#MyEclipse项目部署时不能自动部署jar时的处理方法\" class=\"headerlink\" title=\"MyEclipse项目部署时不能自动部署jar时的处理方法\"></a>MyEclipse项目部署时不能自动部署jar时的处理方法</h2><p>在项目根目录点击右键之后选择build path，找到deployment assembly(部署程序集)，进行手动添加jar包。</p>\n<h2 id=\"CSS设置内容溢出显示省略号\"><a href=\"#CSS设置内容溢出显示省略号\" class=\"headerlink\" title=\"CSS设置内容溢出显示省略号\"></a>CSS设置内容溢出显示省略号</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* 行内容溢出显示省略号 */</span><br><span class=\"line\">overflow: hidden;</span><br><span class=\"line\">text-overflow: ellipsis;</span><br><span class=\"line\">white-space: nowrap;</span><br><span class=\"line\"></span><br><span class=\"line\">/* 多行显示省略号 */</span><br><span class=\"line\">display:-webkit-box; // 弹性盒子</span><br><span class=\"line\">-webkit-box-orient:vertical // 从上到下垂直排列子元素</span><br><span class=\"line\">-webkit-line-clamp:3 // 显示行数</span><br><span class=\"line\">overflow:hidden // 超出部分隐藏</span><br></pre></td></tr></table></figure>\n<h2 id=\"CSSflex布局\"><a href=\"#CSSflex布局\" class=\"headerlink\" title=\"CSSflex布局\"></a>CSSflex布局</h2><p><a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html</a></p>\n<h2 id=\"CSS伪类active的使用\"><a href=\"#CSS伪类active的使用\" class=\"headerlink\" title=\"CSS伪类active的使用\"></a>CSS伪类active的使用</h2><p>在WebAPP中为列表和需要点击的Dom对象添加active伪类，使其在点击时能产生高亮效果，接近原生APP体验。</p>\n<h2 id=\"移动端APP实现双击手机返回键退出\"><a href=\"#移动端APP实现双击手机返回键退出\" class=\"headerlink\" title=\"移动端APP实现双击手机返回键退出\"></a>移动端APP实现双击手机返回键退出</h2><p>以APPCan平台为例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 初始化需要用的变量</span><br><span class=\"line\">var currentTime, firstTime, secondTime, clickCount = 0;</span><br><span class=\"line\">// 如果按了手机上的返回键，就退出程序</span><br><span class=\"line\">uexWindow.onKeyPressed = function(k) &#123;</span><br><span class=\"line\">    if (k == 0) &#123;</span><br><span class=\"line\">        // 点击次数加1</span><br><span class=\"line\">        clickCount++;</span><br><span class=\"line\">        appcan.window.openToast(&quot;再按一次可退出程序&quot;, 1000, &apos;8&apos;, &apos;0&apos;);</span><br><span class=\"line\">        // 获得时间</span><br><span class=\"line\">        currentTime = new Date();</span><br><span class=\"line\">        // 点击了一次</span><br><span class=\"line\">        if (clickCount == 1) &#123;</span><br><span class=\"line\">            firstTime = currentTime.getTime();</span><br><span class=\"line\">        &#125; else if (clickCount == 2) &#123; // 第二次点击</span><br><span class=\"line\">            secondTime = currentTime.getTime();</span><br><span class=\"line\">            // 两秒之内连续按才能退出应用程序</span><br><span class=\"line\">            if (secondTime - firstTime &lt; 2000) &#123;</span><br><span class=\"line\">                uexWidgetOne.exit(1);</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                clickCount = 0;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            clickCount = 0; // 点击次数大于2时置为0</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">// 监听物理返回键并拦截返回键(0)</span><br><span class=\"line\">uexWindow.setReportKey(0, 1);</span><br></pre></td></tr></table></figure>"},{"title":"工作填坑杂谈(3)","date":"2017-11-06T15:18:23.000Z","description":"记录工作中踩到的坑，无序。。。","_content":"# 图片加载失败，显示默认图片\nimg标签自带onError属性，当图片加载失败时，触发error事件：\n```\n<img src=\"image.png\" onError='this.src=\"http://ww4.sinaimg.cn/large/006y8mN6gw1fa5obmqrmvj305k05k3yh.jpg\"' />\n```\njQuery的error事件：\n```\n$('img').error(function(){\n    $(this).attr('src',\"http://ww4.sinaimg.cn/large/006y8mN6gw1fa5obmqrmvj305k05k3yh.jpg\");\n});\n```\n\n# svn提交时报错: Item is out of date\n错误重现：本地提交后，修改后，执行第二次提交，本地状态是没有变的，所以就会出现Item is out of date，需要更新下版本，再执行修改，然后提交。\n错误原因：遇到这个错误原因是本地的资源文件版本不是服务器上面最新的版本，因此修改本地文件再提交时候，就会报Out of date错误。\n解决办法：修改文件时候一定要首先保证和服务器一致，再做修改；而此时 需要先将本地文件还原（记着备份哦），再更新和服务器一致后再做修改。\n\n# vue transition 动画 第一次不触发\nVue执行transition动画之前，Dom结构一定要事先渲染出来，所以使用v-if控制是不执行的。\n\n# v-bind指令关联html属性报异常\nVue实例中如果data中声明的属性默认值为null，使用:src、:class等v-bind指令时，会抛出异常，所以对象应该先声明为空对象。\n\n","source":"_posts/工作填坑杂谈(3).md","raw":"---\ntitle: 工作填坑杂谈(3)\ndate: 2017-11-06 23:18:23\ncategories: 遇到的坑\ntags:\n     - 填坑经验\ndescription: 记录工作中踩到的坑，无序。。。\n---\n# 图片加载失败，显示默认图片\nimg标签自带onError属性，当图片加载失败时，触发error事件：\n```\n<img src=\"image.png\" onError='this.src=\"http://ww4.sinaimg.cn/large/006y8mN6gw1fa5obmqrmvj305k05k3yh.jpg\"' />\n```\njQuery的error事件：\n```\n$('img').error(function(){\n    $(this).attr('src',\"http://ww4.sinaimg.cn/large/006y8mN6gw1fa5obmqrmvj305k05k3yh.jpg\");\n});\n```\n\n# svn提交时报错: Item is out of date\n错误重现：本地提交后，修改后，执行第二次提交，本地状态是没有变的，所以就会出现Item is out of date，需要更新下版本，再执行修改，然后提交。\n错误原因：遇到这个错误原因是本地的资源文件版本不是服务器上面最新的版本，因此修改本地文件再提交时候，就会报Out of date错误。\n解决办法：修改文件时候一定要首先保证和服务器一致，再做修改；而此时 需要先将本地文件还原（记着备份哦），再更新和服务器一致后再做修改。\n\n# vue transition 动画 第一次不触发\nVue执行transition动画之前，Dom结构一定要事先渲染出来，所以使用v-if控制是不执行的。\n\n# v-bind指令关联html属性报异常\nVue实例中如果data中声明的属性默认值为null，使用:src、:class等v-bind指令时，会抛出异常，所以对象应该先声明为空对象。\n\n","slug":"工作填坑杂谈(3)","published":1,"updated":"2018-02-22T13:42:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjksf3cx8002ih8efl22vbc8w","content":"<h1 id=\"图片加载失败，显示默认图片\"><a href=\"#图片加载失败，显示默认图片\" class=\"headerlink\" title=\"图片加载失败，显示默认图片\"></a>图片加载失败，显示默认图片</h1><p>img标签自带onError属性，当图片加载失败时，触发error事件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;img src=&quot;image.png&quot; onError=&apos;this.src=&quot;http://ww4.sinaimg.cn/large/006y8mN6gw1fa5obmqrmvj305k05k3yh.jpg&quot;&apos; /&gt;</span><br></pre></td></tr></table></figure></p>\n<p>jQuery的error事件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&apos;img&apos;).error(function()&#123;</span><br><span class=\"line\">    $(this).attr(&apos;src&apos;,&quot;http://ww4.sinaimg.cn/large/006y8mN6gw1fa5obmqrmvj305k05k3yh.jpg&quot;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"svn提交时报错-Item-is-out-of-date\"><a href=\"#svn提交时报错-Item-is-out-of-date\" class=\"headerlink\" title=\"svn提交时报错: Item is out of date\"></a>svn提交时报错: Item is out of date</h1><p>错误重现：本地提交后，修改后，执行第二次提交，本地状态是没有变的，所以就会出现Item is out of date，需要更新下版本，再执行修改，然后提交。<br>错误原因：遇到这个错误原因是本地的资源文件版本不是服务器上面最新的版本，因此修改本地文件再提交时候，就会报Out of date错误。<br>解决办法：修改文件时候一定要首先保证和服务器一致，再做修改；而此时 需要先将本地文件还原（记着备份哦），再更新和服务器一致后再做修改。</p>\n<h1 id=\"vue-transition-动画-第一次不触发\"><a href=\"#vue-transition-动画-第一次不触发\" class=\"headerlink\" title=\"vue transition 动画 第一次不触发\"></a>vue transition 动画 第一次不触发</h1><p>Vue执行transition动画之前，Dom结构一定要事先渲染出来，所以使用v-if控制是不执行的。</p>\n<h1 id=\"v-bind指令关联html属性报异常\"><a href=\"#v-bind指令关联html属性报异常\" class=\"headerlink\" title=\"v-bind指令关联html属性报异常\"></a>v-bind指令关联html属性报异常</h1><p>Vue实例中如果data中声明的属性默认值为null，使用:src、:class等v-bind指令时，会抛出异常，所以对象应该先声明为空对象。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"图片加载失败，显示默认图片\"><a href=\"#图片加载失败，显示默认图片\" class=\"headerlink\" title=\"图片加载失败，显示默认图片\"></a>图片加载失败，显示默认图片</h1><p>img标签自带onError属性，当图片加载失败时，触发error事件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;img src=&quot;image.png&quot; onError=&apos;this.src=&quot;http://ww4.sinaimg.cn/large/006y8mN6gw1fa5obmqrmvj305k05k3yh.jpg&quot;&apos; /&gt;</span><br></pre></td></tr></table></figure></p>\n<p>jQuery的error事件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&apos;img&apos;).error(function()&#123;</span><br><span class=\"line\">    $(this).attr(&apos;src&apos;,&quot;http://ww4.sinaimg.cn/large/006y8mN6gw1fa5obmqrmvj305k05k3yh.jpg&quot;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"svn提交时报错-Item-is-out-of-date\"><a href=\"#svn提交时报错-Item-is-out-of-date\" class=\"headerlink\" title=\"svn提交时报错: Item is out of date\"></a>svn提交时报错: Item is out of date</h1><p>错误重现：本地提交后，修改后，执行第二次提交，本地状态是没有变的，所以就会出现Item is out of date，需要更新下版本，再执行修改，然后提交。<br>错误原因：遇到这个错误原因是本地的资源文件版本不是服务器上面最新的版本，因此修改本地文件再提交时候，就会报Out of date错误。<br>解决办法：修改文件时候一定要首先保证和服务器一致，再做修改；而此时 需要先将本地文件还原（记着备份哦），再更新和服务器一致后再做修改。</p>\n<h1 id=\"vue-transition-动画-第一次不触发\"><a href=\"#vue-transition-动画-第一次不触发\" class=\"headerlink\" title=\"vue transition 动画 第一次不触发\"></a>vue transition 动画 第一次不触发</h1><p>Vue执行transition动画之前，Dom结构一定要事先渲染出来，所以使用v-if控制是不执行的。</p>\n<h1 id=\"v-bind指令关联html属性报异常\"><a href=\"#v-bind指令关联html属性报异常\" class=\"headerlink\" title=\"v-bind指令关联html属性报异常\"></a>v-bind指令关联html属性报异常</h1><p>Vue实例中如果data中声明的属性默认值为null，使用:src、:class等v-bind指令时，会抛出异常，所以对象应该先声明为空对象。</p>\n"},{"title":"工作中填坑杂谈(2)","date":"2017-08-28T15:10:54.000Z","description":"记录工作中踩到的坑，无序。。。","_content":"## Java抛出ConcurrentModificationException异常的原因\nJava中的Map如果在遍历过程中要删除元素，除非通过迭代器自己的remove()方法，否则就会导致抛出ConcurrentModificationException异常。\n这么做的原因是为了保证迭代器能够尽快感知到Map的“结构性修改“，从而避免不同视图下不一致现象。\n## 实现一个按首字母分组的通讯录名单\n思想：创建一个分类数组，依次遍历数组和数据对象，将数据分类。\n代码如下：\n```\n    /**\n     * getAddressBookForMoblie:安卓手机获取通讯录用户接口\n     *\n     * @author yijin\n     * @since JDK 1.8\n     */\n    public void getAddressBookForMoblie() {\n        HttpServletRequest request = ServletActionContext.getRequest();\n        String token = request.getParameter(\"token\");\n        IrpUser irpuser = mobileAction.getlogin(token);\n        Long userid = irpuser.getUserid();\n\n        // 查询用户数量\n        int result = irpUserService.findUserbySMcount(\"\", null);\n\n        // 创建分页对象\n        PageUtil pageUtil = new PageUtil(this.pageNum, this.pageSizeclient, result);\n\n        // 查询所有通讯录用户\n        List<IrpUser> irpUsers = irpUserService.findUserbySM(\"\", null, pageUtil);\n\n        // 存放分类数据的集合\n        List<Map<String, Object>> dataList = new ArrayList<Map<String, Object>>();\n\n        // 获得当前登录用户所关注的用户列表\n        List irpMicroblogFocuslist = this.irpMicroblogFocusService.selectUseridByLoginuserId(userid);\n\n        // 创建一个以大写字母为键的集合\n        Map<String, List<Map<String, Object>>> initialMap = new HashMap<String, List<Map<String, Object>>>();\n\n        // 创建一个用于分类的字母数组\n        String[] words = { \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\",\n                \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\" };\n\n        for (String word : words) {\n            for (int i = 0; i < irpUsers.size(); i++) {\n                // 如果用户名的首字母等于一个字母，将其填入集合\n                if (word.equals(irpUsers.get(i).getUsersm())) {\n                    // 存放头像、名称、关注信息和id等相关用户信息\n                    Map<String, Object> userMap = new HashMap<String, Object>();\n\n                    userMap.put(\"addrebookphone\", irpUsers.get(i).getMobile());\n                    userMap.put(\"addrebooksex\", irpUsers.get(i).getSex());\n                    userMap.put(\"addrebookmail\", irpUsers.get(i).getEmail());\n                    userMap.put(\"addrebookarea\", irpUsers.get(i).getLocation());\n\n                    if (irpUsers.get(i).getUserpic() != null) {\n                        // 头像不为空给头像加token\n                        userMap.put(\"addrebookimg\", irpUsers.get(i).getUserpic() + \"&token=\"\n                                + irpUsers.get(i).getToken());\n                    } else {\n                        //给默认头像\n                        userMap.put(\"addrebookimg\", irpUsers.get(i).getDefaultUserPic());\n                    }\n\n                    // 名称\n                    userMap.put(\"addrebookname\", irpUsers.get(i).getTruename());\n\n                    // id\n                    userMap.put(\"addrebookuserid\", irpUsers.get(i).getUserid());\n\n                    // 当前登录用户所关注的用户列表中是否存在遍历的用户，如果有设为1（关注）\n                    if (irpMicroblogFocuslist.contains(irpUsers.get(i).getUserid().toString())) {\n                        userMap.put(\"addrebookattentionstatus\", \"1\");\n                    } else {\n                        userMap.put(\"addrebookattentionstatus\", \"0\");\n                    }\n\n                    // 把map放入分类数据的集合中\n                    dataList.add(userMap);\n                }\n            }\n            // 放入以字母为键的集合中\n            initialMap.put(word, dataList);\n            // 置空\n            dataList = new ArrayList<Map<String, Object>>();\n        }\n\n        // 遍历map将空的集合移除\n        Iterator<Map.Entry<String, List<Map<String, Object>>>> map = initialMap.entrySet().iterator();\n        while(map.hasNext()){\n            Map.Entry<String, List<Map<String, Object>>> entry = map.next();\n            if(entry.getValue().isEmpty()){\n                map.remove();//使用迭代器的remove()方法删除元素\n            }\n        }\n        ActionUtil.writer(JsonUtil.map2json(initialMap));\n    }\n```\n\n## js函数通过回调函数来返回ajax获得的数据\n在跨域的ajax请求中，async属性是失效的，所以想通过函数返回ajax获取的服务端数据就只能使用回调函数，具体实例如下：\n```\nfunction test(callback){\n    jQuery.ajax({\n        url:\"...\",\n        method:\"GET\",\n        data:{},\n        success:function(data){\n            callback(data);\n        }\n    });\n}\n\ntest(function(data){\n    alert(data);\n});\n```\n\n\n## 使用Oracle导入.imp和.bmp文件\n1. 创建表空间，创建用户(都是大写)选择表空间，分配DBA CONNECT RESOURCE权限。\n2. 在开始菜单中输入cmd ,不需要切换到sqlplus。\n3. 命令：imp 用户名/密码@服务器地址:数据库端口号/数据库 file=路径 full=y\nfull=y表示将数据库表全部导入。\n\n## 删除限定日期之前的Sql语句\nDELETE\nFROM\n    表名\nWHERE\n    日期字段 < TO_DATE (\n        '2015-01-01 00:00:00',\n        'yyyy-mm-dd HH24:MI:SS'\n    );\n\n> 注：Oracle中HH24表示24小时制，MI表示分。\n\n## 恢复MyEclipse不小心弄错乱的界面\n菜单栏window->Reset perspective\n\n## Solr中的日期格式\nSolr中的日期有很严格的格式限制： YYYY-MM-DDThh:mm:ssZ\nYYYY：表示年   MM：表示月份   DD：表示天\nhh：表示小时，24小时制   mm：表示分钟   ss：表示秒钟\nZ 代表时区是UTC\n\n## Java中为Solr搜索添加过滤条件\nSolrQuery.addFilterQuery(String str);\n例如：\n```\n// 表示时间范围是2015-01-01之后\nSolrQuery.addFilterQuery(\"CRTIME:[2015-01-01T00:00:00Z TO *]\");\n```\n\n## Java异常：Error: executeQueryForObject returned too many results. 的解决方法\nibatis封装的操作数据库的对象中QueryForObject方法返回的是一个对象，如果有多个对象的话，就会报异常。\n如果有多条返回结果，不应该用executeQueryForObject，应该用executeForObjectList或者queryForList。\n\n## Java中的Map结构，根据value值进行排序\n```\n// 将userIdMap转换为List，以便排序\nList<Map.Entry<Integer, Integer>> sortList = new ArrayList<Map.Entry<Integer, Integer>>(userIdMap.entrySet());\n\n// 通过比较器来实现排序(降序)\nCollections.sort(sortList, new Comparator<Map.Entry<Integer, Integer>>() {\n    @Override\n    public int compare(Entry<Integer, Integer> o1, Entry<Integer, Integer> o2){\n        return o2.getValue().compareTo(o1.getValue());\n    }\n});\n```\n","source":"_posts/工作填坑杂谈(2).md","raw":"---\ntitle: 工作中填坑杂谈(2)\ndate: 2017-08-28 23:10:54\ncategories: 遇到的坑\ntags:\n     - 填坑经验\ndescription: 记录工作中踩到的坑，无序。。。\n---\n## Java抛出ConcurrentModificationException异常的原因\nJava中的Map如果在遍历过程中要删除元素，除非通过迭代器自己的remove()方法，否则就会导致抛出ConcurrentModificationException异常。\n这么做的原因是为了保证迭代器能够尽快感知到Map的“结构性修改“，从而避免不同视图下不一致现象。\n## 实现一个按首字母分组的通讯录名单\n思想：创建一个分类数组，依次遍历数组和数据对象，将数据分类。\n代码如下：\n```\n    /**\n     * getAddressBookForMoblie:安卓手机获取通讯录用户接口\n     *\n     * @author yijin\n     * @since JDK 1.8\n     */\n    public void getAddressBookForMoblie() {\n        HttpServletRequest request = ServletActionContext.getRequest();\n        String token = request.getParameter(\"token\");\n        IrpUser irpuser = mobileAction.getlogin(token);\n        Long userid = irpuser.getUserid();\n\n        // 查询用户数量\n        int result = irpUserService.findUserbySMcount(\"\", null);\n\n        // 创建分页对象\n        PageUtil pageUtil = new PageUtil(this.pageNum, this.pageSizeclient, result);\n\n        // 查询所有通讯录用户\n        List<IrpUser> irpUsers = irpUserService.findUserbySM(\"\", null, pageUtil);\n\n        // 存放分类数据的集合\n        List<Map<String, Object>> dataList = new ArrayList<Map<String, Object>>();\n\n        // 获得当前登录用户所关注的用户列表\n        List irpMicroblogFocuslist = this.irpMicroblogFocusService.selectUseridByLoginuserId(userid);\n\n        // 创建一个以大写字母为键的集合\n        Map<String, List<Map<String, Object>>> initialMap = new HashMap<String, List<Map<String, Object>>>();\n\n        // 创建一个用于分类的字母数组\n        String[] words = { \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\",\n                \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\" };\n\n        for (String word : words) {\n            for (int i = 0; i < irpUsers.size(); i++) {\n                // 如果用户名的首字母等于一个字母，将其填入集合\n                if (word.equals(irpUsers.get(i).getUsersm())) {\n                    // 存放头像、名称、关注信息和id等相关用户信息\n                    Map<String, Object> userMap = new HashMap<String, Object>();\n\n                    userMap.put(\"addrebookphone\", irpUsers.get(i).getMobile());\n                    userMap.put(\"addrebooksex\", irpUsers.get(i).getSex());\n                    userMap.put(\"addrebookmail\", irpUsers.get(i).getEmail());\n                    userMap.put(\"addrebookarea\", irpUsers.get(i).getLocation());\n\n                    if (irpUsers.get(i).getUserpic() != null) {\n                        // 头像不为空给头像加token\n                        userMap.put(\"addrebookimg\", irpUsers.get(i).getUserpic() + \"&token=\"\n                                + irpUsers.get(i).getToken());\n                    } else {\n                        //给默认头像\n                        userMap.put(\"addrebookimg\", irpUsers.get(i).getDefaultUserPic());\n                    }\n\n                    // 名称\n                    userMap.put(\"addrebookname\", irpUsers.get(i).getTruename());\n\n                    // id\n                    userMap.put(\"addrebookuserid\", irpUsers.get(i).getUserid());\n\n                    // 当前登录用户所关注的用户列表中是否存在遍历的用户，如果有设为1（关注）\n                    if (irpMicroblogFocuslist.contains(irpUsers.get(i).getUserid().toString())) {\n                        userMap.put(\"addrebookattentionstatus\", \"1\");\n                    } else {\n                        userMap.put(\"addrebookattentionstatus\", \"0\");\n                    }\n\n                    // 把map放入分类数据的集合中\n                    dataList.add(userMap);\n                }\n            }\n            // 放入以字母为键的集合中\n            initialMap.put(word, dataList);\n            // 置空\n            dataList = new ArrayList<Map<String, Object>>();\n        }\n\n        // 遍历map将空的集合移除\n        Iterator<Map.Entry<String, List<Map<String, Object>>>> map = initialMap.entrySet().iterator();\n        while(map.hasNext()){\n            Map.Entry<String, List<Map<String, Object>>> entry = map.next();\n            if(entry.getValue().isEmpty()){\n                map.remove();//使用迭代器的remove()方法删除元素\n            }\n        }\n        ActionUtil.writer(JsonUtil.map2json(initialMap));\n    }\n```\n\n## js函数通过回调函数来返回ajax获得的数据\n在跨域的ajax请求中，async属性是失效的，所以想通过函数返回ajax获取的服务端数据就只能使用回调函数，具体实例如下：\n```\nfunction test(callback){\n    jQuery.ajax({\n        url:\"...\",\n        method:\"GET\",\n        data:{},\n        success:function(data){\n            callback(data);\n        }\n    });\n}\n\ntest(function(data){\n    alert(data);\n});\n```\n\n\n## 使用Oracle导入.imp和.bmp文件\n1. 创建表空间，创建用户(都是大写)选择表空间，分配DBA CONNECT RESOURCE权限。\n2. 在开始菜单中输入cmd ,不需要切换到sqlplus。\n3. 命令：imp 用户名/密码@服务器地址:数据库端口号/数据库 file=路径 full=y\nfull=y表示将数据库表全部导入。\n\n## 删除限定日期之前的Sql语句\nDELETE\nFROM\n    表名\nWHERE\n    日期字段 < TO_DATE (\n        '2015-01-01 00:00:00',\n        'yyyy-mm-dd HH24:MI:SS'\n    );\n\n> 注：Oracle中HH24表示24小时制，MI表示分。\n\n## 恢复MyEclipse不小心弄错乱的界面\n菜单栏window->Reset perspective\n\n## Solr中的日期格式\nSolr中的日期有很严格的格式限制： YYYY-MM-DDThh:mm:ssZ\nYYYY：表示年   MM：表示月份   DD：表示天\nhh：表示小时，24小时制   mm：表示分钟   ss：表示秒钟\nZ 代表时区是UTC\n\n## Java中为Solr搜索添加过滤条件\nSolrQuery.addFilterQuery(String str);\n例如：\n```\n// 表示时间范围是2015-01-01之后\nSolrQuery.addFilterQuery(\"CRTIME:[2015-01-01T00:00:00Z TO *]\");\n```\n\n## Java异常：Error: executeQueryForObject returned too many results. 的解决方法\nibatis封装的操作数据库的对象中QueryForObject方法返回的是一个对象，如果有多个对象的话，就会报异常。\n如果有多条返回结果，不应该用executeQueryForObject，应该用executeForObjectList或者queryForList。\n\n## Java中的Map结构，根据value值进行排序\n```\n// 将userIdMap转换为List，以便排序\nList<Map.Entry<Integer, Integer>> sortList = new ArrayList<Map.Entry<Integer, Integer>>(userIdMap.entrySet());\n\n// 通过比较器来实现排序(降序)\nCollections.sort(sortList, new Comparator<Map.Entry<Integer, Integer>>() {\n    @Override\n    public int compare(Entry<Integer, Integer> o1, Entry<Integer, Integer> o2){\n        return o2.getValue().compareTo(o1.getValue());\n    }\n});\n```\n","slug":"工作填坑杂谈(2)","published":1,"updated":"2017-10-12T14:54:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjksf3cxa002mh8efbvj8874g","content":"<h2 id=\"Java抛出ConcurrentModificationException异常的原因\"><a href=\"#Java抛出ConcurrentModificationException异常的原因\" class=\"headerlink\" title=\"Java抛出ConcurrentModificationException异常的原因\"></a>Java抛出ConcurrentModificationException异常的原因</h2><p>Java中的Map如果在遍历过程中要删除元素，除非通过迭代器自己的remove()方法，否则就会导致抛出ConcurrentModificationException异常。<br>这么做的原因是为了保证迭代器能够尽快感知到Map的“结构性修改“，从而避免不同视图下不一致现象。</p>\n<h2 id=\"实现一个按首字母分组的通讯录名单\"><a href=\"#实现一个按首字母分组的通讯录名单\" class=\"headerlink\" title=\"实现一个按首字母分组的通讯录名单\"></a>实现一个按首字母分组的通讯录名单</h2><p>思想：创建一个分类数组，依次遍历数组和数据对象，将数据分类。<br>代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * getAddressBookForMoblie:安卓手机获取通讯录用户接口</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author yijin</span><br><span class=\"line\"> * @since JDK 1.8</span><br><span class=\"line\"> */</span><br><span class=\"line\">public void getAddressBookForMoblie() &#123;</span><br><span class=\"line\">    HttpServletRequest request = ServletActionContext.getRequest();</span><br><span class=\"line\">    String token = request.getParameter(&quot;token&quot;);</span><br><span class=\"line\">    IrpUser irpuser = mobileAction.getlogin(token);</span><br><span class=\"line\">    Long userid = irpuser.getUserid();</span><br><span class=\"line\"></span><br><span class=\"line\">    // 查询用户数量</span><br><span class=\"line\">    int result = irpUserService.findUserbySMcount(&quot;&quot;, null);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 创建分页对象</span><br><span class=\"line\">    PageUtil pageUtil = new PageUtil(this.pageNum, this.pageSizeclient, result);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 查询所有通讯录用户</span><br><span class=\"line\">    List&lt;IrpUser&gt; irpUsers = irpUserService.findUserbySM(&quot;&quot;, null, pageUtil);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 存放分类数据的集合</span><br><span class=\"line\">    List&lt;Map&lt;String, Object&gt;&gt; dataList = new ArrayList&lt;Map&lt;String, Object&gt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    // 获得当前登录用户所关注的用户列表</span><br><span class=\"line\">    List irpMicroblogFocuslist = this.irpMicroblogFocusService.selectUseridByLoginuserId(userid);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 创建一个以大写字母为键的集合</span><br><span class=\"line\">    Map&lt;String, List&lt;Map&lt;String, Object&gt;&gt;&gt; initialMap = new HashMap&lt;String, List&lt;Map&lt;String, Object&gt;&gt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    // 创建一个用于分类的字母数组</span><br><span class=\"line\">    String[] words = &#123; &quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;, &quot;I&quot;, &quot;J&quot;, &quot;K&quot;, &quot;L&quot;, &quot;M&quot;, &quot;N&quot;, &quot;O&quot;, &quot;P&quot;, &quot;Q&quot;, &quot;R&quot;,</span><br><span class=\"line\">            &quot;S&quot;, &quot;T&quot;, &quot;U&quot;, &quot;V&quot;, &quot;W&quot;, &quot;X&quot;, &quot;Y&quot;, &quot;Z&quot; &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    for (String word : words) &#123;</span><br><span class=\"line\">        for (int i = 0; i &lt; irpUsers.size(); i++) &#123;</span><br><span class=\"line\">            // 如果用户名的首字母等于一个字母，将其填入集合</span><br><span class=\"line\">            if (word.equals(irpUsers.get(i).getUsersm())) &#123;</span><br><span class=\"line\">                // 存放头像、名称、关注信息和id等相关用户信息</span><br><span class=\"line\">                Map&lt;String, Object&gt; userMap = new HashMap&lt;String, Object&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">                userMap.put(&quot;addrebookphone&quot;, irpUsers.get(i).getMobile());</span><br><span class=\"line\">                userMap.put(&quot;addrebooksex&quot;, irpUsers.get(i).getSex());</span><br><span class=\"line\">                userMap.put(&quot;addrebookmail&quot;, irpUsers.get(i).getEmail());</span><br><span class=\"line\">                userMap.put(&quot;addrebookarea&quot;, irpUsers.get(i).getLocation());</span><br><span class=\"line\"></span><br><span class=\"line\">                if (irpUsers.get(i).getUserpic() != null) &#123;</span><br><span class=\"line\">                    // 头像不为空给头像加token</span><br><span class=\"line\">                    userMap.put(&quot;addrebookimg&quot;, irpUsers.get(i).getUserpic() + &quot;&amp;token=&quot;</span><br><span class=\"line\">                            + irpUsers.get(i).getToken());</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                    //给默认头像</span><br><span class=\"line\">                    userMap.put(&quot;addrebookimg&quot;, irpUsers.get(i).getDefaultUserPic());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                // 名称</span><br><span class=\"line\">                userMap.put(&quot;addrebookname&quot;, irpUsers.get(i).getTruename());</span><br><span class=\"line\"></span><br><span class=\"line\">                // id</span><br><span class=\"line\">                userMap.put(&quot;addrebookuserid&quot;, irpUsers.get(i).getUserid());</span><br><span class=\"line\"></span><br><span class=\"line\">                // 当前登录用户所关注的用户列表中是否存在遍历的用户，如果有设为1（关注）</span><br><span class=\"line\">                if (irpMicroblogFocuslist.contains(irpUsers.get(i).getUserid().toString())) &#123;</span><br><span class=\"line\">                    userMap.put(&quot;addrebookattentionstatus&quot;, &quot;1&quot;);</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                    userMap.put(&quot;addrebookattentionstatus&quot;, &quot;0&quot;);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                // 把map放入分类数据的集合中</span><br><span class=\"line\">                dataList.add(userMap);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 放入以字母为键的集合中</span><br><span class=\"line\">        initialMap.put(word, dataList);</span><br><span class=\"line\">        // 置空</span><br><span class=\"line\">        dataList = new ArrayList&lt;Map&lt;String, Object&gt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 遍历map将空的集合移除</span><br><span class=\"line\">    Iterator&lt;Map.Entry&lt;String, List&lt;Map&lt;String, Object&gt;&gt;&gt;&gt; map = initialMap.entrySet().iterator();</span><br><span class=\"line\">    while(map.hasNext())&#123;</span><br><span class=\"line\">        Map.Entry&lt;String, List&lt;Map&lt;String, Object&gt;&gt;&gt; entry = map.next();</span><br><span class=\"line\">        if(entry.getValue().isEmpty())&#123;</span><br><span class=\"line\">            map.remove();//使用迭代器的remove()方法删除元素</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ActionUtil.writer(JsonUtil.map2json(initialMap));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"js函数通过回调函数来返回ajax获得的数据\"><a href=\"#js函数通过回调函数来返回ajax获得的数据\" class=\"headerlink\" title=\"js函数通过回调函数来返回ajax获得的数据\"></a>js函数通过回调函数来返回ajax获得的数据</h2><p>在跨域的ajax请求中，async属性是失效的，所以想通过函数返回ajax获取的服务端数据就只能使用回调函数，具体实例如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function test(callback)&#123;</span><br><span class=\"line\">    jQuery.ajax(&#123;</span><br><span class=\"line\">        url:&quot;...&quot;,</span><br><span class=\"line\">        method:&quot;GET&quot;,</span><br><span class=\"line\">        data:&#123;&#125;,</span><br><span class=\"line\">        success:function(data)&#123;</span><br><span class=\"line\">            callback(data);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test(function(data)&#123;</span><br><span class=\"line\">    alert(data);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"使用Oracle导入-imp和-bmp文件\"><a href=\"#使用Oracle导入-imp和-bmp文件\" class=\"headerlink\" title=\"使用Oracle导入.imp和.bmp文件\"></a>使用Oracle导入.imp和.bmp文件</h2><ol>\n<li>创建表空间，创建用户(都是大写)选择表空间，分配DBA CONNECT RESOURCE权限。</li>\n<li>在开始菜单中输入cmd ,不需要切换到sqlplus。</li>\n<li>命令：imp 用户名/密码@服务器地址:数据库端口号/数据库 file=路径 full=y<br>full=y表示将数据库表全部导入。</li>\n</ol>\n<h2 id=\"删除限定日期之前的Sql语句\"><a href=\"#删除限定日期之前的Sql语句\" class=\"headerlink\" title=\"删除限定日期之前的Sql语句\"></a>删除限定日期之前的Sql语句</h2><p>DELETE<br>FROM<br>    表名<br>WHERE<br>    日期字段 &lt; TO_DATE (<br>        ‘2015-01-01 00:00:00’,<br>        ‘yyyy-mm-dd HH24:MI:SS’<br>    );</p>\n<blockquote>\n<p>注：Oracle中HH24表示24小时制，MI表示分。</p>\n</blockquote>\n<h2 id=\"恢复MyEclipse不小心弄错乱的界面\"><a href=\"#恢复MyEclipse不小心弄错乱的界面\" class=\"headerlink\" title=\"恢复MyEclipse不小心弄错乱的界面\"></a>恢复MyEclipse不小心弄错乱的界面</h2><p>菜单栏window-&gt;Reset perspective</p>\n<h2 id=\"Solr中的日期格式\"><a href=\"#Solr中的日期格式\" class=\"headerlink\" title=\"Solr中的日期格式\"></a>Solr中的日期格式</h2><p>Solr中的日期有很严格的格式限制： YYYY-MM-DDThh:mm:ssZ<br>YYYY：表示年   MM：表示月份   DD：表示天<br>hh：表示小时，24小时制   mm：表示分钟   ss：表示秒钟<br>Z 代表时区是UTC</p>\n<h2 id=\"Java中为Solr搜索添加过滤条件\"><a href=\"#Java中为Solr搜索添加过滤条件\" class=\"headerlink\" title=\"Java中为Solr搜索添加过滤条件\"></a>Java中为Solr搜索添加过滤条件</h2><p>SolrQuery.addFilterQuery(String str);<br>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 表示时间范围是2015-01-01之后</span><br><span class=\"line\">SolrQuery.addFilterQuery(&quot;CRTIME:[2015-01-01T00:00:00Z TO *]&quot;);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Java异常：Error-executeQueryForObject-returned-too-many-results-的解决方法\"><a href=\"#Java异常：Error-executeQueryForObject-returned-too-many-results-的解决方法\" class=\"headerlink\" title=\"Java异常：Error: executeQueryForObject returned too many results. 的解决方法\"></a>Java异常：Error: executeQueryForObject returned too many results. 的解决方法</h2><p>ibatis封装的操作数据库的对象中QueryForObject方法返回的是一个对象，如果有多个对象的话，就会报异常。<br>如果有多条返回结果，不应该用executeQueryForObject，应该用executeForObjectList或者queryForList。</p>\n<h2 id=\"Java中的Map结构，根据value值进行排序\"><a href=\"#Java中的Map结构，根据value值进行排序\" class=\"headerlink\" title=\"Java中的Map结构，根据value值进行排序\"></a>Java中的Map结构，根据value值进行排序</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 将userIdMap转换为List，以便排序</span><br><span class=\"line\">List&lt;Map.Entry&lt;Integer, Integer&gt;&gt; sortList = new ArrayList&lt;Map.Entry&lt;Integer, Integer&gt;&gt;(userIdMap.entrySet());</span><br><span class=\"line\"></span><br><span class=\"line\">// 通过比较器来实现排序(降序)</span><br><span class=\"line\">Collections.sort(sortList, new Comparator&lt;Map.Entry&lt;Integer, Integer&gt;&gt;() &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public int compare(Entry&lt;Integer, Integer&gt; o1, Entry&lt;Integer, Integer&gt; o2)&#123;</span><br><span class=\"line\">        return o2.getValue().compareTo(o1.getValue());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Java抛出ConcurrentModificationException异常的原因\"><a href=\"#Java抛出ConcurrentModificationException异常的原因\" class=\"headerlink\" title=\"Java抛出ConcurrentModificationException异常的原因\"></a>Java抛出ConcurrentModificationException异常的原因</h2><p>Java中的Map如果在遍历过程中要删除元素，除非通过迭代器自己的remove()方法，否则就会导致抛出ConcurrentModificationException异常。<br>这么做的原因是为了保证迭代器能够尽快感知到Map的“结构性修改“，从而避免不同视图下不一致现象。</p>\n<h2 id=\"实现一个按首字母分组的通讯录名单\"><a href=\"#实现一个按首字母分组的通讯录名单\" class=\"headerlink\" title=\"实现一个按首字母分组的通讯录名单\"></a>实现一个按首字母分组的通讯录名单</h2><p>思想：创建一个分类数组，依次遍历数组和数据对象，将数据分类。<br>代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * getAddressBookForMoblie:安卓手机获取通讯录用户接口</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author yijin</span><br><span class=\"line\"> * @since JDK 1.8</span><br><span class=\"line\"> */</span><br><span class=\"line\">public void getAddressBookForMoblie() &#123;</span><br><span class=\"line\">    HttpServletRequest request = ServletActionContext.getRequest();</span><br><span class=\"line\">    String token = request.getParameter(&quot;token&quot;);</span><br><span class=\"line\">    IrpUser irpuser = mobileAction.getlogin(token);</span><br><span class=\"line\">    Long userid = irpuser.getUserid();</span><br><span class=\"line\"></span><br><span class=\"line\">    // 查询用户数量</span><br><span class=\"line\">    int result = irpUserService.findUserbySMcount(&quot;&quot;, null);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 创建分页对象</span><br><span class=\"line\">    PageUtil pageUtil = new PageUtil(this.pageNum, this.pageSizeclient, result);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 查询所有通讯录用户</span><br><span class=\"line\">    List&lt;IrpUser&gt; irpUsers = irpUserService.findUserbySM(&quot;&quot;, null, pageUtil);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 存放分类数据的集合</span><br><span class=\"line\">    List&lt;Map&lt;String, Object&gt;&gt; dataList = new ArrayList&lt;Map&lt;String, Object&gt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    // 获得当前登录用户所关注的用户列表</span><br><span class=\"line\">    List irpMicroblogFocuslist = this.irpMicroblogFocusService.selectUseridByLoginuserId(userid);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 创建一个以大写字母为键的集合</span><br><span class=\"line\">    Map&lt;String, List&lt;Map&lt;String, Object&gt;&gt;&gt; initialMap = new HashMap&lt;String, List&lt;Map&lt;String, Object&gt;&gt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    // 创建一个用于分类的字母数组</span><br><span class=\"line\">    String[] words = &#123; &quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;, &quot;I&quot;, &quot;J&quot;, &quot;K&quot;, &quot;L&quot;, &quot;M&quot;, &quot;N&quot;, &quot;O&quot;, &quot;P&quot;, &quot;Q&quot;, &quot;R&quot;,</span><br><span class=\"line\">            &quot;S&quot;, &quot;T&quot;, &quot;U&quot;, &quot;V&quot;, &quot;W&quot;, &quot;X&quot;, &quot;Y&quot;, &quot;Z&quot; &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    for (String word : words) &#123;</span><br><span class=\"line\">        for (int i = 0; i &lt; irpUsers.size(); i++) &#123;</span><br><span class=\"line\">            // 如果用户名的首字母等于一个字母，将其填入集合</span><br><span class=\"line\">            if (word.equals(irpUsers.get(i).getUsersm())) &#123;</span><br><span class=\"line\">                // 存放头像、名称、关注信息和id等相关用户信息</span><br><span class=\"line\">                Map&lt;String, Object&gt; userMap = new HashMap&lt;String, Object&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">                userMap.put(&quot;addrebookphone&quot;, irpUsers.get(i).getMobile());</span><br><span class=\"line\">                userMap.put(&quot;addrebooksex&quot;, irpUsers.get(i).getSex());</span><br><span class=\"line\">                userMap.put(&quot;addrebookmail&quot;, irpUsers.get(i).getEmail());</span><br><span class=\"line\">                userMap.put(&quot;addrebookarea&quot;, irpUsers.get(i).getLocation());</span><br><span class=\"line\"></span><br><span class=\"line\">                if (irpUsers.get(i).getUserpic() != null) &#123;</span><br><span class=\"line\">                    // 头像不为空给头像加token</span><br><span class=\"line\">                    userMap.put(&quot;addrebookimg&quot;, irpUsers.get(i).getUserpic() + &quot;&amp;token=&quot;</span><br><span class=\"line\">                            + irpUsers.get(i).getToken());</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                    //给默认头像</span><br><span class=\"line\">                    userMap.put(&quot;addrebookimg&quot;, irpUsers.get(i).getDefaultUserPic());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                // 名称</span><br><span class=\"line\">                userMap.put(&quot;addrebookname&quot;, irpUsers.get(i).getTruename());</span><br><span class=\"line\"></span><br><span class=\"line\">                // id</span><br><span class=\"line\">                userMap.put(&quot;addrebookuserid&quot;, irpUsers.get(i).getUserid());</span><br><span class=\"line\"></span><br><span class=\"line\">                // 当前登录用户所关注的用户列表中是否存在遍历的用户，如果有设为1（关注）</span><br><span class=\"line\">                if (irpMicroblogFocuslist.contains(irpUsers.get(i).getUserid().toString())) &#123;</span><br><span class=\"line\">                    userMap.put(&quot;addrebookattentionstatus&quot;, &quot;1&quot;);</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                    userMap.put(&quot;addrebookattentionstatus&quot;, &quot;0&quot;);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                // 把map放入分类数据的集合中</span><br><span class=\"line\">                dataList.add(userMap);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 放入以字母为键的集合中</span><br><span class=\"line\">        initialMap.put(word, dataList);</span><br><span class=\"line\">        // 置空</span><br><span class=\"line\">        dataList = new ArrayList&lt;Map&lt;String, Object&gt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 遍历map将空的集合移除</span><br><span class=\"line\">    Iterator&lt;Map.Entry&lt;String, List&lt;Map&lt;String, Object&gt;&gt;&gt;&gt; map = initialMap.entrySet().iterator();</span><br><span class=\"line\">    while(map.hasNext())&#123;</span><br><span class=\"line\">        Map.Entry&lt;String, List&lt;Map&lt;String, Object&gt;&gt;&gt; entry = map.next();</span><br><span class=\"line\">        if(entry.getValue().isEmpty())&#123;</span><br><span class=\"line\">            map.remove();//使用迭代器的remove()方法删除元素</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ActionUtil.writer(JsonUtil.map2json(initialMap));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"js函数通过回调函数来返回ajax获得的数据\"><a href=\"#js函数通过回调函数来返回ajax获得的数据\" class=\"headerlink\" title=\"js函数通过回调函数来返回ajax获得的数据\"></a>js函数通过回调函数来返回ajax获得的数据</h2><p>在跨域的ajax请求中，async属性是失效的，所以想通过函数返回ajax获取的服务端数据就只能使用回调函数，具体实例如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function test(callback)&#123;</span><br><span class=\"line\">    jQuery.ajax(&#123;</span><br><span class=\"line\">        url:&quot;...&quot;,</span><br><span class=\"line\">        method:&quot;GET&quot;,</span><br><span class=\"line\">        data:&#123;&#125;,</span><br><span class=\"line\">        success:function(data)&#123;</span><br><span class=\"line\">            callback(data);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test(function(data)&#123;</span><br><span class=\"line\">    alert(data);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"使用Oracle导入-imp和-bmp文件\"><a href=\"#使用Oracle导入-imp和-bmp文件\" class=\"headerlink\" title=\"使用Oracle导入.imp和.bmp文件\"></a>使用Oracle导入.imp和.bmp文件</h2><ol>\n<li>创建表空间，创建用户(都是大写)选择表空间，分配DBA CONNECT RESOURCE权限。</li>\n<li>在开始菜单中输入cmd ,不需要切换到sqlplus。</li>\n<li>命令：imp 用户名/密码@服务器地址:数据库端口号/数据库 file=路径 full=y<br>full=y表示将数据库表全部导入。</li>\n</ol>\n<h2 id=\"删除限定日期之前的Sql语句\"><a href=\"#删除限定日期之前的Sql语句\" class=\"headerlink\" title=\"删除限定日期之前的Sql语句\"></a>删除限定日期之前的Sql语句</h2><p>DELETE<br>FROM<br>    表名<br>WHERE<br>    日期字段 &lt; TO_DATE (<br>        ‘2015-01-01 00:00:00’,<br>        ‘yyyy-mm-dd HH24:MI:SS’<br>    );</p>\n<blockquote>\n<p>注：Oracle中HH24表示24小时制，MI表示分。</p>\n</blockquote>\n<h2 id=\"恢复MyEclipse不小心弄错乱的界面\"><a href=\"#恢复MyEclipse不小心弄错乱的界面\" class=\"headerlink\" title=\"恢复MyEclipse不小心弄错乱的界面\"></a>恢复MyEclipse不小心弄错乱的界面</h2><p>菜单栏window-&gt;Reset perspective</p>\n<h2 id=\"Solr中的日期格式\"><a href=\"#Solr中的日期格式\" class=\"headerlink\" title=\"Solr中的日期格式\"></a>Solr中的日期格式</h2><p>Solr中的日期有很严格的格式限制： YYYY-MM-DDThh:mm:ssZ<br>YYYY：表示年   MM：表示月份   DD：表示天<br>hh：表示小时，24小时制   mm：表示分钟   ss：表示秒钟<br>Z 代表时区是UTC</p>\n<h2 id=\"Java中为Solr搜索添加过滤条件\"><a href=\"#Java中为Solr搜索添加过滤条件\" class=\"headerlink\" title=\"Java中为Solr搜索添加过滤条件\"></a>Java中为Solr搜索添加过滤条件</h2><p>SolrQuery.addFilterQuery(String str);<br>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 表示时间范围是2015-01-01之后</span><br><span class=\"line\">SolrQuery.addFilterQuery(&quot;CRTIME:[2015-01-01T00:00:00Z TO *]&quot;);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Java异常：Error-executeQueryForObject-returned-too-many-results-的解决方法\"><a href=\"#Java异常：Error-executeQueryForObject-returned-too-many-results-的解决方法\" class=\"headerlink\" title=\"Java异常：Error: executeQueryForObject returned too many results. 的解决方法\"></a>Java异常：Error: executeQueryForObject returned too many results. 的解决方法</h2><p>ibatis封装的操作数据库的对象中QueryForObject方法返回的是一个对象，如果有多个对象的话，就会报异常。<br>如果有多条返回结果，不应该用executeQueryForObject，应该用executeForObjectList或者queryForList。</p>\n<h2 id=\"Java中的Map结构，根据value值进行排序\"><a href=\"#Java中的Map结构，根据value值进行排序\" class=\"headerlink\" title=\"Java中的Map结构，根据value值进行排序\"></a>Java中的Map结构，根据value值进行排序</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 将userIdMap转换为List，以便排序</span><br><span class=\"line\">List&lt;Map.Entry&lt;Integer, Integer&gt;&gt; sortList = new ArrayList&lt;Map.Entry&lt;Integer, Integer&gt;&gt;(userIdMap.entrySet());</span><br><span class=\"line\"></span><br><span class=\"line\">// 通过比较器来实现排序(降序)</span><br><span class=\"line\">Collections.sort(sortList, new Comparator&lt;Map.Entry&lt;Integer, Integer&gt;&gt;() &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public int compare(Entry&lt;Integer, Integer&gt; o1, Entry&lt;Integer, Integer&gt; o2)&#123;</span><br><span class=\"line\">        return o2.getValue().compareTo(o1.getValue());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n"},{"title":"打造自己的Websocket组件","date":"2018-07-15T14:01:24.000Z","description":"打造自己的Websocket组件","_content":"# Websocket详解\n\n## 定义\n\nWebSocket一种在单个 TCP 连接上进行全双工通讯的协议，它由通信协议和编程API组成，WebSocket能够在浏览器和服务器之间建立双向连接，以基于事件的方式，赋予浏览器实时通信能力。既然是双向通信，就意味着服务器端和客户端可以同时发送并响应请求，而不再像HTTP的请求和响应。\n\n## 优点及适用场景\n\n1. 优点：\n\n   * 跨域\n   * 更好的二进制支持。Websocket定义了二进制帧，可以更轻松地处理二进制内容\n   * 实时性\n   * 长连接\n\n2. 适用场景：\n\n   * 聊天\n   * 文字直播\n   * 实时消息推送\n   * 数据实时更新\n\n## API\n\n1. 创建Websocket对象：`let ws = new Websocket('ws://localhost:8080')`\n2. 4个事件对象：\n\n\t```javascript\n\t  // 当websocket连接建立成功时\n\t  ws.addEventListener('open', () => {\n\t      console.log('websocket 建立连接')\n\t  })\n\t\n\t  // 当收到服务端的消息时\n\t  ws.addEventListener('message', (event) => {\n\t      console.log('获得数据', event.data)\n\t  })\n\t\n\t  // 当websocket关闭时\n\t  ws.addEventListener('close', (event) => {\n\t      console.log(\"websocket 连接关闭\")\n\t  })\n\t\n\t  // 当出现错误时\n\t  ws.addEventListener('error', (event) => {\n\t      console.error(\"websocket 出现错误\")\n\t  })\n\t```\n3. 2个方法：\n  \n\t```javascript\n\t // 发送消息 \n\t ws.send('hello websocket')\n\t\n\t // 关闭socket\n\t ws.close()\n\t```\n## 封装一个socket组件\n\n```javascript\n'use strict'\n/**\n * websocket请求封装\n * @class\n */\nclass Socket {\n  /**\n   * @constructs Socket\n   * @param {String} url 创建地址\n   * @param {Boolean} isNeedReconnect 是否需要断开重连机制\n   * @param {Number} reconnectLimit 重连次数上限\n   * @param {Function} openCallback 连接建立成功回调函数\n   * @param {Function} messageCallback 监听消息回调函数\n   * @param {Function} closeCallback 关闭连接回调函数\n   * @param {Function} errorCallback 异常回调函数\n   */\n  constructor({ url, isNeedReconnect, reconnectLimit, openCallback, messageCallback, closeCallback, errorCallback }) {\n    this.url = url\n    this.isNeedReconnect = isNeedReconnect\n    this.reconnectLimit = reconnectLimit || 7\n    this.openCallback = openCallback\n    this.messageCallback = messageCallback\n    this.closeCallback = closeCallback\n    this.errorCallback = errorCallback\n    this.socket\n    // 重连标识，避免重复重连\n    this.isInReconnect = false\n    // 重连次数\n    this.reconnectCount = 0\n    this.createSocket({ url: this.url })\n  }\n  /**\n   * 初始化websocket\n   * @param {String} url 创建地址\n   */\n  createSocket({ url }) {\n    try {\n      this.initListeners()\n      this.socket = new WebSocket(url)\n      this.initEventMonitor()\n    } catch (e) {\n      console.error('WebSocket创建连接失败')\n    }\n  }\n  /**\n   * 初始化ws事件监听\n   */\n  initEventMonitor() {\n    this.onOpen()\n    this.onMessage()\n    this.onClose()\n    this.onError()\n  }\n  /**\n   * 建立连接函数\n   */\n  onOpen() {\n    this.socket.addEventListener('open', () => {\n      // 一旦建立成功，重置重连次数\n      this.reconnectCount = 0\n      this.stopHeartBeat()\n      this.startHeartBeat()\n      this.clearAll()\n      // 建立成功标识\n      this.trigger('websocketReady')\n      if (this.openCallback) {\n        this.openCallback(event)\n      }\n    })\n  }\n  /**\n   * 接收数据函数\n   */\n  onMessage() {\n    this.socket.addEventListener('message', (event) => {\n      this.refreshServerTimer()\n      if (this.messageCallback) {\n        this.messageCallback(event.data)\n      }\n    })\n  }\n  /**\n   * 关闭处理函数\n   */\n  onClose() {\n    this.socket.addEventListener('close', (event) => {\n      console.error('WebSocket连接关闭，状态码：' + event.code)\n      if (this.closeCallback) {\n        this.closeCallback(event)\n      }\n      // 需要重连并且重连次数小于等于重连上限\n      if (this.isNeedReconnect && this.reconnectCount <= this.reconnectLimit) {\n        this.reconnect()\n      }\n    })\n  }\n  /**\n   * 错误处理函数\n   */\n  onError() {\n    this.socket.addEventListener('error', (event) => {\n      console.error('WebSocket in error')\n      if (this.errorCallback) {\n        this.errorCallback(event)\n      }\n      this.doClose({ isNeedClose: false })\n    })\n  }\n  /**\n   * 发送消息\n   * @param {Object} params 参数对象\n   */\n  sendMessage(params) {\n    // 发送时先判断连接是否关闭\n    if (this.isSocketCloseing() || this.isSocketClose()) {\n      // 需要重连，并且连接次数已经超过了上限（之前就触发过自动重连，并且在上限之内没有连接上）\n      if (this.reconnectCount > this.reconnectLimit && this.isNeedReconnect) {\n        // 重置连接次数\n        this.reconnectCount = 0\n        this.reconnect()\n      }\n    }\n\n    // 如果已经成功的建立了链接，则直接发送，否则监听websocketReady成功再发送\n    if (this.isSocketOpen()) {\n      this.socket.send(JSON.stringify(params))\n      console.log('发送参数', params)\n    } else {\n      // 监听websocketReady事件，发送消息\n      this.on('websocketReady', () => {\n        this.socket.send(JSON.stringify(params))\n        console.log('发送参数', params)\n      })\n    }\n  }\n  /**\n   * 重连机制\n   */\n  reconnect() {\n    if (this.isInReconnect) {\n      return\n    }\n    this.isInReconnect = true\n    setTimeout(() => {\n      // url生成一个参数标识告知服务端是重连的请求（服务端可以不处理）\n      this.createSocket({ url: this.urlAddParams({ url: this.url, key: 'reconnect', val: 'true' }) })\n      // 重连次数加1\n      this.reconnectCount++\n      this.isInReconnect = false\n    }, 2000 * this.reconnectCount)\n  }\n  /**\n   * 关闭socket\n   * @param {Boolean} isNeedClose 是否需要真的关闭socket\n   */\n  doClose({ isNeedClose }) {\n    // 判断是否关闭标识来决定是否需要重连\n    this.isNeedReconnect = isNeedClose ? false : true\n    clearTimeout(this.serverHeartBeatTimer)\n    this.stopHeartBeat()\n    this.socket.close()\n  }\n  /**\n   * 开始心跳机制(15秒发送一次ping)\n   */\n  startHeartBeat() {\n    this.heartBeatTimer = setInterval(() => {\n      this.socket.send('ping')\n    }, 15000)\n  }\n  /**\n   * 停止心跳机制\n   */\n  stopHeartBeat() {\n    clearInterval(this.heartBeatTimer)\n  }\n  /**\n   * 超时掉线计时（1分钟超时）\n   */\n  refreshServerTimer() {\n    clearTimeout(this.serverHeartBeatTimer)\n    this.serverHeartBeatTimer = setTimeout(() => {\n      this.doClose({ isNeedClose: false })\n    }, 60000)\n  }\n  /**\n   * 检查socket是否正在连接\n   * @return {Boolean} 是否正在连接\n   */\n  isSocketConnecting() {\n    return this.socket.readyState === WebSocket.CONNECTING\n  }\n  /**\n   * 检查socket是否连接成功\n   * @return {Boolean} 是否建立连接成功\n   */\n  isSocketOpen() {\n    return this.socket.readyState === WebSocket.OPEN\n  }\n  /**\n   * 检查socket是否正在关闭\n   * @return {Boolean} 是否正在关闭\n   */\n  isSocketCloseing() {\n    return this.socket.readyState === WebSocket.CLOSING\n  }\n  /**\n   * 检查socket是否已经关闭\n   * @return {Boolean} 是否已经关闭\n   */\n  isSocketClose() {\n    return this.socket.readyState === WebSocket.CLOSED\n  }\n  /**\n   * 动态拼接参数\n   * @param {String} url 地址\n   * @param {String} key 参数名\n   * @param {String} val 参数值\n   * @returns {String} 地址\n   */\n  urlAddParams({ url, key, val }) {\n    return url.indexOf('?') !== -1 ? url + `&${key}=${val}` : url + `?${key}=${val}`\n  }\n  /**\n   * 初始化监听器\n   */\n  initListeners() {\n    this.listeners = {}\n  }\n  /**\n   * 事件订阅\n   * @param {Sting} eventName 事件名\n   * @param {Function} callback 回调函数\n   */\n  on(eventName, callback) {\n    if (this.listeners[eventName] && this.listeners[eventName].length) {\n      if (this.listeners[eventName].indexOf(callback) === -1) {\n        this.listeners[eventName].push(callback)\n      }\n    } else {\n      this.listeners[eventName] = [callback]\n    }\n  }\n  /**\n   * 发布事件\n   * @param {Sting} eventName 事件名\n   */\n  trigger(eventName) {\n    if (this.listeners[eventName]) {\n      for (let i = 0; i < this.listeners[eventName].length; i++) {\n        // [].slice.call(arguments, 1) => 将arguments转换成数组\n        this.listeners[eventName][i].apply(this, [].slice.call(arguments, 1))\n      }\n    }\n  }\n  /**\n   * 重置监听器\n   */\n  clearAll() {\n    let tmp = this.listeners['ready']\n    this.listeners = {}\n    this.listeners['ready'] = tmp\n  }\n}\n\nexport default Socket\n\n```\n\n","source":"_posts/打造自己的Websocket组件.md","raw":"---\ntitle: 打造自己的Websocket组件\ndate: 2018-07-15 22:01:24\ncategories: JS实战\ntags:\n     - JavaScript\ndescription: 打造自己的Websocket组件\n---\n# Websocket详解\n\n## 定义\n\nWebSocket一种在单个 TCP 连接上进行全双工通讯的协议，它由通信协议和编程API组成，WebSocket能够在浏览器和服务器之间建立双向连接，以基于事件的方式，赋予浏览器实时通信能力。既然是双向通信，就意味着服务器端和客户端可以同时发送并响应请求，而不再像HTTP的请求和响应。\n\n## 优点及适用场景\n\n1. 优点：\n\n   * 跨域\n   * 更好的二进制支持。Websocket定义了二进制帧，可以更轻松地处理二进制内容\n   * 实时性\n   * 长连接\n\n2. 适用场景：\n\n   * 聊天\n   * 文字直播\n   * 实时消息推送\n   * 数据实时更新\n\n## API\n\n1. 创建Websocket对象：`let ws = new Websocket('ws://localhost:8080')`\n2. 4个事件对象：\n\n\t```javascript\n\t  // 当websocket连接建立成功时\n\t  ws.addEventListener('open', () => {\n\t      console.log('websocket 建立连接')\n\t  })\n\t\n\t  // 当收到服务端的消息时\n\t  ws.addEventListener('message', (event) => {\n\t      console.log('获得数据', event.data)\n\t  })\n\t\n\t  // 当websocket关闭时\n\t  ws.addEventListener('close', (event) => {\n\t      console.log(\"websocket 连接关闭\")\n\t  })\n\t\n\t  // 当出现错误时\n\t  ws.addEventListener('error', (event) => {\n\t      console.error(\"websocket 出现错误\")\n\t  })\n\t```\n3. 2个方法：\n  \n\t```javascript\n\t // 发送消息 \n\t ws.send('hello websocket')\n\t\n\t // 关闭socket\n\t ws.close()\n\t```\n## 封装一个socket组件\n\n```javascript\n'use strict'\n/**\n * websocket请求封装\n * @class\n */\nclass Socket {\n  /**\n   * @constructs Socket\n   * @param {String} url 创建地址\n   * @param {Boolean} isNeedReconnect 是否需要断开重连机制\n   * @param {Number} reconnectLimit 重连次数上限\n   * @param {Function} openCallback 连接建立成功回调函数\n   * @param {Function} messageCallback 监听消息回调函数\n   * @param {Function} closeCallback 关闭连接回调函数\n   * @param {Function} errorCallback 异常回调函数\n   */\n  constructor({ url, isNeedReconnect, reconnectLimit, openCallback, messageCallback, closeCallback, errorCallback }) {\n    this.url = url\n    this.isNeedReconnect = isNeedReconnect\n    this.reconnectLimit = reconnectLimit || 7\n    this.openCallback = openCallback\n    this.messageCallback = messageCallback\n    this.closeCallback = closeCallback\n    this.errorCallback = errorCallback\n    this.socket\n    // 重连标识，避免重复重连\n    this.isInReconnect = false\n    // 重连次数\n    this.reconnectCount = 0\n    this.createSocket({ url: this.url })\n  }\n  /**\n   * 初始化websocket\n   * @param {String} url 创建地址\n   */\n  createSocket({ url }) {\n    try {\n      this.initListeners()\n      this.socket = new WebSocket(url)\n      this.initEventMonitor()\n    } catch (e) {\n      console.error('WebSocket创建连接失败')\n    }\n  }\n  /**\n   * 初始化ws事件监听\n   */\n  initEventMonitor() {\n    this.onOpen()\n    this.onMessage()\n    this.onClose()\n    this.onError()\n  }\n  /**\n   * 建立连接函数\n   */\n  onOpen() {\n    this.socket.addEventListener('open', () => {\n      // 一旦建立成功，重置重连次数\n      this.reconnectCount = 0\n      this.stopHeartBeat()\n      this.startHeartBeat()\n      this.clearAll()\n      // 建立成功标识\n      this.trigger('websocketReady')\n      if (this.openCallback) {\n        this.openCallback(event)\n      }\n    })\n  }\n  /**\n   * 接收数据函数\n   */\n  onMessage() {\n    this.socket.addEventListener('message', (event) => {\n      this.refreshServerTimer()\n      if (this.messageCallback) {\n        this.messageCallback(event.data)\n      }\n    })\n  }\n  /**\n   * 关闭处理函数\n   */\n  onClose() {\n    this.socket.addEventListener('close', (event) => {\n      console.error('WebSocket连接关闭，状态码：' + event.code)\n      if (this.closeCallback) {\n        this.closeCallback(event)\n      }\n      // 需要重连并且重连次数小于等于重连上限\n      if (this.isNeedReconnect && this.reconnectCount <= this.reconnectLimit) {\n        this.reconnect()\n      }\n    })\n  }\n  /**\n   * 错误处理函数\n   */\n  onError() {\n    this.socket.addEventListener('error', (event) => {\n      console.error('WebSocket in error')\n      if (this.errorCallback) {\n        this.errorCallback(event)\n      }\n      this.doClose({ isNeedClose: false })\n    })\n  }\n  /**\n   * 发送消息\n   * @param {Object} params 参数对象\n   */\n  sendMessage(params) {\n    // 发送时先判断连接是否关闭\n    if (this.isSocketCloseing() || this.isSocketClose()) {\n      // 需要重连，并且连接次数已经超过了上限（之前就触发过自动重连，并且在上限之内没有连接上）\n      if (this.reconnectCount > this.reconnectLimit && this.isNeedReconnect) {\n        // 重置连接次数\n        this.reconnectCount = 0\n        this.reconnect()\n      }\n    }\n\n    // 如果已经成功的建立了链接，则直接发送，否则监听websocketReady成功再发送\n    if (this.isSocketOpen()) {\n      this.socket.send(JSON.stringify(params))\n      console.log('发送参数', params)\n    } else {\n      // 监听websocketReady事件，发送消息\n      this.on('websocketReady', () => {\n        this.socket.send(JSON.stringify(params))\n        console.log('发送参数', params)\n      })\n    }\n  }\n  /**\n   * 重连机制\n   */\n  reconnect() {\n    if (this.isInReconnect) {\n      return\n    }\n    this.isInReconnect = true\n    setTimeout(() => {\n      // url生成一个参数标识告知服务端是重连的请求（服务端可以不处理）\n      this.createSocket({ url: this.urlAddParams({ url: this.url, key: 'reconnect', val: 'true' }) })\n      // 重连次数加1\n      this.reconnectCount++\n      this.isInReconnect = false\n    }, 2000 * this.reconnectCount)\n  }\n  /**\n   * 关闭socket\n   * @param {Boolean} isNeedClose 是否需要真的关闭socket\n   */\n  doClose({ isNeedClose }) {\n    // 判断是否关闭标识来决定是否需要重连\n    this.isNeedReconnect = isNeedClose ? false : true\n    clearTimeout(this.serverHeartBeatTimer)\n    this.stopHeartBeat()\n    this.socket.close()\n  }\n  /**\n   * 开始心跳机制(15秒发送一次ping)\n   */\n  startHeartBeat() {\n    this.heartBeatTimer = setInterval(() => {\n      this.socket.send('ping')\n    }, 15000)\n  }\n  /**\n   * 停止心跳机制\n   */\n  stopHeartBeat() {\n    clearInterval(this.heartBeatTimer)\n  }\n  /**\n   * 超时掉线计时（1分钟超时）\n   */\n  refreshServerTimer() {\n    clearTimeout(this.serverHeartBeatTimer)\n    this.serverHeartBeatTimer = setTimeout(() => {\n      this.doClose({ isNeedClose: false })\n    }, 60000)\n  }\n  /**\n   * 检查socket是否正在连接\n   * @return {Boolean} 是否正在连接\n   */\n  isSocketConnecting() {\n    return this.socket.readyState === WebSocket.CONNECTING\n  }\n  /**\n   * 检查socket是否连接成功\n   * @return {Boolean} 是否建立连接成功\n   */\n  isSocketOpen() {\n    return this.socket.readyState === WebSocket.OPEN\n  }\n  /**\n   * 检查socket是否正在关闭\n   * @return {Boolean} 是否正在关闭\n   */\n  isSocketCloseing() {\n    return this.socket.readyState === WebSocket.CLOSING\n  }\n  /**\n   * 检查socket是否已经关闭\n   * @return {Boolean} 是否已经关闭\n   */\n  isSocketClose() {\n    return this.socket.readyState === WebSocket.CLOSED\n  }\n  /**\n   * 动态拼接参数\n   * @param {String} url 地址\n   * @param {String} key 参数名\n   * @param {String} val 参数值\n   * @returns {String} 地址\n   */\n  urlAddParams({ url, key, val }) {\n    return url.indexOf('?') !== -1 ? url + `&${key}=${val}` : url + `?${key}=${val}`\n  }\n  /**\n   * 初始化监听器\n   */\n  initListeners() {\n    this.listeners = {}\n  }\n  /**\n   * 事件订阅\n   * @param {Sting} eventName 事件名\n   * @param {Function} callback 回调函数\n   */\n  on(eventName, callback) {\n    if (this.listeners[eventName] && this.listeners[eventName].length) {\n      if (this.listeners[eventName].indexOf(callback) === -1) {\n        this.listeners[eventName].push(callback)\n      }\n    } else {\n      this.listeners[eventName] = [callback]\n    }\n  }\n  /**\n   * 发布事件\n   * @param {Sting} eventName 事件名\n   */\n  trigger(eventName) {\n    if (this.listeners[eventName]) {\n      for (let i = 0; i < this.listeners[eventName].length; i++) {\n        // [].slice.call(arguments, 1) => 将arguments转换成数组\n        this.listeners[eventName][i].apply(this, [].slice.call(arguments, 1))\n      }\n    }\n  }\n  /**\n   * 重置监听器\n   */\n  clearAll() {\n    let tmp = this.listeners['ready']\n    this.listeners = {}\n    this.listeners['ready'] = tmp\n  }\n}\n\nexport default Socket\n\n```\n\n","slug":"打造自己的Websocket组件","published":1,"updated":"2018-08-12T14:40:07.590Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjksf3cxb002qh8efn62633mq","content":"<h1 id=\"Websocket详解\"><a href=\"#Websocket详解\" class=\"headerlink\" title=\"Websocket详解\"></a>Websocket详解</h1><h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>WebSocket一种在单个 TCP 连接上进行全双工通讯的协议，它由通信协议和编程API组成，WebSocket能够在浏览器和服务器之间建立双向连接，以基于事件的方式，赋予浏览器实时通信能力。既然是双向通信，就意味着服务器端和客户端可以同时发送并响应请求，而不再像HTTP的请求和响应。</p>\n<h2 id=\"优点及适用场景\"><a href=\"#优点及适用场景\" class=\"headerlink\" title=\"优点及适用场景\"></a>优点及适用场景</h2><ol>\n<li><p>优点：</p>\n<ul>\n<li>跨域</li>\n<li>更好的二进制支持。Websocket定义了二进制帧，可以更轻松地处理二进制内容</li>\n<li>实时性</li>\n<li>长连接</li>\n</ul>\n</li>\n<li><p>适用场景：</p>\n<ul>\n<li>聊天</li>\n<li>文字直播</li>\n<li>实时消息推送</li>\n<li>数据实时更新</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h2><ol>\n<li>创建Websocket对象：<code>let ws = new Websocket(&#39;ws://localhost:8080&#39;)</code></li>\n<li><p>4个事件对象：</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当websocket连接建立成功时</span></span><br><span class=\"line\">ws.addEventListener(<span class=\"string\">'open'</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'websocket 建立连接'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\">// 当收到服务端的消息时</span></span><br><span class=\"line\">ws.addEventListener(<span class=\"string\">'message'</span>, (event) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'获得数据'</span>, event.data)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\">// 当websocket关闭时</span></span><br><span class=\"line\">ws.addEventListener(<span class=\"string\">'close'</span>, (event) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"websocket 连接关闭\"</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\">// 当出现错误时</span></span><br><span class=\"line\">ws.addEventListener(<span class=\"string\">'error'</span>, (event) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error(<span class=\"string\">\"websocket 出现错误\"</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2个方法：</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 发送消息 </span></span><br><span class=\"line\">ws.send(<span class=\"string\">'hello websocket'</span>)</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\">// 关闭socket</span></span><br><span class=\"line\">ws.close()</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"封装一个socket组件\"><a href=\"#封装一个socket组件\" class=\"headerlink\" title=\"封装一个socket组件\"></a>封装一个socket组件</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * websocket请求封装</span></span><br><span class=\"line\"><span class=\"comment\"> * @class</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Socket</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * @constructs Socket</span></span><br><span class=\"line\"><span class=\"comment\">   * @param &#123;String&#125; url 创建地址</span></span><br><span class=\"line\"><span class=\"comment\">   * @param &#123;Boolean&#125; isNeedReconnect 是否需要断开重连机制</span></span><br><span class=\"line\"><span class=\"comment\">   * @param &#123;Number&#125; reconnectLimit 重连次数上限</span></span><br><span class=\"line\"><span class=\"comment\">   * @param &#123;Function&#125; openCallback 连接建立成功回调函数</span></span><br><span class=\"line\"><span class=\"comment\">   * @param &#123;Function&#125; messageCallback 监听消息回调函数</span></span><br><span class=\"line\"><span class=\"comment\">   * @param &#123;Function&#125; closeCallback 关闭连接回调函数</span></span><br><span class=\"line\"><span class=\"comment\">   * @param &#123;Function&#125; errorCallback 异常回调函数</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(&#123; url, isNeedReconnect, reconnectLimit, openCallback, messageCallback, closeCallback, errorCallback &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.url = url</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.isNeedReconnect = isNeedReconnect</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.reconnectLimit = reconnectLimit || <span class=\"number\">7</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.openCallback = openCallback</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.messageCallback = messageCallback</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.closeCallback = closeCallback</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.errorCallback = errorCallback</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.socket</span><br><span class=\"line\">    <span class=\"comment\">// 重连标识，避免重复重连</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.isInReconnect = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"comment\">// 重连次数</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.reconnectCount = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.createSocket(&#123; <span class=\"attr\">url</span>: <span class=\"keyword\">this</span>.url &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 初始化websocket</span></span><br><span class=\"line\"><span class=\"comment\">   * @param &#123;String&#125; url 创建地址</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  createSocket(&#123; url &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.initListeners()</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.socket = <span class=\"keyword\">new</span> WebSocket(url)</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.initEventMonitor()</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.error(<span class=\"string\">'WebSocket创建连接失败'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 初始化ws事件监听</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  initEventMonitor() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onOpen()</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onMessage()</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onClose()</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onError()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 建立连接函数</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  onOpen() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.socket.addEventListener(<span class=\"string\">'open'</span>, () =&gt; &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 一旦建立成功，重置重连次数</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.reconnectCount = <span class=\"number\">0</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.stopHeartBeat()</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.startHeartBeat()</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.clearAll()</span><br><span class=\"line\">      <span class=\"comment\">// 建立成功标识</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.trigger(<span class=\"string\">'websocketReady'</span>)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.openCallback) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.openCallback(event)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 接收数据函数</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  onMessage() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.socket.addEventListener(<span class=\"string\">'message'</span>, (event) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.refreshServerTimer()</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.messageCallback) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.messageCallback(event.data)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 关闭处理函数</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  onClose() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.socket.addEventListener(<span class=\"string\">'close'</span>, (event) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.error(<span class=\"string\">'WebSocket连接关闭，状态码：'</span> + event.code)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.closeCallback) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.closeCallback(event)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 需要重连并且重连次数小于等于重连上限</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.isNeedReconnect &amp;&amp; <span class=\"keyword\">this</span>.reconnectCount &lt;= <span class=\"keyword\">this</span>.reconnectLimit) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.reconnect()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 错误处理函数</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  onError() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.socket.addEventListener(<span class=\"string\">'error'</span>, (event) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.error(<span class=\"string\">'WebSocket in error'</span>)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.errorCallback) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.errorCallback(event)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.doClose(&#123; <span class=\"attr\">isNeedClose</span>: <span class=\"literal\">false</span> &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 发送消息</span></span><br><span class=\"line\"><span class=\"comment\">   * @param &#123;Object&#125; params 参数对象</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  sendMessage(params) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 发送时先判断连接是否关闭</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.isSocketCloseing() || <span class=\"keyword\">this</span>.isSocketClose()) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 需要重连，并且连接次数已经超过了上限（之前就触发过自动重连，并且在上限之内没有连接上）</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.reconnectCount &gt; <span class=\"keyword\">this</span>.reconnectLimit &amp;&amp; <span class=\"keyword\">this</span>.isNeedReconnect) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 重置连接次数</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.reconnectCount = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.reconnect()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果已经成功的建立了链接，则直接发送，否则监听websocketReady成功再发送</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.isSocketOpen()) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.socket.send(<span class=\"built_in\">JSON</span>.stringify(params))</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'发送参数'</span>, params)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 监听websocketReady事件，发送消息</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.on(<span class=\"string\">'websocketReady'</span>, () =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.socket.send(<span class=\"built_in\">JSON</span>.stringify(params))</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'发送参数'</span>, params)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 重连机制</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  reconnect() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.isInReconnect) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.isInReconnect = <span class=\"literal\">true</span></span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// url生成一个参数标识告知服务端是重连的请求（服务端可以不处理）</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.createSocket(&#123; <span class=\"attr\">url</span>: <span class=\"keyword\">this</span>.urlAddParams(&#123; <span class=\"attr\">url</span>: <span class=\"keyword\">this</span>.url, <span class=\"attr\">key</span>: <span class=\"string\">'reconnect'</span>, <span class=\"attr\">val</span>: <span class=\"string\">'true'</span> &#125;) &#125;)</span><br><span class=\"line\">      <span class=\"comment\">// 重连次数加1</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.reconnectCount++</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.isInReconnect = <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;, <span class=\"number\">2000</span> * <span class=\"keyword\">this</span>.reconnectCount)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 关闭socket</span></span><br><span class=\"line\"><span class=\"comment\">   * @param &#123;Boolean&#125; isNeedClose 是否需要真的关闭socket</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  doClose(&#123; isNeedClose &#125;) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 判断是否关闭标识来决定是否需要重连</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.isNeedReconnect = isNeedClose ? <span class=\"literal\">false</span> : <span class=\"literal\">true</span></span><br><span class=\"line\">    clearTimeout(<span class=\"keyword\">this</span>.serverHeartBeatTimer)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.stopHeartBeat()</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.socket.close()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 开始心跳机制(15秒发送一次ping)</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  startHeartBeat() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.heartBeatTimer = setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.socket.send(<span class=\"string\">'ping'</span>)</span><br><span class=\"line\">    &#125;, <span class=\"number\">15000</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 停止心跳机制</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  stopHeartBeat() &#123;</span><br><span class=\"line\">    clearInterval(<span class=\"keyword\">this</span>.heartBeatTimer)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 超时掉线计时（1分钟超时）</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  refreshServerTimer() &#123;</span><br><span class=\"line\">    clearTimeout(<span class=\"keyword\">this</span>.serverHeartBeatTimer)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.serverHeartBeatTimer = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.doClose(&#123; <span class=\"attr\">isNeedClose</span>: <span class=\"literal\">false</span> &#125;)</span><br><span class=\"line\">    &#125;, <span class=\"number\">60000</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 检查socket是否正在连接</span></span><br><span class=\"line\"><span class=\"comment\">   * @return &#123;Boolean&#125; 是否正在连接</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  isSocketConnecting() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.socket.readyState === WebSocket.CONNECTING</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 检查socket是否连接成功</span></span><br><span class=\"line\"><span class=\"comment\">   * @return &#123;Boolean&#125; 是否建立连接成功</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  isSocketOpen() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.socket.readyState === WebSocket.OPEN</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 检查socket是否正在关闭</span></span><br><span class=\"line\"><span class=\"comment\">   * @return &#123;Boolean&#125; 是否正在关闭</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  isSocketCloseing() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.socket.readyState === WebSocket.CLOSING</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 检查socket是否已经关闭</span></span><br><span class=\"line\"><span class=\"comment\">   * @return &#123;Boolean&#125; 是否已经关闭</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  isSocketClose() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.socket.readyState === WebSocket.CLOSED</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 动态拼接参数</span></span><br><span class=\"line\"><span class=\"comment\">   * @param &#123;String&#125; url 地址</span></span><br><span class=\"line\"><span class=\"comment\">   * @param &#123;String&#125; key 参数名</span></span><br><span class=\"line\"><span class=\"comment\">   * @param &#123;String&#125; val 参数值</span></span><br><span class=\"line\"><span class=\"comment\">   * @returns &#123;String&#125; 地址</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  urlAddParams(&#123; url, key, val &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> url.indexOf(<span class=\"string\">'?'</span>) !== <span class=\"number\">-1</span> ? url + <span class=\"string\">`&amp;<span class=\"subst\">$&#123;key&#125;</span>=<span class=\"subst\">$&#123;val&#125;</span>`</span> : url + <span class=\"string\">`?<span class=\"subst\">$&#123;key&#125;</span>=<span class=\"subst\">$&#123;val&#125;</span>`</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 初始化监听器</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  initListeners() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.listeners = &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 事件订阅</span></span><br><span class=\"line\"><span class=\"comment\">   * @param &#123;Sting&#125; eventName 事件名</span></span><br><span class=\"line\"><span class=\"comment\">   * @param &#123;Function&#125; callback 回调函数</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  on(eventName, callback) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.listeners[eventName] &amp;&amp; <span class=\"keyword\">this</span>.listeners[eventName].length) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.listeners[eventName].indexOf(callback) === <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.listeners[eventName].push(callback)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.listeners[eventName] = [callback]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 发布事件</span></span><br><span class=\"line\"><span class=\"comment\">   * @param &#123;Sting&#125; eventName 事件名</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  trigger(eventName) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.listeners[eventName]) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.listeners[eventName].length; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// [].slice.call(arguments, 1) =&gt; 将arguments转换成数组</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.listeners[eventName][i].apply(<span class=\"keyword\">this</span>, [].slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>))</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 重置监听器</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  clearAll() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tmp = <span class=\"keyword\">this</span>.listeners[<span class=\"string\">'ready'</span>]</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.listeners = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.listeners[<span class=\"string\">'ready'</span>] = tmp</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Socket</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Websocket详解\"><a href=\"#Websocket详解\" class=\"headerlink\" title=\"Websocket详解\"></a>Websocket详解</h1><h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>WebSocket一种在单个 TCP 连接上进行全双工通讯的协议，它由通信协议和编程API组成，WebSocket能够在浏览器和服务器之间建立双向连接，以基于事件的方式，赋予浏览器实时通信能力。既然是双向通信，就意味着服务器端和客户端可以同时发送并响应请求，而不再像HTTP的请求和响应。</p>\n<h2 id=\"优点及适用场景\"><a href=\"#优点及适用场景\" class=\"headerlink\" title=\"优点及适用场景\"></a>优点及适用场景</h2><ol>\n<li><p>优点：</p>\n<ul>\n<li>跨域</li>\n<li>更好的二进制支持。Websocket定义了二进制帧，可以更轻松地处理二进制内容</li>\n<li>实时性</li>\n<li>长连接</li>\n</ul>\n</li>\n<li><p>适用场景：</p>\n<ul>\n<li>聊天</li>\n<li>文字直播</li>\n<li>实时消息推送</li>\n<li>数据实时更新</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h2><ol>\n<li>创建Websocket对象：<code>let ws = new Websocket(&#39;ws://localhost:8080&#39;)</code></li>\n<li><p>4个事件对象：</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当websocket连接建立成功时</span></span><br><span class=\"line\">ws.addEventListener(<span class=\"string\">'open'</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'websocket 建立连接'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\">// 当收到服务端的消息时</span></span><br><span class=\"line\">ws.addEventListener(<span class=\"string\">'message'</span>, (event) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'获得数据'</span>, event.data)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\">// 当websocket关闭时</span></span><br><span class=\"line\">ws.addEventListener(<span class=\"string\">'close'</span>, (event) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"websocket 连接关闭\"</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\">// 当出现错误时</span></span><br><span class=\"line\">ws.addEventListener(<span class=\"string\">'error'</span>, (event) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error(<span class=\"string\">\"websocket 出现错误\"</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2个方法：</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 发送消息 </span></span><br><span class=\"line\">ws.send(<span class=\"string\">'hello websocket'</span>)</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\">// 关闭socket</span></span><br><span class=\"line\">ws.close()</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"封装一个socket组件\"><a href=\"#封装一个socket组件\" class=\"headerlink\" title=\"封装一个socket组件\"></a>封装一个socket组件</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * websocket请求封装</span></span><br><span class=\"line\"><span class=\"comment\"> * @class</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Socket</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * @constructs Socket</span></span><br><span class=\"line\"><span class=\"comment\">   * @param &#123;String&#125; url 创建地址</span></span><br><span class=\"line\"><span class=\"comment\">   * @param &#123;Boolean&#125; isNeedReconnect 是否需要断开重连机制</span></span><br><span class=\"line\"><span class=\"comment\">   * @param &#123;Number&#125; reconnectLimit 重连次数上限</span></span><br><span class=\"line\"><span class=\"comment\">   * @param &#123;Function&#125; openCallback 连接建立成功回调函数</span></span><br><span class=\"line\"><span class=\"comment\">   * @param &#123;Function&#125; messageCallback 监听消息回调函数</span></span><br><span class=\"line\"><span class=\"comment\">   * @param &#123;Function&#125; closeCallback 关闭连接回调函数</span></span><br><span class=\"line\"><span class=\"comment\">   * @param &#123;Function&#125; errorCallback 异常回调函数</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(&#123; url, isNeedReconnect, reconnectLimit, openCallback, messageCallback, closeCallback, errorCallback &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.url = url</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.isNeedReconnect = isNeedReconnect</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.reconnectLimit = reconnectLimit || <span class=\"number\">7</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.openCallback = openCallback</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.messageCallback = messageCallback</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.closeCallback = closeCallback</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.errorCallback = errorCallback</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.socket</span><br><span class=\"line\">    <span class=\"comment\">// 重连标识，避免重复重连</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.isInReconnect = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"comment\">// 重连次数</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.reconnectCount = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.createSocket(&#123; <span class=\"attr\">url</span>: <span class=\"keyword\">this</span>.url &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 初始化websocket</span></span><br><span class=\"line\"><span class=\"comment\">   * @param &#123;String&#125; url 创建地址</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  createSocket(&#123; url &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.initListeners()</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.socket = <span class=\"keyword\">new</span> WebSocket(url)</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.initEventMonitor()</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.error(<span class=\"string\">'WebSocket创建连接失败'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 初始化ws事件监听</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  initEventMonitor() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onOpen()</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onMessage()</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onClose()</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onError()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 建立连接函数</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  onOpen() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.socket.addEventListener(<span class=\"string\">'open'</span>, () =&gt; &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 一旦建立成功，重置重连次数</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.reconnectCount = <span class=\"number\">0</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.stopHeartBeat()</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.startHeartBeat()</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.clearAll()</span><br><span class=\"line\">      <span class=\"comment\">// 建立成功标识</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.trigger(<span class=\"string\">'websocketReady'</span>)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.openCallback) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.openCallback(event)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 接收数据函数</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  onMessage() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.socket.addEventListener(<span class=\"string\">'message'</span>, (event) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.refreshServerTimer()</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.messageCallback) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.messageCallback(event.data)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 关闭处理函数</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  onClose() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.socket.addEventListener(<span class=\"string\">'close'</span>, (event) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.error(<span class=\"string\">'WebSocket连接关闭，状态码：'</span> + event.code)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.closeCallback) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.closeCallback(event)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 需要重连并且重连次数小于等于重连上限</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.isNeedReconnect &amp;&amp; <span class=\"keyword\">this</span>.reconnectCount &lt;= <span class=\"keyword\">this</span>.reconnectLimit) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.reconnect()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 错误处理函数</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  onError() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.socket.addEventListener(<span class=\"string\">'error'</span>, (event) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.error(<span class=\"string\">'WebSocket in error'</span>)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.errorCallback) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.errorCallback(event)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.doClose(&#123; <span class=\"attr\">isNeedClose</span>: <span class=\"literal\">false</span> &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 发送消息</span></span><br><span class=\"line\"><span class=\"comment\">   * @param &#123;Object&#125; params 参数对象</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  sendMessage(params) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 发送时先判断连接是否关闭</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.isSocketCloseing() || <span class=\"keyword\">this</span>.isSocketClose()) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 需要重连，并且连接次数已经超过了上限（之前就触发过自动重连，并且在上限之内没有连接上）</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.reconnectCount &gt; <span class=\"keyword\">this</span>.reconnectLimit &amp;&amp; <span class=\"keyword\">this</span>.isNeedReconnect) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 重置连接次数</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.reconnectCount = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.reconnect()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果已经成功的建立了链接，则直接发送，否则监听websocketReady成功再发送</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.isSocketOpen()) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.socket.send(<span class=\"built_in\">JSON</span>.stringify(params))</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'发送参数'</span>, params)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 监听websocketReady事件，发送消息</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.on(<span class=\"string\">'websocketReady'</span>, () =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.socket.send(<span class=\"built_in\">JSON</span>.stringify(params))</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'发送参数'</span>, params)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 重连机制</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  reconnect() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.isInReconnect) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.isInReconnect = <span class=\"literal\">true</span></span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// url生成一个参数标识告知服务端是重连的请求（服务端可以不处理）</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.createSocket(&#123; <span class=\"attr\">url</span>: <span class=\"keyword\">this</span>.urlAddParams(&#123; <span class=\"attr\">url</span>: <span class=\"keyword\">this</span>.url, <span class=\"attr\">key</span>: <span class=\"string\">'reconnect'</span>, <span class=\"attr\">val</span>: <span class=\"string\">'true'</span> &#125;) &#125;)</span><br><span class=\"line\">      <span class=\"comment\">// 重连次数加1</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.reconnectCount++</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.isInReconnect = <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;, <span class=\"number\">2000</span> * <span class=\"keyword\">this</span>.reconnectCount)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 关闭socket</span></span><br><span class=\"line\"><span class=\"comment\">   * @param &#123;Boolean&#125; isNeedClose 是否需要真的关闭socket</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  doClose(&#123; isNeedClose &#125;) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 判断是否关闭标识来决定是否需要重连</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.isNeedReconnect = isNeedClose ? <span class=\"literal\">false</span> : <span class=\"literal\">true</span></span><br><span class=\"line\">    clearTimeout(<span class=\"keyword\">this</span>.serverHeartBeatTimer)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.stopHeartBeat()</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.socket.close()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 开始心跳机制(15秒发送一次ping)</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  startHeartBeat() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.heartBeatTimer = setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.socket.send(<span class=\"string\">'ping'</span>)</span><br><span class=\"line\">    &#125;, <span class=\"number\">15000</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 停止心跳机制</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  stopHeartBeat() &#123;</span><br><span class=\"line\">    clearInterval(<span class=\"keyword\">this</span>.heartBeatTimer)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 超时掉线计时（1分钟超时）</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  refreshServerTimer() &#123;</span><br><span class=\"line\">    clearTimeout(<span class=\"keyword\">this</span>.serverHeartBeatTimer)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.serverHeartBeatTimer = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.doClose(&#123; <span class=\"attr\">isNeedClose</span>: <span class=\"literal\">false</span> &#125;)</span><br><span class=\"line\">    &#125;, <span class=\"number\">60000</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 检查socket是否正在连接</span></span><br><span class=\"line\"><span class=\"comment\">   * @return &#123;Boolean&#125; 是否正在连接</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  isSocketConnecting() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.socket.readyState === WebSocket.CONNECTING</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 检查socket是否连接成功</span></span><br><span class=\"line\"><span class=\"comment\">   * @return &#123;Boolean&#125; 是否建立连接成功</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  isSocketOpen() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.socket.readyState === WebSocket.OPEN</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 检查socket是否正在关闭</span></span><br><span class=\"line\"><span class=\"comment\">   * @return &#123;Boolean&#125; 是否正在关闭</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  isSocketCloseing() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.socket.readyState === WebSocket.CLOSING</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 检查socket是否已经关闭</span></span><br><span class=\"line\"><span class=\"comment\">   * @return &#123;Boolean&#125; 是否已经关闭</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  isSocketClose() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.socket.readyState === WebSocket.CLOSED</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 动态拼接参数</span></span><br><span class=\"line\"><span class=\"comment\">   * @param &#123;String&#125; url 地址</span></span><br><span class=\"line\"><span class=\"comment\">   * @param &#123;String&#125; key 参数名</span></span><br><span class=\"line\"><span class=\"comment\">   * @param &#123;String&#125; val 参数值</span></span><br><span class=\"line\"><span class=\"comment\">   * @returns &#123;String&#125; 地址</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  urlAddParams(&#123; url, key, val &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> url.indexOf(<span class=\"string\">'?'</span>) !== <span class=\"number\">-1</span> ? url + <span class=\"string\">`&amp;<span class=\"subst\">$&#123;key&#125;</span>=<span class=\"subst\">$&#123;val&#125;</span>`</span> : url + <span class=\"string\">`?<span class=\"subst\">$&#123;key&#125;</span>=<span class=\"subst\">$&#123;val&#125;</span>`</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 初始化监听器</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  initListeners() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.listeners = &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 事件订阅</span></span><br><span class=\"line\"><span class=\"comment\">   * @param &#123;Sting&#125; eventName 事件名</span></span><br><span class=\"line\"><span class=\"comment\">   * @param &#123;Function&#125; callback 回调函数</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  on(eventName, callback) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.listeners[eventName] &amp;&amp; <span class=\"keyword\">this</span>.listeners[eventName].length) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.listeners[eventName].indexOf(callback) === <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.listeners[eventName].push(callback)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.listeners[eventName] = [callback]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 发布事件</span></span><br><span class=\"line\"><span class=\"comment\">   * @param &#123;Sting&#125; eventName 事件名</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  trigger(eventName) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.listeners[eventName]) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.listeners[eventName].length; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// [].slice.call(arguments, 1) =&gt; 将arguments转换成数组</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.listeners[eventName][i].apply(<span class=\"keyword\">this</span>, [].slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>))</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 重置监听器</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  clearAll() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tmp = <span class=\"keyword\">this</span>.listeners[<span class=\"string\">'ready'</span>]</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.listeners = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.listeners[<span class=\"string\">'ready'</span>] = tmp</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Socket</span><br></pre></td></tr></table></figure>\n"},{"title":"深入理解this关键字","date":"2018-02-10T00:56:00.000Z","description":"谈谈对this关键字的认识","_content":"# 关于this\n\n1. this关键字是JavaScript中最复杂的机制之一，它是一个很特别的关键字，被**自动**定义到所有的函数作用域中。\n2. this提供了一种更优雅的的方式来\"隐式\"传递一个对象的引用，因此可以将API设计的更加简洁易用。\n3. this在任何情况下都不指向函数的词法作用域，也不指向函数自身。\n4. this实际上是在函数被调用时发生绑定，它指向什么完全取决于函数在哪里被调用。\n5. this 总是指向调用它的那个对象，如果没有明确调用对象，则指向 window，在 node 环境中指向 Global 对象。\n\n> 注：在严格模式下，this 禁止指向 window 对象\n\n# 绑定规则\n\n1. 默认绑定\n\n    函数不带任何修饰的函数引用进行调用的，只能是默认绑定，非严格模式下this指向window对象，严格模式下为undefined，例如：\n\n\t```javascript\n\tvar x = 1;\n\t\n\tfunction test() {\n\t    this.x = 2;\n\t}\n\ttest();\n\tconsole.log(x); // 2\n\t```\n\n2. 隐式绑定\n\n    当函数的调用有调用对象时，this会根据对象属性引用链的最后一层来决定指向哪个对象，例如：\n\t```javascript\n\tfunction test() {\n\t    console.log(this.x)\n\t}\n\tvar obj = {};\n\tobj.x = 1;\n\tobj.fun = test;\n\tobj.fun(); // 1\n\t```\n\n3. 显式绑定\n\n    JavaScript提供绝的大多数函数，以及自己创建的函数都可以使用call()和apply()方法进行显式绑定，该方法的第一个参数是一个对象，给this准备的。例如：\n\t```javascript\n\t var x = 0;\n\t\n\t function test() {\n\t     console.log(this.x);\n\t }\n\t var obj = {};\n\t obj.x = 3;\n\t obj.fun = test;\n\t\n\t obj.fun().apply(); // 0 没有参数默认指向window对象\n\t obj.fun().apply(obj); // 3 指定了this指向了obj\n\t```\n\n4. new关键字绑定\n\n    通过构造函数通过new关键字生成一个新对象，这时 this 指向该新对象。例如：\n\n\t```javascript\n\tvar x = 0;\n\t\n\tfunction Test() {\n\t    this.x = 3;\n\t}\n\t\n\tvar obj = new Test();\n\tconsole.log(x); // 0 全局对象的值根本没变\n\tconsole.log(obj.x); // 3\n\t```\n\n> 注：绑定优先级：new>显式绑定>隐式绑定>默认绑定\n\n# 绑定例外\n\n当把null或者undefined作为this的绑定对象传入call或apply方法中，这些值在调用时会被忽略，this应用默认绑定规则。\n\n# 箭头函数\n\n箭头函数中的this并不遵守上述4个绑定规则，而是根据外层的作用域来决定this的绑定的。例如：\n\n```javascript\nfunction foo() {\n    setTimeout(() => {\n        console.log(this.a);\n    }, 100);\n}\nvar bar = {\n    a: 2\n};\nfoo.call(bar); // 2\n```\n\n","source":"_posts/深入理解this关键字.md","raw":"---\ntitle: 深入理解this关键字\ndate: 2018-02-10 08:56:00\ncategories: JS实战\ntags:\n     - JavaScript\ndescription: 谈谈对this关键字的认识\n---\n# 关于this\n\n1. this关键字是JavaScript中最复杂的机制之一，它是一个很特别的关键字，被**自动**定义到所有的函数作用域中。\n2. this提供了一种更优雅的的方式来\"隐式\"传递一个对象的引用，因此可以将API设计的更加简洁易用。\n3. this在任何情况下都不指向函数的词法作用域，也不指向函数自身。\n4. this实际上是在函数被调用时发生绑定，它指向什么完全取决于函数在哪里被调用。\n5. this 总是指向调用它的那个对象，如果没有明确调用对象，则指向 window，在 node 环境中指向 Global 对象。\n\n> 注：在严格模式下，this 禁止指向 window 对象\n\n# 绑定规则\n\n1. 默认绑定\n\n    函数不带任何修饰的函数引用进行调用的，只能是默认绑定，非严格模式下this指向window对象，严格模式下为undefined，例如：\n\n\t```javascript\n\tvar x = 1;\n\t\n\tfunction test() {\n\t    this.x = 2;\n\t}\n\ttest();\n\tconsole.log(x); // 2\n\t```\n\n2. 隐式绑定\n\n    当函数的调用有调用对象时，this会根据对象属性引用链的最后一层来决定指向哪个对象，例如：\n\t```javascript\n\tfunction test() {\n\t    console.log(this.x)\n\t}\n\tvar obj = {};\n\tobj.x = 1;\n\tobj.fun = test;\n\tobj.fun(); // 1\n\t```\n\n3. 显式绑定\n\n    JavaScript提供绝的大多数函数，以及自己创建的函数都可以使用call()和apply()方法进行显式绑定，该方法的第一个参数是一个对象，给this准备的。例如：\n\t```javascript\n\t var x = 0;\n\t\n\t function test() {\n\t     console.log(this.x);\n\t }\n\t var obj = {};\n\t obj.x = 3;\n\t obj.fun = test;\n\t\n\t obj.fun().apply(); // 0 没有参数默认指向window对象\n\t obj.fun().apply(obj); // 3 指定了this指向了obj\n\t```\n\n4. new关键字绑定\n\n    通过构造函数通过new关键字生成一个新对象，这时 this 指向该新对象。例如：\n\n\t```javascript\n\tvar x = 0;\n\t\n\tfunction Test() {\n\t    this.x = 3;\n\t}\n\t\n\tvar obj = new Test();\n\tconsole.log(x); // 0 全局对象的值根本没变\n\tconsole.log(obj.x); // 3\n\t```\n\n> 注：绑定优先级：new>显式绑定>隐式绑定>默认绑定\n\n# 绑定例外\n\n当把null或者undefined作为this的绑定对象传入call或apply方法中，这些值在调用时会被忽略，this应用默认绑定规则。\n\n# 箭头函数\n\n箭头函数中的this并不遵守上述4个绑定规则，而是根据外层的作用域来决定this的绑定的。例如：\n\n```javascript\nfunction foo() {\n    setTimeout(() => {\n        console.log(this.a);\n    }, 100);\n}\nvar bar = {\n    a: 2\n};\nfoo.call(bar); // 2\n```\n\n","slug":"深入理解this关键字","published":1,"updated":"2018-03-07T00:37:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjksf3cxd002th8efxr60bfve","content":"<h1 id=\"关于this\"><a href=\"#关于this\" class=\"headerlink\" title=\"关于this\"></a>关于this</h1><ol>\n<li>this关键字是JavaScript中最复杂的机制之一，它是一个很特别的关键字，被<strong>自动</strong>定义到所有的函数作用域中。</li>\n<li>this提供了一种更优雅的的方式来”隐式”传递一个对象的引用，因此可以将API设计的更加简洁易用。</li>\n<li>this在任何情况下都不指向函数的词法作用域，也不指向函数自身。</li>\n<li>this实际上是在函数被调用时发生绑定，它指向什么完全取决于函数在哪里被调用。</li>\n<li>this 总是指向调用它的那个对象，如果没有明确调用对象，则指向 window，在 node 环境中指向 Global 对象。</li>\n</ol>\n<blockquote>\n<p>注：在严格模式下，this 禁止指向 window 对象</p>\n</blockquote>\n<h1 id=\"绑定规则\"><a href=\"#绑定规则\" class=\"headerlink\" title=\"绑定规则\"></a>绑定规则</h1><ol>\n<li><p>默认绑定</p>\n<p> 函数不带任何修饰的函数引用进行调用的，只能是默认绑定，非严格模式下this指向window对象，严格模式下为undefined，例如：</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.x = <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x); <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>隐式绑定</p>\n<p> 当函数的调用有调用对象时，this会根据对象属性引用链的最后一层来决定指向哪个对象，例如：</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.x)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\">obj.x = <span class=\"number\">1</span>;</span><br><span class=\"line\">obj.fun = test;</span><br><span class=\"line\">obj.fun(); <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>显式绑定</p>\n<p> JavaScript提供绝的大多数函数，以及自己创建的函数都可以使用call()和apply()方法进行显式绑定，该方法的第一个参数是一个对象，给this准备的。例如：</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\">obj.x = <span class=\"number\">3</span>;</span><br><span class=\"line\">obj.fun = test;</span><br><span class=\"line\">\t</span><br><span class=\"line\">obj.fun().apply(); <span class=\"comment\">// 0 没有参数默认指向window对象</span></span><br><span class=\"line\">obj.fun().apply(obj); <span class=\"comment\">// 3 指定了this指向了obj</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>new关键字绑定</p>\n<p> 通过构造函数通过new关键字生成一个新对象，这时 this 指向该新对象。例如：</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.x = <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> Test();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x); <span class=\"comment\">// 0 全局对象的值根本没变</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.x); <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<blockquote>\n<p>注：绑定优先级：new&gt;显式绑定&gt;隐式绑定&gt;默认绑定</p>\n</blockquote>\n<h1 id=\"绑定例外\"><a href=\"#绑定例外\" class=\"headerlink\" title=\"绑定例外\"></a>绑定例外</h1><p>当把null或者undefined作为this的绑定对象传入call或apply方法中，这些值在调用时会被忽略，this应用默认绑定规则。</p>\n<h1 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h1><p>箭头函数中的this并不遵守上述4个绑定规则，而是根据外层的作用域来决定this的绑定的。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.a);</span><br><span class=\"line\">    &#125;, <span class=\"number\">100</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = &#123;</span><br><span class=\"line\">    a: <span class=\"number\">2</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">foo.call(bar); <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"关于this\"><a href=\"#关于this\" class=\"headerlink\" title=\"关于this\"></a>关于this</h1><ol>\n<li>this关键字是JavaScript中最复杂的机制之一，它是一个很特别的关键字，被<strong>自动</strong>定义到所有的函数作用域中。</li>\n<li>this提供了一种更优雅的的方式来”隐式”传递一个对象的引用，因此可以将API设计的更加简洁易用。</li>\n<li>this在任何情况下都不指向函数的词法作用域，也不指向函数自身。</li>\n<li>this实际上是在函数被调用时发生绑定，它指向什么完全取决于函数在哪里被调用。</li>\n<li>this 总是指向调用它的那个对象，如果没有明确调用对象，则指向 window，在 node 环境中指向 Global 对象。</li>\n</ol>\n<blockquote>\n<p>注：在严格模式下，this 禁止指向 window 对象</p>\n</blockquote>\n<h1 id=\"绑定规则\"><a href=\"#绑定规则\" class=\"headerlink\" title=\"绑定规则\"></a>绑定规则</h1><ol>\n<li><p>默认绑定</p>\n<p> 函数不带任何修饰的函数引用进行调用的，只能是默认绑定，非严格模式下this指向window对象，严格模式下为undefined，例如：</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.x = <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x); <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>隐式绑定</p>\n<p> 当函数的调用有调用对象时，this会根据对象属性引用链的最后一层来决定指向哪个对象，例如：</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.x)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\">obj.x = <span class=\"number\">1</span>;</span><br><span class=\"line\">obj.fun = test;</span><br><span class=\"line\">obj.fun(); <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>显式绑定</p>\n<p> JavaScript提供绝的大多数函数，以及自己创建的函数都可以使用call()和apply()方法进行显式绑定，该方法的第一个参数是一个对象，给this准备的。例如：</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\">obj.x = <span class=\"number\">3</span>;</span><br><span class=\"line\">obj.fun = test;</span><br><span class=\"line\">\t</span><br><span class=\"line\">obj.fun().apply(); <span class=\"comment\">// 0 没有参数默认指向window对象</span></span><br><span class=\"line\">obj.fun().apply(obj); <span class=\"comment\">// 3 指定了this指向了obj</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>new关键字绑定</p>\n<p> 通过构造函数通过new关键字生成一个新对象，这时 this 指向该新对象。例如：</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.x = <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> Test();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x); <span class=\"comment\">// 0 全局对象的值根本没变</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.x); <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<blockquote>\n<p>注：绑定优先级：new&gt;显式绑定&gt;隐式绑定&gt;默认绑定</p>\n</blockquote>\n<h1 id=\"绑定例外\"><a href=\"#绑定例外\" class=\"headerlink\" title=\"绑定例外\"></a>绑定例外</h1><p>当把null或者undefined作为this的绑定对象传入call或apply方法中，这些值在调用时会被忽略，this应用默认绑定规则。</p>\n<h1 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h1><p>箭头函数中的this并不遵守上述4个绑定规则，而是根据外层的作用域来决定this的绑定的。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.a);</span><br><span class=\"line\">    &#125;, <span class=\"number\">100</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = &#123;</span><br><span class=\"line\">    a: <span class=\"number\">2</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">foo.call(bar); <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n"},{"title":"玩转JS函数节流和函数防抖","date":"2018-06-30T15:04:19.000Z","description":"理解函数节流和函数防抖","_content":"# 函数防抖\n\n## 定义\n\n事件在触发后的n秒执行回调，如果在n秒内多次触发回调函数，则回调函数只执行一次。\n例如：有人进入电梯，电梯会在一定5秒后启动，如果又有人进入电梯，则电梯需要再等5秒才启动\n\n> 事件多次触发只执行一次\n\n## 适用场景\n\n1. 防止多次提交\n2. 监听滚动事件，触发回调\n3. 监听输入框输入，执行对应方法时\n\n## 示例\n\n```javascript\n  /**\n   * 防抖函数\n   * @param  {Function} func  要执行防抖的函数\n   * @param  {Number} delay   延迟时间\n   * @return {Function}       执行防抖函数的函数\n   */\n  debounce(func, delay) {\n      let timer = null;\n      return function(...args) {\n          if (timer) {\n              clearTimeout(timer);\n          }\n          timer = setTimeout(() => {\n              func.apply(this, args);\n          }, delay);\n      };\n  }\n```\n\n# 函数节流\n\n## 定义\n\n函数在单位时间内只能触发一次，如果在单位时间内多次触发，只能生效一次。\n例如：动画的播放，一秒钟只播放24张图片\n\n> 大量事件按一定平均频率触发\n\n## 适用场景\n\n1. 页面刷新频率\n2. Dom元素拖拽\n3. Canvas动画\n\n## 示例\n\n```javascript\n/**\n * 节流函数\n * @param  {Function} func  要执行节流的函数\n * @param  {Number} gapTime 间隔时间\n * @return {Function}       执行节流函数的函数\n */\nfunction throttle(fun, gapTime) {\n    let _lastTime = null;\n\n    return function() {\n        let _nowTime = +new Date()\n        if (_nowTime - _lastTime > gapTime || !_lastTime) {\n            fun();\n            _lastTime = _nowTime\n        }\n    }\n}\n```\n\n","source":"_posts/玩转JS函数节流和函数防抖.md","raw":"---\ntitle: 玩转JS函数节流和函数防抖\ndate: 2018-06-30 23:04:19\ncategories: JS实战\ntags:\n     - JavaScript\ndescription: 理解函数节流和函数防抖\n---\n# 函数防抖\n\n## 定义\n\n事件在触发后的n秒执行回调，如果在n秒内多次触发回调函数，则回调函数只执行一次。\n例如：有人进入电梯，电梯会在一定5秒后启动，如果又有人进入电梯，则电梯需要再等5秒才启动\n\n> 事件多次触发只执行一次\n\n## 适用场景\n\n1. 防止多次提交\n2. 监听滚动事件，触发回调\n3. 监听输入框输入，执行对应方法时\n\n## 示例\n\n```javascript\n  /**\n   * 防抖函数\n   * @param  {Function} func  要执行防抖的函数\n   * @param  {Number} delay   延迟时间\n   * @return {Function}       执行防抖函数的函数\n   */\n  debounce(func, delay) {\n      let timer = null;\n      return function(...args) {\n          if (timer) {\n              clearTimeout(timer);\n          }\n          timer = setTimeout(() => {\n              func.apply(this, args);\n          }, delay);\n      };\n  }\n```\n\n# 函数节流\n\n## 定义\n\n函数在单位时间内只能触发一次，如果在单位时间内多次触发，只能生效一次。\n例如：动画的播放，一秒钟只播放24张图片\n\n> 大量事件按一定平均频率触发\n\n## 适用场景\n\n1. 页面刷新频率\n2. Dom元素拖拽\n3. Canvas动画\n\n## 示例\n\n```javascript\n/**\n * 节流函数\n * @param  {Function} func  要执行节流的函数\n * @param  {Number} gapTime 间隔时间\n * @return {Function}       执行节流函数的函数\n */\nfunction throttle(fun, gapTime) {\n    let _lastTime = null;\n\n    return function() {\n        let _nowTime = +new Date()\n        if (_nowTime - _lastTime > gapTime || !_lastTime) {\n            fun();\n            _lastTime = _nowTime\n        }\n    }\n}\n```\n\n","slug":"玩转JS函数节流和函数防抖","published":1,"updated":"2018-07-15T14:03:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjksf3cxf002yh8efrw9joh1j","content":"<h1 id=\"函数防抖\"><a href=\"#函数防抖\" class=\"headerlink\" title=\"函数防抖\"></a>函数防抖</h1><h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>事件在触发后的n秒执行回调，如果在n秒内多次触发回调函数，则回调函数只执行一次。<br>例如：有人进入电梯，电梯会在一定5秒后启动，如果又有人进入电梯，则电梯需要再等5秒才启动</p>\n<blockquote>\n<p>事件多次触发只执行一次</p>\n</blockquote>\n<h2 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h2><ol>\n<li>防止多次提交</li>\n<li>监听滚动事件，触发回调</li>\n<li>监听输入框输入，执行对应方法时</li>\n</ol>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 防抖函数</span></span><br><span class=\"line\"><span class=\"comment\"> * @param  &#123;Function&#125; func  要执行防抖的函数</span></span><br><span class=\"line\"><span class=\"comment\"> * @param  &#123;Number&#125; delay   延迟时间</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;Function&#125;       执行防抖函数的函数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">debounce(func, delay) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timer) &#123;</span><br><span class=\"line\">            clearTimeout(timer);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        timer = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            func.apply(<span class=\"keyword\">this</span>, args);</span><br><span class=\"line\">        &#125;, delay);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"函数节流\"><a href=\"#函数节流\" class=\"headerlink\" title=\"函数节流\"></a>函数节流</h1><h2 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>函数在单位时间内只能触发一次，如果在单位时间内多次触发，只能生效一次。<br>例如：动画的播放，一秒钟只播放24张图片</p>\n<blockquote>\n<p>大量事件按一定平均频率触发</p>\n</blockquote>\n<h2 id=\"适用场景-1\"><a href=\"#适用场景-1\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h2><ol>\n<li>页面刷新频率</li>\n<li>Dom元素拖拽</li>\n<li>Canvas动画</li>\n</ol>\n<h2 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例\"></a>示例</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 节流函数</span></span><br><span class=\"line\"><span class=\"comment\"> * @param  &#123;Function&#125; func  要执行节流的函数</span></span><br><span class=\"line\"><span class=\"comment\"> * @param  &#123;Number&#125; gapTime 间隔时间</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;Function&#125;       执行节流函数的函数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throttle</span>(<span class=\"params\">fun, gapTime</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> _lastTime = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> _nowTime = +<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (_nowTime - _lastTime &gt; gapTime || !_lastTime) &#123;</span><br><span class=\"line\">            fun();</span><br><span class=\"line\">            _lastTime = _nowTime</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"函数防抖\"><a href=\"#函数防抖\" class=\"headerlink\" title=\"函数防抖\"></a>函数防抖</h1><h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>事件在触发后的n秒执行回调，如果在n秒内多次触发回调函数，则回调函数只执行一次。<br>例如：有人进入电梯，电梯会在一定5秒后启动，如果又有人进入电梯，则电梯需要再等5秒才启动</p>\n<blockquote>\n<p>事件多次触发只执行一次</p>\n</blockquote>\n<h2 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h2><ol>\n<li>防止多次提交</li>\n<li>监听滚动事件，触发回调</li>\n<li>监听输入框输入，执行对应方法时</li>\n</ol>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 防抖函数</span></span><br><span class=\"line\"><span class=\"comment\"> * @param  &#123;Function&#125; func  要执行防抖的函数</span></span><br><span class=\"line\"><span class=\"comment\"> * @param  &#123;Number&#125; delay   延迟时间</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;Function&#125;       执行防抖函数的函数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">debounce(func, delay) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timer) &#123;</span><br><span class=\"line\">            clearTimeout(timer);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        timer = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            func.apply(<span class=\"keyword\">this</span>, args);</span><br><span class=\"line\">        &#125;, delay);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"函数节流\"><a href=\"#函数节流\" class=\"headerlink\" title=\"函数节流\"></a>函数节流</h1><h2 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>函数在单位时间内只能触发一次，如果在单位时间内多次触发，只能生效一次。<br>例如：动画的播放，一秒钟只播放24张图片</p>\n<blockquote>\n<p>大量事件按一定平均频率触发</p>\n</blockquote>\n<h2 id=\"适用场景-1\"><a href=\"#适用场景-1\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h2><ol>\n<li>页面刷新频率</li>\n<li>Dom元素拖拽</li>\n<li>Canvas动画</li>\n</ol>\n<h2 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例\"></a>示例</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 节流函数</span></span><br><span class=\"line\"><span class=\"comment\"> * @param  &#123;Function&#125; func  要执行节流的函数</span></span><br><span class=\"line\"><span class=\"comment\"> * @param  &#123;Number&#125; gapTime 间隔时间</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;Function&#125;       执行节流函数的函数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throttle</span>(<span class=\"params\">fun, gapTime</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> _lastTime = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> _nowTime = +<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (_nowTime - _lastTime &gt; gapTime || !_lastTime) &#123;</span><br><span class=\"line\">            fun();</span><br><span class=\"line\">            _lastTime = _nowTime</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"移动端滚动入门","date":"2018-05-05T14:19:05.000Z","description":"移动端滚动入门","_content":"# 移动Web滚动问题总结\n\n## 移动端滚动方式\n\n1. 局部滚动：\n   * 原理：滚动容器固定宽高，设置overflow为scroll或auto，当子元素内容的高度大于滚动容器高度时触发滚动。\n\n2. body滚动：\n   * 原理：页面的高度内容自动撑大，body自动形成滚动条。\n\n**滚动事件scroll在不同机型下触发效果：**\n\t\n|  | body滚动 | 局部滚动 |\n|---|---|---|\n| ios | 不能实时触发 | 不能实时触发 |\n| 安卓 | 实时触发 | 实时触发 |\n| ios wkwebview内核 | 实时触发 | 实时触发 |\n\n> 注：wkwebview内核是ios8提供的新型wevbview内核，性能比之前的uiwebview要好。\n\n## 移动端模拟滚动\n\n1. 第一种实现方式：监听滚动元素的touchmove事件，当事件触发时修改元素transform属性来模拟滚动，当手指离开时监听touchend，调用`window.requestAnimationFrame()`传入一个回调函数来不断修改元素的transform属性来实现手指离开时的惯性滚动。\n\n2. 第二种实现方式：监听滚动元素的touchmove事件，当事件触发时修改元素transform属性来模拟滚动，当手指离开时监听touchend，给元素添加css动画，设置duration和function来实现手指离开时的惯性滚动。\n\n> 总结：模拟滚动的性能要比正常滚动的性能差，所以长列表滚动推荐用正常滚动。\n\n> 注：window.requestAnimationFrame()是告诉浏览器您希望执行动画并请求浏览器在下一次重绘之前调用指定的函数来更新动画\n\n## 下拉刷新实现\n\n原理：\n\n1. 下拉刷新的实现动画在页面顶部，正常情况下不可见。\n2. 当页面下拉滚动时出现下拉实现动画，手指离开时收起。\n\n实现：\n\n1. 将下拉刷新动画元素和滚动容器放到一个div中，将下拉刷新动画元素的margin-top设为负值。\n2. 当页面处于顶部时下拉，监听touchmove事件，修改滚动容器的translateY值。\n3. 手指离开时监听touchend收回。","source":"_posts/移动端滚动入门.md","raw":"---\ntitle: 移动端滚动入门\ndate: 2018-05-05 22:19:05\ncategories: JS实战\ntags:\n     - 移动端\ndescription: 移动端滚动入门\n---\n# 移动Web滚动问题总结\n\n## 移动端滚动方式\n\n1. 局部滚动：\n   * 原理：滚动容器固定宽高，设置overflow为scroll或auto，当子元素内容的高度大于滚动容器高度时触发滚动。\n\n2. body滚动：\n   * 原理：页面的高度内容自动撑大，body自动形成滚动条。\n\n**滚动事件scroll在不同机型下触发效果：**\n\t\n|  | body滚动 | 局部滚动 |\n|---|---|---|\n| ios | 不能实时触发 | 不能实时触发 |\n| 安卓 | 实时触发 | 实时触发 |\n| ios wkwebview内核 | 实时触发 | 实时触发 |\n\n> 注：wkwebview内核是ios8提供的新型wevbview内核，性能比之前的uiwebview要好。\n\n## 移动端模拟滚动\n\n1. 第一种实现方式：监听滚动元素的touchmove事件，当事件触发时修改元素transform属性来模拟滚动，当手指离开时监听touchend，调用`window.requestAnimationFrame()`传入一个回调函数来不断修改元素的transform属性来实现手指离开时的惯性滚动。\n\n2. 第二种实现方式：监听滚动元素的touchmove事件，当事件触发时修改元素transform属性来模拟滚动，当手指离开时监听touchend，给元素添加css动画，设置duration和function来实现手指离开时的惯性滚动。\n\n> 总结：模拟滚动的性能要比正常滚动的性能差，所以长列表滚动推荐用正常滚动。\n\n> 注：window.requestAnimationFrame()是告诉浏览器您希望执行动画并请求浏览器在下一次重绘之前调用指定的函数来更新动画\n\n## 下拉刷新实现\n\n原理：\n\n1. 下拉刷新的实现动画在页面顶部，正常情况下不可见。\n2. 当页面下拉滚动时出现下拉实现动画，手指离开时收起。\n\n实现：\n\n1. 将下拉刷新动画元素和滚动容器放到一个div中，将下拉刷新动画元素的margin-top设为负值。\n2. 当页面处于顶部时下拉，监听touchmove事件，修改滚动容器的translateY值。\n3. 手指离开时监听touchend收回。","slug":"移动端滚动入门","published":1,"updated":"2018-06-19T15:17:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjksf3cxh0031h8ef05pd5khl","content":"<h1 id=\"移动Web滚动问题总结\"><a href=\"#移动Web滚动问题总结\" class=\"headerlink\" title=\"移动Web滚动问题总结\"></a>移动Web滚动问题总结</h1><h2 id=\"移动端滚动方式\"><a href=\"#移动端滚动方式\" class=\"headerlink\" title=\"移动端滚动方式\"></a>移动端滚动方式</h2><ol>\n<li><p>局部滚动：</p>\n<ul>\n<li>原理：滚动容器固定宽高，设置overflow为scroll或auto，当子元素内容的高度大于滚动容器高度时触发滚动。</li>\n</ul>\n</li>\n<li><p>body滚动：</p>\n<ul>\n<li>原理：页面的高度内容自动撑大，body自动形成滚动条。</li>\n</ul>\n</li>\n</ol>\n<p><strong>滚动事件scroll在不同机型下触发效果：</strong></p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>body滚动</th>\n<th>局部滚动</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ios</td>\n<td>不能实时触发</td>\n<td>不能实时触发</td>\n</tr>\n<tr>\n<td>安卓</td>\n<td>实时触发</td>\n<td>实时触发</td>\n</tr>\n<tr>\n<td>ios wkwebview内核</td>\n<td>实时触发</td>\n<td>实时触发</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>注：wkwebview内核是ios8提供的新型wevbview内核，性能比之前的uiwebview要好。</p>\n</blockquote>\n<h2 id=\"移动端模拟滚动\"><a href=\"#移动端模拟滚动\" class=\"headerlink\" title=\"移动端模拟滚动\"></a>移动端模拟滚动</h2><ol>\n<li><p>第一种实现方式：监听滚动元素的touchmove事件，当事件触发时修改元素transform属性来模拟滚动，当手指离开时监听touchend，调用<code>window.requestAnimationFrame()</code>传入一个回调函数来不断修改元素的transform属性来实现手指离开时的惯性滚动。</p>\n</li>\n<li><p>第二种实现方式：监听滚动元素的touchmove事件，当事件触发时修改元素transform属性来模拟滚动，当手指离开时监听touchend，给元素添加css动画，设置duration和function来实现手指离开时的惯性滚动。</p>\n</li>\n</ol>\n<blockquote>\n<p>总结：模拟滚动的性能要比正常滚动的性能差，所以长列表滚动推荐用正常滚动。</p>\n</blockquote>\n<blockquote>\n<p>注：window.requestAnimationFrame()是告诉浏览器您希望执行动画并请求浏览器在下一次重绘之前调用指定的函数来更新动画</p>\n</blockquote>\n<h2 id=\"下拉刷新实现\"><a href=\"#下拉刷新实现\" class=\"headerlink\" title=\"下拉刷新实现\"></a>下拉刷新实现</h2><p>原理：</p>\n<ol>\n<li>下拉刷新的实现动画在页面顶部，正常情况下不可见。</li>\n<li>当页面下拉滚动时出现下拉实现动画，手指离开时收起。</li>\n</ol>\n<p>实现：</p>\n<ol>\n<li>将下拉刷新动画元素和滚动容器放到一个div中，将下拉刷新动画元素的margin-top设为负值。</li>\n<li>当页面处于顶部时下拉，监听touchmove事件，修改滚动容器的translateY值。</li>\n<li>手指离开时监听touchend收回。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"移动Web滚动问题总结\"><a href=\"#移动Web滚动问题总结\" class=\"headerlink\" title=\"移动Web滚动问题总结\"></a>移动Web滚动问题总结</h1><h2 id=\"移动端滚动方式\"><a href=\"#移动端滚动方式\" class=\"headerlink\" title=\"移动端滚动方式\"></a>移动端滚动方式</h2><ol>\n<li><p>局部滚动：</p>\n<ul>\n<li>原理：滚动容器固定宽高，设置overflow为scroll或auto，当子元素内容的高度大于滚动容器高度时触发滚动。</li>\n</ul>\n</li>\n<li><p>body滚动：</p>\n<ul>\n<li>原理：页面的高度内容自动撑大，body自动形成滚动条。</li>\n</ul>\n</li>\n</ol>\n<p><strong>滚动事件scroll在不同机型下触发效果：</strong></p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>body滚动</th>\n<th>局部滚动</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ios</td>\n<td>不能实时触发</td>\n<td>不能实时触发</td>\n</tr>\n<tr>\n<td>安卓</td>\n<td>实时触发</td>\n<td>实时触发</td>\n</tr>\n<tr>\n<td>ios wkwebview内核</td>\n<td>实时触发</td>\n<td>实时触发</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>注：wkwebview内核是ios8提供的新型wevbview内核，性能比之前的uiwebview要好。</p>\n</blockquote>\n<h2 id=\"移动端模拟滚动\"><a href=\"#移动端模拟滚动\" class=\"headerlink\" title=\"移动端模拟滚动\"></a>移动端模拟滚动</h2><ol>\n<li><p>第一种实现方式：监听滚动元素的touchmove事件，当事件触发时修改元素transform属性来模拟滚动，当手指离开时监听touchend，调用<code>window.requestAnimationFrame()</code>传入一个回调函数来不断修改元素的transform属性来实现手指离开时的惯性滚动。</p>\n</li>\n<li><p>第二种实现方式：监听滚动元素的touchmove事件，当事件触发时修改元素transform属性来模拟滚动，当手指离开时监听touchend，给元素添加css动画，设置duration和function来实现手指离开时的惯性滚动。</p>\n</li>\n</ol>\n<blockquote>\n<p>总结：模拟滚动的性能要比正常滚动的性能差，所以长列表滚动推荐用正常滚动。</p>\n</blockquote>\n<blockquote>\n<p>注：window.requestAnimationFrame()是告诉浏览器您希望执行动画并请求浏览器在下一次重绘之前调用指定的函数来更新动画</p>\n</blockquote>\n<h2 id=\"下拉刷新实现\"><a href=\"#下拉刷新实现\" class=\"headerlink\" title=\"下拉刷新实现\"></a>下拉刷新实现</h2><p>原理：</p>\n<ol>\n<li>下拉刷新的实现动画在页面顶部，正常情况下不可见。</li>\n<li>当页面下拉滚动时出现下拉实现动画，手指离开时收起。</li>\n</ol>\n<p>实现：</p>\n<ol>\n<li>将下拉刷新动画元素和滚动容器放到一个div中，将下拉刷新动画元素的margin-top设为负值。</li>\n<li>当页面处于顶部时下拉，监听touchmove事件，修改滚动容器的translateY值。</li>\n<li>手指离开时监听touchend收回。</li>\n</ol>\n"},{"title":"移动端滚动进阶","date":"2018-06-19T15:17:09.000Z","description":"移动端滚动进阶","_content":"# 流畅滚动\n\n\n### IOS\n\n1. 建议使用局部滚动\n2. body标签里加上属性`-webkit-overflow-scrolling:touch;`实现弹性滚动\n3. 局部滚动的dom节点加上属性`overflow:auto;`\n\n### Android\n\n1. 只能实现全局滚动\n2. 标题栏和底部栏使用fixed进行定位\n3. 中间滚动部分使用padding填充标题栏和底部栏的固定部分，从而使局部滚动变成全局滚动\n\n# 滚动出界问题\n\n1. 使用scrollFix避免滚动出界\n\n\t```\n\tif(startTopScroll <= 0) {\n\t  elem.scrollTop = 1;\n\t}\n\tif(startTopScroll + elem.offsetHeight >= elem.scrollHeight ) {\n\t  elem.scrollTop = elem.scrollHeight - elem.offsetHeight - 1;\n\t}\n\t```\n\n2. 当页面底部有固定部分时，禁止touchmove默认事件\n\n\t```\n\tfunction isPassive() {\n    var supportsPassiveOption = false;\n    try {\n        addEventListener(\"test\", null, Object.defineProperty({}, 'passive', {\n            get: function () {\n                supportsPassiveOption = true;\n            }\n        }));\n    } catch(e) {}\n    return supportsPassiveOption;\n\t}\n\tdocument.addEventListener('touchmove', function (e) { e.preventDefault(); }, isPassive() ? {\n\t\tcapture: false,\n\t\tpassive: false\n\t} : false);\n\t```\n\n# 流畅滚动实践总结\n\n* body上加上 `-webkit-overflow-scrolling: touch`\n* IOS尽量使用局部滚动\n* IOS引入scrollFix避免滚动出界\n* IOS上`position: absolute`的dom节点不要设置背景色\n* Android尽量使用全局滚动，尽量不用`overflow：auto`，\t使用min-height代替height\n","source":"_posts/移动端滚动进阶.md","raw":"---\ntitle: \"移动端滚动进阶\"\ndate: 2018-06-19 23:17:09\ncategories: JS实战\ntags:\n     - 移动端\ndescription: 移动端滚动进阶\n---\n# 流畅滚动\n\n\n### IOS\n\n1. 建议使用局部滚动\n2. body标签里加上属性`-webkit-overflow-scrolling:touch;`实现弹性滚动\n3. 局部滚动的dom节点加上属性`overflow:auto;`\n\n### Android\n\n1. 只能实现全局滚动\n2. 标题栏和底部栏使用fixed进行定位\n3. 中间滚动部分使用padding填充标题栏和底部栏的固定部分，从而使局部滚动变成全局滚动\n\n# 滚动出界问题\n\n1. 使用scrollFix避免滚动出界\n\n\t```\n\tif(startTopScroll <= 0) {\n\t  elem.scrollTop = 1;\n\t}\n\tif(startTopScroll + elem.offsetHeight >= elem.scrollHeight ) {\n\t  elem.scrollTop = elem.scrollHeight - elem.offsetHeight - 1;\n\t}\n\t```\n\n2. 当页面底部有固定部分时，禁止touchmove默认事件\n\n\t```\n\tfunction isPassive() {\n    var supportsPassiveOption = false;\n    try {\n        addEventListener(\"test\", null, Object.defineProperty({}, 'passive', {\n            get: function () {\n                supportsPassiveOption = true;\n            }\n        }));\n    } catch(e) {}\n    return supportsPassiveOption;\n\t}\n\tdocument.addEventListener('touchmove', function (e) { e.preventDefault(); }, isPassive() ? {\n\t\tcapture: false,\n\t\tpassive: false\n\t} : false);\n\t```\n\n# 流畅滚动实践总结\n\n* body上加上 `-webkit-overflow-scrolling: touch`\n* IOS尽量使用局部滚动\n* IOS引入scrollFix避免滚动出界\n* IOS上`position: absolute`的dom节点不要设置背景色\n* Android尽量使用全局滚动，尽量不用`overflow：auto`，\t使用min-height代替height\n","slug":"移动端滚动进阶","published":1,"updated":"2018-06-19T15:39:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjksf3cxi0035h8effkohr78m","content":"<h1 id=\"流畅滚动\"><a href=\"#流畅滚动\" class=\"headerlink\" title=\"流畅滚动\"></a>流畅滚动</h1><h3 id=\"IOS\"><a href=\"#IOS\" class=\"headerlink\" title=\"IOS\"></a>IOS</h3><ol>\n<li>建议使用局部滚动</li>\n<li>body标签里加上属性<code>-webkit-overflow-scrolling:touch;</code>实现弹性滚动</li>\n<li>局部滚动的dom节点加上属性<code>overflow:auto;</code></li>\n</ol>\n<h3 id=\"Android\"><a href=\"#Android\" class=\"headerlink\" title=\"Android\"></a>Android</h3><ol>\n<li>只能实现全局滚动</li>\n<li>标题栏和底部栏使用fixed进行定位</li>\n<li>中间滚动部分使用padding填充标题栏和底部栏的固定部分，从而使局部滚动变成全局滚动</li>\n</ol>\n<h1 id=\"滚动出界问题\"><a href=\"#滚动出界问题\" class=\"headerlink\" title=\"滚动出界问题\"></a>滚动出界问题</h1><ol>\n<li><p>使用scrollFix避免滚动出界</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(startTopScroll &lt;= 0) &#123;</span><br><span class=\"line\">  elem.scrollTop = 1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if(startTopScroll + elem.offsetHeight &gt;= elem.scrollHeight ) &#123;</span><br><span class=\"line\">  elem.scrollTop = elem.scrollHeight - elem.offsetHeight - 1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>当页面底部有固定部分时，禁止touchmove默认事件</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function isPassive() &#123;</span><br><span class=\"line\">   var supportsPassiveOption = false;</span><br><span class=\"line\">   try &#123;</span><br><span class=\"line\">       addEventListener(&quot;test&quot;, null, Object.defineProperty(&#123;&#125;, &apos;passive&apos;, &#123;</span><br><span class=\"line\">           get: function () &#123;</span><br><span class=\"line\">               supportsPassiveOption = true;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;));</span><br><span class=\"line\">   &#125; catch(e) &#123;&#125;</span><br><span class=\"line\">   return supportsPassiveOption;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">document.addEventListener(&apos;touchmove&apos;, function (e) &#123; e.preventDefault(); &#125;, isPassive() ? &#123;</span><br><span class=\"line\">\tcapture: false,</span><br><span class=\"line\">\tpassive: false</span><br><span class=\"line\">&#125; : false);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"流畅滚动实践总结\"><a href=\"#流畅滚动实践总结\" class=\"headerlink\" title=\"流畅滚动实践总结\"></a>流畅滚动实践总结</h1><ul>\n<li>body上加上 <code>-webkit-overflow-scrolling: touch</code></li>\n<li>IOS尽量使用局部滚动</li>\n<li>IOS引入scrollFix避免滚动出界</li>\n<li>IOS上<code>position: absolute</code>的dom节点不要设置背景色</li>\n<li>Android尽量使用全局滚动，尽量不用<code>overflow：auto</code>，    使用min-height代替height</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"流畅滚动\"><a href=\"#流畅滚动\" class=\"headerlink\" title=\"流畅滚动\"></a>流畅滚动</h1><h3 id=\"IOS\"><a href=\"#IOS\" class=\"headerlink\" title=\"IOS\"></a>IOS</h3><ol>\n<li>建议使用局部滚动</li>\n<li>body标签里加上属性<code>-webkit-overflow-scrolling:touch;</code>实现弹性滚动</li>\n<li>局部滚动的dom节点加上属性<code>overflow:auto;</code></li>\n</ol>\n<h3 id=\"Android\"><a href=\"#Android\" class=\"headerlink\" title=\"Android\"></a>Android</h3><ol>\n<li>只能实现全局滚动</li>\n<li>标题栏和底部栏使用fixed进行定位</li>\n<li>中间滚动部分使用padding填充标题栏和底部栏的固定部分，从而使局部滚动变成全局滚动</li>\n</ol>\n<h1 id=\"滚动出界问题\"><a href=\"#滚动出界问题\" class=\"headerlink\" title=\"滚动出界问题\"></a>滚动出界问题</h1><ol>\n<li><p>使用scrollFix避免滚动出界</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(startTopScroll &lt;= 0) &#123;</span><br><span class=\"line\">  elem.scrollTop = 1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if(startTopScroll + elem.offsetHeight &gt;= elem.scrollHeight ) &#123;</span><br><span class=\"line\">  elem.scrollTop = elem.scrollHeight - elem.offsetHeight - 1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>当页面底部有固定部分时，禁止touchmove默认事件</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function isPassive() &#123;</span><br><span class=\"line\">   var supportsPassiveOption = false;</span><br><span class=\"line\">   try &#123;</span><br><span class=\"line\">       addEventListener(&quot;test&quot;, null, Object.defineProperty(&#123;&#125;, &apos;passive&apos;, &#123;</span><br><span class=\"line\">           get: function () &#123;</span><br><span class=\"line\">               supportsPassiveOption = true;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;));</span><br><span class=\"line\">   &#125; catch(e) &#123;&#125;</span><br><span class=\"line\">   return supportsPassiveOption;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">document.addEventListener(&apos;touchmove&apos;, function (e) &#123; e.preventDefault(); &#125;, isPassive() ? &#123;</span><br><span class=\"line\">\tcapture: false,</span><br><span class=\"line\">\tpassive: false</span><br><span class=\"line\">&#125; : false);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"流畅滚动实践总结\"><a href=\"#流畅滚动实践总结\" class=\"headerlink\" title=\"流畅滚动实践总结\"></a>流畅滚动实践总结</h1><ul>\n<li>body上加上 <code>-webkit-overflow-scrolling: touch</code></li>\n<li>IOS尽量使用局部滚动</li>\n<li>IOS引入scrollFix避免滚动出界</li>\n<li>IOS上<code>position: absolute</code>的dom节点不要设置背景色</li>\n<li>Android尽量使用全局滚动，尽量不用<code>overflow：auto</code>，    使用min-height代替height</li>\n</ul>\n"},{"title":"程序员必会算法系列--基本排序7个","date":"2017-07-29T06:30:35.000Z","description":"7个程序员必会的排序算法","_content":"**1.冒泡排序**\n\n```\npackage pers.yijin.sort;\n\nimport java.util.Arrays;\n\n/**\n * 冒泡排序\n * 时间复杂度O(n2)\n *\n * @author Administrator\n *\n */\npublic class BubbleSort {\n    // 排序算法\n    public static int[] bubbleSort(int[] A, int n) {\n        long startTime = System.nanoTime();\n        // i控制比较次数\n        for (int i = 0; i < n; i++) {\n            for (int j = n - 2; j >= i; j--) {\n                if (A[j + 1] < A[j]) {\n                    swap(A, j, j + 1);\n                }\n            }\n        }\n        long endTime = System.nanoTime();\n        System.out.println(\"优化前运行时间为：\"+(endTime-startTime)+\"纳秒\");\n        return A;\n    }\n\n    // 排序算法优化\n    public static int[] newBubbleSort(int[] A, int n) {\n        long startTime = System.nanoTime();\n        // i控制比较次数\n        boolean flag = true;\n        for (int i = 0; i < n && flag; i++) {\n            flag = false;\n            for (int j = n - 2; j >= i; j--) {\n                if (A[j + 1] < A[j]) {\n                    swap(A, j, j + 1);\n                    flag = true;\n                }\n            }\n        }\n        long endTime = System.nanoTime();\n        System.out.println(\"优化后运行时间为：\"+(endTime-startTime)+\"纳秒\");\n        return A;\n    }\n\n    // 交换算法\n    private static void swap(int[] arr, int current, int next) {\n        int temp = arr[current];\n        arr[current] = arr[next];\n        arr[next] = temp;\n    }\n\n    // 测试\n    public static void main(String[] args) {\n        int arr[] = { 54, 35, 48, 36, 27, 12, 44, 44, 8, 14, 26, 17, 28 };\n        int arr1[] = {54, 35, 48, 36, 27, 12, 44, 44, 8, 14, 26, 17, 28};\n        System.out.println(Arrays.toString(BubbleSort.bubbleSort(arr, arr.length)));\n        System.out.println(\"-------------------------------------------------------\");\n        System.out.println(Arrays.toString(BubbleSort.newBubbleSort(arr1, arr1.length)));\n    }\n}\n\n```\n\n**2.选择排序**\n\n```\npackage pers.yijin.sort;\n\nimport java.util.Arrays;\n\n/**\n * 选择排序\n * 时间复杂度O(n2)\n *\n * @author Administrator\n *\n */\npublic class SelectionSort {\n    public static int[] selectionSort(int A[], int length) {\n        int min = -1;\n        for (int i = 0; i < length; i++) {\n            //初始化最小值的索引为i\n            min = i;\n            for (int j = i + 1; j < length; j++) {\n                if (A[min] > A[j]) {\n                    min = j;\n                }\n            }\n            if(min != i){\n                swap(A, i, min);\n            }\n        }\n        return A;\n    }\n\n    // 交换算法\n    private static void swap(int[] arr, int current, int next) {\n        int temp = arr[current];\n        arr[current] = arr[next];\n        arr[next] = temp;\n    }\n\n    // 测试\n    public static void main(String[] args) {\n        int arr[] = { 54, 35, 48, 36, 27, 12, 44, 44, 8, 14, 26, 17, 28 };\n        System.out.println(Arrays.toString(SelectionSort.selectionSort(arr, arr.length)));\n    }\n}\n\n```\n\n**3.插入排序**\n\n```\npackage pers.yijin.sort;\n\nimport java.util.Arrays;\n\n/**\n * 插入排序\n * 时间复杂度O(n2)\n *\n * @author Administrator\n *\n */\npublic class InsertSort {\n    // 排序算法\n    public static int[] insertSort(int[] A, int n) {\n        //空出索引0，认为A[0]是有序的\n        for(int i = 1; i < n; i++){\n            //依次用A[i]与A[i]左边的值比较，找到插入位置\n            for(int j = i; j > 0; j--){\n                if(A[j-1] > A[j]){\n                    swap(A, j, j-1);\n                }\n            }\n        }\n        return A;\n    }\n\n    // 交换算法\n    private static void swap(int[] arr, int current, int next) {\n        int temp = arr[current];\n        arr[current] = arr[next];\n        arr[next] = temp;\n    }\n\n    // 测试\n    public static void main(String[] args) {\n        int arr[] = { 54, 35, 48, 36, 27, 12, 44, 44, 8, 14, 26, 17, 28 };\n        System.out.println(Arrays.toString(InsertSort.insertSort(arr, arr.length)));\n    }\n}\n\n```\n\n**4.插入排序的进阶--希尔排序**\n\n```\npackage pers.yijin.sort;\n\nimport java.util.Arrays;\n\n/**\n * 希尔排序\n * 时间复杂度为O(N*logN)\n *\n * @author Administrator\n *\n */\npublic class ShellSort {\n\n    public static int[] shellSort(int arr[], int length) {\n        //初始化一个步长\n        int step = 1;\n        //获得一个最优步长\n        while (step < length / 3) {\n            step = 3*step +1;\n        }\n        //根据步长执行插入排序\n        while (step >= 1) {\n            for (int i = step; i < length ; i++) {\n                for (int j = i; j >= step ; j = j - step) {\n                    if (arr[j] < arr[j - step]) {\n                        swap(arr, j, j - step);\n                    }\n                }\n            }\n            //缩小步长划分的数组范围\n            step = step / 3;\n        }\n        return arr;\n    }\n\n    // 交换算法\n    private static void swap(int[] arr, int current, int next) {\n        int temp = arr[current];\n        arr[current] = arr[next];\n        arr[next] = temp;\n    }\n\n    public static void main(String[] args) {\n        int arr[] = { 255,64,108,341,217,35,263,272,49,225,229,5,184,119,200,239,126,361,333,58,145,204,322,313,141,95,190,41,5,16,139,212,281,72,302,5,178,156,33,87,116,12,69,253,178,78,95,245,260,218,131,311,175,150,370,164,350,192,373,294,239,325,25,137,147,354,287,169,37,102,232 };\n        System.out.println(Arrays.toString(ShellSort.shellSort(arr, arr.length)));\n    }\n\n}\n\n```\n\n**5.归并排序**\n\n```\npackage pers.yijin.sort;\n\nimport java.util.Arrays;\n\n/**\n * 归并排序\n * 时间复杂度O(N*logN)\n *\n * @author Administrator\n *\n */\npublic class MergeSort {\n    /**\n     * 归并操作，将两个有序的子区间归并成一个有序的子区间\n     *\n     * @param src\n     * @param des\n     * @param low\n     * @param mid\n     * @param high\n     */\n    private static int[] temp;\n    public static void merge(int src[], int low, int mid, int high) {\n        // 左边子区间的第一个索引值\n        int leftIndex = low;\n        // 右边子区间的第一个索引值\n        int rightIndex = mid + 1;\n        // 辅助数组的第一个索引值\n        int startIndex = 0;\n        //辅助数组\n        temp = new int[high-low+1];\n        // 归并操作\n        while (leftIndex <= mid && rightIndex <= high) {\n            if (src[leftIndex] < src[rightIndex]) {\n                temp[startIndex++] = src[leftIndex++];\n            } else {\n                temp[startIndex++] = src[rightIndex++];\n            }\n        }\n        // 如果左边的区间索引值还没到终点，则把左边区间的值依次赋给辅助数组\n        while (leftIndex <= mid) {\n            temp[startIndex++] = src[leftIndex++];\n        }\n        // 如果右边的区间索引值还没到终点，则把右边区间的值依次赋给辅助数组\n        while (rightIndex <= high) {\n            temp[startIndex++] = src[rightIndex++];\n        }\n        //把辅助数组里的值赋给目标数组，目标数组的初始下标为传入的最左下标\n        for (int i = 0; i < temp.length; i++) {\n            src[low+i] = temp[i];\n        }\n    }\n\n    /**\n     * 分别给左右区间排序\n     *\n     * @param src\n     * @param low\n     * @param high\n     */\n    public static void MSort(int src[], int low, int high) {\n        int mid = (low + high) / 2;\n        // 递归的结束条件\n        if (low == high) {\n            return;\n        }\n        // 给左子区间排序\n        MSort(src, low, mid);\n        // 给右子区间排序\n        MSort(src, mid + 1, high);\n        // 归并\n        merge(src, low, mid, high);\n    }\n\n    /**\n     * 归并排序\n     *\n     * @param arr\n     * @param length\n     * @return\n     */\n    public static void mergeSort(int arr[], int length) {\n        MSort(arr, 0, length-1);\n    }\n\n    public static void main(String[] args) {\n        int arr[] = { 54, 35, 48, 36, 27, 12, 44, 44, 8, 14, 26, 17, 28 };\n        MergeSort.mergeSort(arr, arr.length);\n        System.out.println(Arrays.toString(arr));\n    }\n\n}\n\n```\n\n**6.快速排序**\n\n```\npackage pers.yijin.sort;\n\nimport java.util.Arrays;\n\n/**\n * 快速排序 时间复杂度O(N*logN)\n *\n * @author Administrator\n *\n */\npublic class QuickSort {\n    /**\n     * 划分左右子区间，使左子区间的里的值都小于切分的，使右子区间的里的值都大于切分点。\n     *\n     * @param arr\n     * @param left\n     * @param right\n     * @return\n     */\n    public static int partition(int arr[], int low, int high) {\n        // 得到切分点\n        int pivot = arr[low];\n        // 左右扫描指针\n        int left = low+1;\n        int right = high;\n        while (true) {\n            while (arr[left] <= pivot) {\n                left++;\n                if (left >= high) {\n                    break;\n                }\n            }\n            while (arr[right] > pivot) {\n                right--;\n                if (right == low) {\n                    break;\n                }\n            }\n            if (left >= right) {\n                break;\n            }\n            swap(arr, left, right);\n        }\n        swap(arr, low, right);\n\n        return right;\n    }\n\n    /**\n     * 递归调用\n     *\n     * @param arr\n     * @param left\n     * @param right\n     */\n    public static void QSort(int arr[], int low, int high) {\n        if (low >= high) {\n            return;\n        }\n        int pivot = partition(arr, low, high);\n        QSort(arr, low, pivot - 1);\n        QSort(arr, pivot + 1, high);\n\n    }\n\n    /**\n     * 快速排序\n     *\n     * @param arr\n     * @param length\n     */\n    public static void quickSort(int arr[], int length) {\n        QSort(arr, 0, length - 1);\n    }\n\n    // 交换算法\n    private static void swap(int[] arr, int current, int next) {\n        int temp = arr[current];\n        arr[current] = arr[next];\n        arr[next] = temp;\n    }\n\n    public static void main(String[] args) {\n        int arr[] = { 14,313,206,53,182,215,169,148,158,272,22,80,176,200,266,301,37,234,174,163,158,158,112,281,86,14,306,137,258,27,247,33,102,5,217,254,286,255,195,234,229,225,296,158,247,42,124,96,292,71,303,144,57,297,315,44,20,111,68,92,181,187,130,167,59,156,240,75,118,184,46,94,74,142,14,313,206,53,182,215,169,148,158,272,22,80,176,200,266,301,37,234,174,163,158,158,112,281,86,14,306,137,258,27,247,33,102,5,217,254,286,255,195,234,229,225,296,158,247,42,124,96,292,71,303,144,57,297,315,44,20,111,68,92,181,187,130,167,59,156,240,75,118,184,46,94,74,142,14,313,206,53,182,215,169,148,158,272,22,80,176,200,266,301,37,234,174,163,158,158,112,281,86,14,306,137,258,27,247,33,102,5,217,254,286,255,195,234,229,225,296,158,247,42,124,96,292,71,303,144,57,297,315,44,20,111,68,92,181,187,130,167,59,156,240,75,118,184,46,94,74,142 };\n        quickSort(arr, arr.length);\n        System.out.println(Arrays.toString(arr));\n\n    }\n\n}\n\n```\n\n**7.堆排序（代码有问题，只当记录。求指导。。）**\n\n```\npackage pers.yijin.sort;\n\nimport java.util.Arrays;\n\n/**\n * 堆排序 时间复杂度O(NlogN) 提示：使用优先队列构造堆(二叉树)\n *\n * @author Administrator\n *\n */\npublic class HeapSort {\n\n    public static int[] heapSort(int[] arr) {\n        int size = arr.length -1;\n        //只需将堆元素的一半下沉，就能使堆有序\n        for (int k = size / 2 -1; k >= 0; k--) {\n            sink(arr, k, size);\n        }\n        while(size > 0){\n            //将最大元素与最小元素交换，并把交换后的最大元素脱离\n            swap(arr, 0, size--);\n            //下沉最小元素，找到第二大元素，继续交换\n            sink(arr, 0, size);\n        }\n\n        return arr;\n    }\n\n    /**\n     * 下沉算法，使堆有序\n     * @param arr\n     * @param k\n     * @param size\n     */\n    private static void sink(int[] arr, int k, int size) {\n        while (2 * k +1  <= size) {\n            int j = 2 * k + 1;\n            if (j < size && arr[j] < arr[j+1]) {\n                j++;\n            }\n            if (arr[k] > arr[j]) {\n                break;\n            }\n            swap(arr, k, j);\n            k = j;\n        }\n    }\n\n    // 交换算法\n    private static void swap(int[] arr, int current, int next) {\n        int temp = arr[current];\n        arr[current] = arr[next];\n        arr[next] = temp;\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {106,167,277,74,146,58,160,201,144,99,146,234,305,337,375,88,64,366,36,227,220,87,163,245,95,128,350,319,129,15,80,326,266,46,216,286,342,150,200,237,299,103,68,126,121,119,149,9,362,210,269,185,262,323,350,27,170,21,110,159,128,328,290,28,253,122,193,176,39,330,260,312,342,27,95,52,163,138,376,358};\n        heapSort(arr);\n        System.out.println(Arrays.toString(arr));\n        Arrays.sort(arr);\n        System.out.println(Arrays.toString(arr));\n    }\n\n}\n\n```\n","source":"_posts/程序员必会算法系列--基本排序7个.md","raw":"---\ntitle: 程序员必会算法系列--基本排序7个\ndate: 2017-07-29 14:30:35\ncategories: 算法\ntags:\n     - 算法\ndescription: 7个程序员必会的排序算法\n---\n**1.冒泡排序**\n\n```\npackage pers.yijin.sort;\n\nimport java.util.Arrays;\n\n/**\n * 冒泡排序\n * 时间复杂度O(n2)\n *\n * @author Administrator\n *\n */\npublic class BubbleSort {\n    // 排序算法\n    public static int[] bubbleSort(int[] A, int n) {\n        long startTime = System.nanoTime();\n        // i控制比较次数\n        for (int i = 0; i < n; i++) {\n            for (int j = n - 2; j >= i; j--) {\n                if (A[j + 1] < A[j]) {\n                    swap(A, j, j + 1);\n                }\n            }\n        }\n        long endTime = System.nanoTime();\n        System.out.println(\"优化前运行时间为：\"+(endTime-startTime)+\"纳秒\");\n        return A;\n    }\n\n    // 排序算法优化\n    public static int[] newBubbleSort(int[] A, int n) {\n        long startTime = System.nanoTime();\n        // i控制比较次数\n        boolean flag = true;\n        for (int i = 0; i < n && flag; i++) {\n            flag = false;\n            for (int j = n - 2; j >= i; j--) {\n                if (A[j + 1] < A[j]) {\n                    swap(A, j, j + 1);\n                    flag = true;\n                }\n            }\n        }\n        long endTime = System.nanoTime();\n        System.out.println(\"优化后运行时间为：\"+(endTime-startTime)+\"纳秒\");\n        return A;\n    }\n\n    // 交换算法\n    private static void swap(int[] arr, int current, int next) {\n        int temp = arr[current];\n        arr[current] = arr[next];\n        arr[next] = temp;\n    }\n\n    // 测试\n    public static void main(String[] args) {\n        int arr[] = { 54, 35, 48, 36, 27, 12, 44, 44, 8, 14, 26, 17, 28 };\n        int arr1[] = {54, 35, 48, 36, 27, 12, 44, 44, 8, 14, 26, 17, 28};\n        System.out.println(Arrays.toString(BubbleSort.bubbleSort(arr, arr.length)));\n        System.out.println(\"-------------------------------------------------------\");\n        System.out.println(Arrays.toString(BubbleSort.newBubbleSort(arr1, arr1.length)));\n    }\n}\n\n```\n\n**2.选择排序**\n\n```\npackage pers.yijin.sort;\n\nimport java.util.Arrays;\n\n/**\n * 选择排序\n * 时间复杂度O(n2)\n *\n * @author Administrator\n *\n */\npublic class SelectionSort {\n    public static int[] selectionSort(int A[], int length) {\n        int min = -1;\n        for (int i = 0; i < length; i++) {\n            //初始化最小值的索引为i\n            min = i;\n            for (int j = i + 1; j < length; j++) {\n                if (A[min] > A[j]) {\n                    min = j;\n                }\n            }\n            if(min != i){\n                swap(A, i, min);\n            }\n        }\n        return A;\n    }\n\n    // 交换算法\n    private static void swap(int[] arr, int current, int next) {\n        int temp = arr[current];\n        arr[current] = arr[next];\n        arr[next] = temp;\n    }\n\n    // 测试\n    public static void main(String[] args) {\n        int arr[] = { 54, 35, 48, 36, 27, 12, 44, 44, 8, 14, 26, 17, 28 };\n        System.out.println(Arrays.toString(SelectionSort.selectionSort(arr, arr.length)));\n    }\n}\n\n```\n\n**3.插入排序**\n\n```\npackage pers.yijin.sort;\n\nimport java.util.Arrays;\n\n/**\n * 插入排序\n * 时间复杂度O(n2)\n *\n * @author Administrator\n *\n */\npublic class InsertSort {\n    // 排序算法\n    public static int[] insertSort(int[] A, int n) {\n        //空出索引0，认为A[0]是有序的\n        for(int i = 1; i < n; i++){\n            //依次用A[i]与A[i]左边的值比较，找到插入位置\n            for(int j = i; j > 0; j--){\n                if(A[j-1] > A[j]){\n                    swap(A, j, j-1);\n                }\n            }\n        }\n        return A;\n    }\n\n    // 交换算法\n    private static void swap(int[] arr, int current, int next) {\n        int temp = arr[current];\n        arr[current] = arr[next];\n        arr[next] = temp;\n    }\n\n    // 测试\n    public static void main(String[] args) {\n        int arr[] = { 54, 35, 48, 36, 27, 12, 44, 44, 8, 14, 26, 17, 28 };\n        System.out.println(Arrays.toString(InsertSort.insertSort(arr, arr.length)));\n    }\n}\n\n```\n\n**4.插入排序的进阶--希尔排序**\n\n```\npackage pers.yijin.sort;\n\nimport java.util.Arrays;\n\n/**\n * 希尔排序\n * 时间复杂度为O(N*logN)\n *\n * @author Administrator\n *\n */\npublic class ShellSort {\n\n    public static int[] shellSort(int arr[], int length) {\n        //初始化一个步长\n        int step = 1;\n        //获得一个最优步长\n        while (step < length / 3) {\n            step = 3*step +1;\n        }\n        //根据步长执行插入排序\n        while (step >= 1) {\n            for (int i = step; i < length ; i++) {\n                for (int j = i; j >= step ; j = j - step) {\n                    if (arr[j] < arr[j - step]) {\n                        swap(arr, j, j - step);\n                    }\n                }\n            }\n            //缩小步长划分的数组范围\n            step = step / 3;\n        }\n        return arr;\n    }\n\n    // 交换算法\n    private static void swap(int[] arr, int current, int next) {\n        int temp = arr[current];\n        arr[current] = arr[next];\n        arr[next] = temp;\n    }\n\n    public static void main(String[] args) {\n        int arr[] = { 255,64,108,341,217,35,263,272,49,225,229,5,184,119,200,239,126,361,333,58,145,204,322,313,141,95,190,41,5,16,139,212,281,72,302,5,178,156,33,87,116,12,69,253,178,78,95,245,260,218,131,311,175,150,370,164,350,192,373,294,239,325,25,137,147,354,287,169,37,102,232 };\n        System.out.println(Arrays.toString(ShellSort.shellSort(arr, arr.length)));\n    }\n\n}\n\n```\n\n**5.归并排序**\n\n```\npackage pers.yijin.sort;\n\nimport java.util.Arrays;\n\n/**\n * 归并排序\n * 时间复杂度O(N*logN)\n *\n * @author Administrator\n *\n */\npublic class MergeSort {\n    /**\n     * 归并操作，将两个有序的子区间归并成一个有序的子区间\n     *\n     * @param src\n     * @param des\n     * @param low\n     * @param mid\n     * @param high\n     */\n    private static int[] temp;\n    public static void merge(int src[], int low, int mid, int high) {\n        // 左边子区间的第一个索引值\n        int leftIndex = low;\n        // 右边子区间的第一个索引值\n        int rightIndex = mid + 1;\n        // 辅助数组的第一个索引值\n        int startIndex = 0;\n        //辅助数组\n        temp = new int[high-low+1];\n        // 归并操作\n        while (leftIndex <= mid && rightIndex <= high) {\n            if (src[leftIndex] < src[rightIndex]) {\n                temp[startIndex++] = src[leftIndex++];\n            } else {\n                temp[startIndex++] = src[rightIndex++];\n            }\n        }\n        // 如果左边的区间索引值还没到终点，则把左边区间的值依次赋给辅助数组\n        while (leftIndex <= mid) {\n            temp[startIndex++] = src[leftIndex++];\n        }\n        // 如果右边的区间索引值还没到终点，则把右边区间的值依次赋给辅助数组\n        while (rightIndex <= high) {\n            temp[startIndex++] = src[rightIndex++];\n        }\n        //把辅助数组里的值赋给目标数组，目标数组的初始下标为传入的最左下标\n        for (int i = 0; i < temp.length; i++) {\n            src[low+i] = temp[i];\n        }\n    }\n\n    /**\n     * 分别给左右区间排序\n     *\n     * @param src\n     * @param low\n     * @param high\n     */\n    public static void MSort(int src[], int low, int high) {\n        int mid = (low + high) / 2;\n        // 递归的结束条件\n        if (low == high) {\n            return;\n        }\n        // 给左子区间排序\n        MSort(src, low, mid);\n        // 给右子区间排序\n        MSort(src, mid + 1, high);\n        // 归并\n        merge(src, low, mid, high);\n    }\n\n    /**\n     * 归并排序\n     *\n     * @param arr\n     * @param length\n     * @return\n     */\n    public static void mergeSort(int arr[], int length) {\n        MSort(arr, 0, length-1);\n    }\n\n    public static void main(String[] args) {\n        int arr[] = { 54, 35, 48, 36, 27, 12, 44, 44, 8, 14, 26, 17, 28 };\n        MergeSort.mergeSort(arr, arr.length);\n        System.out.println(Arrays.toString(arr));\n    }\n\n}\n\n```\n\n**6.快速排序**\n\n```\npackage pers.yijin.sort;\n\nimport java.util.Arrays;\n\n/**\n * 快速排序 时间复杂度O(N*logN)\n *\n * @author Administrator\n *\n */\npublic class QuickSort {\n    /**\n     * 划分左右子区间，使左子区间的里的值都小于切分的，使右子区间的里的值都大于切分点。\n     *\n     * @param arr\n     * @param left\n     * @param right\n     * @return\n     */\n    public static int partition(int arr[], int low, int high) {\n        // 得到切分点\n        int pivot = arr[low];\n        // 左右扫描指针\n        int left = low+1;\n        int right = high;\n        while (true) {\n            while (arr[left] <= pivot) {\n                left++;\n                if (left >= high) {\n                    break;\n                }\n            }\n            while (arr[right] > pivot) {\n                right--;\n                if (right == low) {\n                    break;\n                }\n            }\n            if (left >= right) {\n                break;\n            }\n            swap(arr, left, right);\n        }\n        swap(arr, low, right);\n\n        return right;\n    }\n\n    /**\n     * 递归调用\n     *\n     * @param arr\n     * @param left\n     * @param right\n     */\n    public static void QSort(int arr[], int low, int high) {\n        if (low >= high) {\n            return;\n        }\n        int pivot = partition(arr, low, high);\n        QSort(arr, low, pivot - 1);\n        QSort(arr, pivot + 1, high);\n\n    }\n\n    /**\n     * 快速排序\n     *\n     * @param arr\n     * @param length\n     */\n    public static void quickSort(int arr[], int length) {\n        QSort(arr, 0, length - 1);\n    }\n\n    // 交换算法\n    private static void swap(int[] arr, int current, int next) {\n        int temp = arr[current];\n        arr[current] = arr[next];\n        arr[next] = temp;\n    }\n\n    public static void main(String[] args) {\n        int arr[] = { 14,313,206,53,182,215,169,148,158,272,22,80,176,200,266,301,37,234,174,163,158,158,112,281,86,14,306,137,258,27,247,33,102,5,217,254,286,255,195,234,229,225,296,158,247,42,124,96,292,71,303,144,57,297,315,44,20,111,68,92,181,187,130,167,59,156,240,75,118,184,46,94,74,142,14,313,206,53,182,215,169,148,158,272,22,80,176,200,266,301,37,234,174,163,158,158,112,281,86,14,306,137,258,27,247,33,102,5,217,254,286,255,195,234,229,225,296,158,247,42,124,96,292,71,303,144,57,297,315,44,20,111,68,92,181,187,130,167,59,156,240,75,118,184,46,94,74,142,14,313,206,53,182,215,169,148,158,272,22,80,176,200,266,301,37,234,174,163,158,158,112,281,86,14,306,137,258,27,247,33,102,5,217,254,286,255,195,234,229,225,296,158,247,42,124,96,292,71,303,144,57,297,315,44,20,111,68,92,181,187,130,167,59,156,240,75,118,184,46,94,74,142 };\n        quickSort(arr, arr.length);\n        System.out.println(Arrays.toString(arr));\n\n    }\n\n}\n\n```\n\n**7.堆排序（代码有问题，只当记录。求指导。。）**\n\n```\npackage pers.yijin.sort;\n\nimport java.util.Arrays;\n\n/**\n * 堆排序 时间复杂度O(NlogN) 提示：使用优先队列构造堆(二叉树)\n *\n * @author Administrator\n *\n */\npublic class HeapSort {\n\n    public static int[] heapSort(int[] arr) {\n        int size = arr.length -1;\n        //只需将堆元素的一半下沉，就能使堆有序\n        for (int k = size / 2 -1; k >= 0; k--) {\n            sink(arr, k, size);\n        }\n        while(size > 0){\n            //将最大元素与最小元素交换，并把交换后的最大元素脱离\n            swap(arr, 0, size--);\n            //下沉最小元素，找到第二大元素，继续交换\n            sink(arr, 0, size);\n        }\n\n        return arr;\n    }\n\n    /**\n     * 下沉算法，使堆有序\n     * @param arr\n     * @param k\n     * @param size\n     */\n    private static void sink(int[] arr, int k, int size) {\n        while (2 * k +1  <= size) {\n            int j = 2 * k + 1;\n            if (j < size && arr[j] < arr[j+1]) {\n                j++;\n            }\n            if (arr[k] > arr[j]) {\n                break;\n            }\n            swap(arr, k, j);\n            k = j;\n        }\n    }\n\n    // 交换算法\n    private static void swap(int[] arr, int current, int next) {\n        int temp = arr[current];\n        arr[current] = arr[next];\n        arr[next] = temp;\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {106,167,277,74,146,58,160,201,144,99,146,234,305,337,375,88,64,366,36,227,220,87,163,245,95,128,350,319,129,15,80,326,266,46,216,286,342,150,200,237,299,103,68,126,121,119,149,9,362,210,269,185,262,323,350,27,170,21,110,159,128,328,290,28,253,122,193,176,39,330,260,312,342,27,95,52,163,138,376,358};\n        heapSort(arr);\n        System.out.println(Arrays.toString(arr));\n        Arrays.sort(arr);\n        System.out.println(Arrays.toString(arr));\n    }\n\n}\n\n```\n","slug":"程序员必会算法系列--基本排序7个","published":1,"updated":"2017-07-29T06:34:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjksf3cxk0039h8efk4yjybvr","content":"<p><strong>1.冒泡排序</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package pers.yijin.sort;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 冒泡排序</span><br><span class=\"line\"> * 时间复杂度O(n2)</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author Administrator</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class BubbleSort &#123;</span><br><span class=\"line\">    // 排序算法</span><br><span class=\"line\">    public static int[] bubbleSort(int[] A, int n) &#123;</span><br><span class=\"line\">        long startTime = System.nanoTime();</span><br><span class=\"line\">        // i控制比较次数</span><br><span class=\"line\">        for (int i = 0; i &lt; n; i++) &#123;</span><br><span class=\"line\">            for (int j = n - 2; j &gt;= i; j--) &#123;</span><br><span class=\"line\">                if (A[j + 1] &lt; A[j]) &#123;</span><br><span class=\"line\">                    swap(A, j, j + 1);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        long endTime = System.nanoTime();</span><br><span class=\"line\">        System.out.println(&quot;优化前运行时间为：&quot;+(endTime-startTime)+&quot;纳秒&quot;);</span><br><span class=\"line\">        return A;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 排序算法优化</span><br><span class=\"line\">    public static int[] newBubbleSort(int[] A, int n) &#123;</span><br><span class=\"line\">        long startTime = System.nanoTime();</span><br><span class=\"line\">        // i控制比较次数</span><br><span class=\"line\">        boolean flag = true;</span><br><span class=\"line\">        for (int i = 0; i &lt; n &amp;&amp; flag; i++) &#123;</span><br><span class=\"line\">            flag = false;</span><br><span class=\"line\">            for (int j = n - 2; j &gt;= i; j--) &#123;</span><br><span class=\"line\">                if (A[j + 1] &lt; A[j]) &#123;</span><br><span class=\"line\">                    swap(A, j, j + 1);</span><br><span class=\"line\">                    flag = true;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        long endTime = System.nanoTime();</span><br><span class=\"line\">        System.out.println(&quot;优化后运行时间为：&quot;+(endTime-startTime)+&quot;纳秒&quot;);</span><br><span class=\"line\">        return A;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 交换算法</span><br><span class=\"line\">    private static void swap(int[] arr, int current, int next) &#123;</span><br><span class=\"line\">        int temp = arr[current];</span><br><span class=\"line\">        arr[current] = arr[next];</span><br><span class=\"line\">        arr[next] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 测试</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        int arr[] = &#123; 54, 35, 48, 36, 27, 12, 44, 44, 8, 14, 26, 17, 28 &#125;;</span><br><span class=\"line\">        int arr1[] = &#123;54, 35, 48, 36, 27, 12, 44, 44, 8, 14, 26, 17, 28&#125;;</span><br><span class=\"line\">        System.out.println(Arrays.toString(BubbleSort.bubbleSort(arr, arr.length)));</span><br><span class=\"line\">        System.out.println(&quot;-------------------------------------------------------&quot;);</span><br><span class=\"line\">        System.out.println(Arrays.toString(BubbleSort.newBubbleSort(arr1, arr1.length)));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>2.选择排序</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package pers.yijin.sort;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 选择排序</span><br><span class=\"line\"> * 时间复杂度O(n2)</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author Administrator</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class SelectionSort &#123;</span><br><span class=\"line\">    public static int[] selectionSort(int A[], int length) &#123;</span><br><span class=\"line\">        int min = -1;</span><br><span class=\"line\">        for (int i = 0; i &lt; length; i++) &#123;</span><br><span class=\"line\">            //初始化最小值的索引为i</span><br><span class=\"line\">            min = i;</span><br><span class=\"line\">            for (int j = i + 1; j &lt; length; j++) &#123;</span><br><span class=\"line\">                if (A[min] &gt; A[j]) &#123;</span><br><span class=\"line\">                    min = j;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if(min != i)&#123;</span><br><span class=\"line\">                swap(A, i, min);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return A;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 交换算法</span><br><span class=\"line\">    private static void swap(int[] arr, int current, int next) &#123;</span><br><span class=\"line\">        int temp = arr[current];</span><br><span class=\"line\">        arr[current] = arr[next];</span><br><span class=\"line\">        arr[next] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 测试</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        int arr[] = &#123; 54, 35, 48, 36, 27, 12, 44, 44, 8, 14, 26, 17, 28 &#125;;</span><br><span class=\"line\">        System.out.println(Arrays.toString(SelectionSort.selectionSort(arr, arr.length)));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>3.插入排序</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package pers.yijin.sort;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 插入排序</span><br><span class=\"line\"> * 时间复杂度O(n2)</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author Administrator</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class InsertSort &#123;</span><br><span class=\"line\">    // 排序算法</span><br><span class=\"line\">    public static int[] insertSort(int[] A, int n) &#123;</span><br><span class=\"line\">        //空出索引0，认为A[0]是有序的</span><br><span class=\"line\">        for(int i = 1; i &lt; n; i++)&#123;</span><br><span class=\"line\">            //依次用A[i]与A[i]左边的值比较，找到插入位置</span><br><span class=\"line\">            for(int j = i; j &gt; 0; j--)&#123;</span><br><span class=\"line\">                if(A[j-1] &gt; A[j])&#123;</span><br><span class=\"line\">                    swap(A, j, j-1);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return A;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 交换算法</span><br><span class=\"line\">    private static void swap(int[] arr, int current, int next) &#123;</span><br><span class=\"line\">        int temp = arr[current];</span><br><span class=\"line\">        arr[current] = arr[next];</span><br><span class=\"line\">        arr[next] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 测试</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        int arr[] = &#123; 54, 35, 48, 36, 27, 12, 44, 44, 8, 14, 26, 17, 28 &#125;;</span><br><span class=\"line\">        System.out.println(Arrays.toString(InsertSort.insertSort(arr, arr.length)));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>4.插入排序的进阶–希尔排序</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package pers.yijin.sort;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 希尔排序</span><br><span class=\"line\"> * 时间复杂度为O(N*logN)</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author Administrator</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class ShellSort &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static int[] shellSort(int arr[], int length) &#123;</span><br><span class=\"line\">        //初始化一个步长</span><br><span class=\"line\">        int step = 1;</span><br><span class=\"line\">        //获得一个最优步长</span><br><span class=\"line\">        while (step &lt; length / 3) &#123;</span><br><span class=\"line\">            step = 3*step +1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //根据步长执行插入排序</span><br><span class=\"line\">        while (step &gt;= 1) &#123;</span><br><span class=\"line\">            for (int i = step; i &lt; length ; i++) &#123;</span><br><span class=\"line\">                for (int j = i; j &gt;= step ; j = j - step) &#123;</span><br><span class=\"line\">                    if (arr[j] &lt; arr[j - step]) &#123;</span><br><span class=\"line\">                        swap(arr, j, j - step);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            //缩小步长划分的数组范围</span><br><span class=\"line\">            step = step / 3;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return arr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 交换算法</span><br><span class=\"line\">    private static void swap(int[] arr, int current, int next) &#123;</span><br><span class=\"line\">        int temp = arr[current];</span><br><span class=\"line\">        arr[current] = arr[next];</span><br><span class=\"line\">        arr[next] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        int arr[] = &#123; 255,64,108,341,217,35,263,272,49,225,229,5,184,119,200,239,126,361,333,58,145,204,322,313,141,95,190,41,5,16,139,212,281,72,302,5,178,156,33,87,116,12,69,253,178,78,95,245,260,218,131,311,175,150,370,164,350,192,373,294,239,325,25,137,147,354,287,169,37,102,232 &#125;;</span><br><span class=\"line\">        System.out.println(Arrays.toString(ShellSort.shellSort(arr, arr.length)));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>5.归并排序</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package pers.yijin.sort;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 归并排序</span><br><span class=\"line\"> * 时间复杂度O(N*logN)</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author Administrator</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class MergeSort &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 归并操作，将两个有序的子区间归并成一个有序的子区间</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param src</span><br><span class=\"line\">     * @param des</span><br><span class=\"line\">     * @param low</span><br><span class=\"line\">     * @param mid</span><br><span class=\"line\">     * @param high</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private static int[] temp;</span><br><span class=\"line\">    public static void merge(int src[], int low, int mid, int high) &#123;</span><br><span class=\"line\">        // 左边子区间的第一个索引值</span><br><span class=\"line\">        int leftIndex = low;</span><br><span class=\"line\">        // 右边子区间的第一个索引值</span><br><span class=\"line\">        int rightIndex = mid + 1;</span><br><span class=\"line\">        // 辅助数组的第一个索引值</span><br><span class=\"line\">        int startIndex = 0;</span><br><span class=\"line\">        //辅助数组</span><br><span class=\"line\">        temp = new int[high-low+1];</span><br><span class=\"line\">        // 归并操作</span><br><span class=\"line\">        while (leftIndex &lt;= mid &amp;&amp; rightIndex &lt;= high) &#123;</span><br><span class=\"line\">            if (src[leftIndex] &lt; src[rightIndex]) &#123;</span><br><span class=\"line\">                temp[startIndex++] = src[leftIndex++];</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                temp[startIndex++] = src[rightIndex++];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 如果左边的区间索引值还没到终点，则把左边区间的值依次赋给辅助数组</span><br><span class=\"line\">        while (leftIndex &lt;= mid) &#123;</span><br><span class=\"line\">            temp[startIndex++] = src[leftIndex++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 如果右边的区间索引值还没到终点，则把右边区间的值依次赋给辅助数组</span><br><span class=\"line\">        while (rightIndex &lt;= high) &#123;</span><br><span class=\"line\">            temp[startIndex++] = src[rightIndex++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //把辅助数组里的值赋给目标数组，目标数组的初始下标为传入的最左下标</span><br><span class=\"line\">        for (int i = 0; i &lt; temp.length; i++) &#123;</span><br><span class=\"line\">            src[low+i] = temp[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 分别给左右区间排序</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param src</span><br><span class=\"line\">     * @param low</span><br><span class=\"line\">     * @param high</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static void MSort(int src[], int low, int high) &#123;</span><br><span class=\"line\">        int mid = (low + high) / 2;</span><br><span class=\"line\">        // 递归的结束条件</span><br><span class=\"line\">        if (low == high) &#123;</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 给左子区间排序</span><br><span class=\"line\">        MSort(src, low, mid);</span><br><span class=\"line\">        // 给右子区间排序</span><br><span class=\"line\">        MSort(src, mid + 1, high);</span><br><span class=\"line\">        // 归并</span><br><span class=\"line\">        merge(src, low, mid, high);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 归并排序</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param arr</span><br><span class=\"line\">     * @param length</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static void mergeSort(int arr[], int length) &#123;</span><br><span class=\"line\">        MSort(arr, 0, length-1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        int arr[] = &#123; 54, 35, 48, 36, 27, 12, 44, 44, 8, 14, 26, 17, 28 &#125;;</span><br><span class=\"line\">        MergeSort.mergeSort(arr, arr.length);</span><br><span class=\"line\">        System.out.println(Arrays.toString(arr));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>6.快速排序</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package pers.yijin.sort;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 快速排序 时间复杂度O(N*logN)</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author Administrator</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class QuickSort &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 划分左右子区间，使左子区间的里的值都小于切分的，使右子区间的里的值都大于切分点。</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param arr</span><br><span class=\"line\">     * @param left</span><br><span class=\"line\">     * @param right</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static int partition(int arr[], int low, int high) &#123;</span><br><span class=\"line\">        // 得到切分点</span><br><span class=\"line\">        int pivot = arr[low];</span><br><span class=\"line\">        // 左右扫描指针</span><br><span class=\"line\">        int left = low+1;</span><br><span class=\"line\">        int right = high;</span><br><span class=\"line\">        while (true) &#123;</span><br><span class=\"line\">            while (arr[left] &lt;= pivot) &#123;</span><br><span class=\"line\">                left++;</span><br><span class=\"line\">                if (left &gt;= high) &#123;</span><br><span class=\"line\">                    break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            while (arr[right] &gt; pivot) &#123;</span><br><span class=\"line\">                right--;</span><br><span class=\"line\">                if (right == low) &#123;</span><br><span class=\"line\">                    break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if (left &gt;= right) &#123;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            swap(arr, left, right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        swap(arr, low, right);</span><br><span class=\"line\"></span><br><span class=\"line\">        return right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 递归调用</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param arr</span><br><span class=\"line\">     * @param left</span><br><span class=\"line\">     * @param right</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static void QSort(int arr[], int low, int high) &#123;</span><br><span class=\"line\">        if (low &gt;= high) &#123;</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        int pivot = partition(arr, low, high);</span><br><span class=\"line\">        QSort(arr, low, pivot - 1);</span><br><span class=\"line\">        QSort(arr, pivot + 1, high);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 快速排序</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param arr</span><br><span class=\"line\">     * @param length</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static void quickSort(int arr[], int length) &#123;</span><br><span class=\"line\">        QSort(arr, 0, length - 1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 交换算法</span><br><span class=\"line\">    private static void swap(int[] arr, int current, int next) &#123;</span><br><span class=\"line\">        int temp = arr[current];</span><br><span class=\"line\">        arr[current] = arr[next];</span><br><span class=\"line\">        arr[next] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        int arr[] = &#123; 14,313,206,53,182,215,169,148,158,272,22,80,176,200,266,301,37,234,174,163,158,158,112,281,86,14,306,137,258,27,247,33,102,5,217,254,286,255,195,234,229,225,296,158,247,42,124,96,292,71,303,144,57,297,315,44,20,111,68,92,181,187,130,167,59,156,240,75,118,184,46,94,74,142,14,313,206,53,182,215,169,148,158,272,22,80,176,200,266,301,37,234,174,163,158,158,112,281,86,14,306,137,258,27,247,33,102,5,217,254,286,255,195,234,229,225,296,158,247,42,124,96,292,71,303,144,57,297,315,44,20,111,68,92,181,187,130,167,59,156,240,75,118,184,46,94,74,142,14,313,206,53,182,215,169,148,158,272,22,80,176,200,266,301,37,234,174,163,158,158,112,281,86,14,306,137,258,27,247,33,102,5,217,254,286,255,195,234,229,225,296,158,247,42,124,96,292,71,303,144,57,297,315,44,20,111,68,92,181,187,130,167,59,156,240,75,118,184,46,94,74,142 &#125;;</span><br><span class=\"line\">        quickSort(arr, arr.length);</span><br><span class=\"line\">        System.out.println(Arrays.toString(arr));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>7.堆排序（代码有问题，只当记录。求指导。。）</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package pers.yijin.sort;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 堆排序 时间复杂度O(NlogN) 提示：使用优先队列构造堆(二叉树)</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author Administrator</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class HeapSort &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static int[] heapSort(int[] arr) &#123;</span><br><span class=\"line\">        int size = arr.length -1;</span><br><span class=\"line\">        //只需将堆元素的一半下沉，就能使堆有序</span><br><span class=\"line\">        for (int k = size / 2 -1; k &gt;= 0; k--) &#123;</span><br><span class=\"line\">            sink(arr, k, size);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        while(size &gt; 0)&#123;</span><br><span class=\"line\">            //将最大元素与最小元素交换，并把交换后的最大元素脱离</span><br><span class=\"line\">            swap(arr, 0, size--);</span><br><span class=\"line\">            //下沉最小元素，找到第二大元素，继续交换</span><br><span class=\"line\">            sink(arr, 0, size);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return arr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 下沉算法，使堆有序</span><br><span class=\"line\">     * @param arr</span><br><span class=\"line\">     * @param k</span><br><span class=\"line\">     * @param size</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private static void sink(int[] arr, int k, int size) &#123;</span><br><span class=\"line\">        while (2 * k +1  &lt;= size) &#123;</span><br><span class=\"line\">            int j = 2 * k + 1;</span><br><span class=\"line\">            if (j &lt; size &amp;&amp; arr[j] &lt; arr[j+1]) &#123;</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if (arr[k] &gt; arr[j]) &#123;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            swap(arr, k, j);</span><br><span class=\"line\">            k = j;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 交换算法</span><br><span class=\"line\">    private static void swap(int[] arr, int current, int next) &#123;</span><br><span class=\"line\">        int temp = arr[current];</span><br><span class=\"line\">        arr[current] = arr[next];</span><br><span class=\"line\">        arr[next] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        int[] arr = &#123;106,167,277,74,146,58,160,201,144,99,146,234,305,337,375,88,64,366,36,227,220,87,163,245,95,128,350,319,129,15,80,326,266,46,216,286,342,150,200,237,299,103,68,126,121,119,149,9,362,210,269,185,262,323,350,27,170,21,110,159,128,328,290,28,253,122,193,176,39,330,260,312,342,27,95,52,163,138,376,358&#125;;</span><br><span class=\"line\">        heapSort(arr);</span><br><span class=\"line\">        System.out.println(Arrays.toString(arr));</span><br><span class=\"line\">        Arrays.sort(arr);</span><br><span class=\"line\">        System.out.println(Arrays.toString(arr));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>1.冒泡排序</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package pers.yijin.sort;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 冒泡排序</span><br><span class=\"line\"> * 时间复杂度O(n2)</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author Administrator</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class BubbleSort &#123;</span><br><span class=\"line\">    // 排序算法</span><br><span class=\"line\">    public static int[] bubbleSort(int[] A, int n) &#123;</span><br><span class=\"line\">        long startTime = System.nanoTime();</span><br><span class=\"line\">        // i控制比较次数</span><br><span class=\"line\">        for (int i = 0; i &lt; n; i++) &#123;</span><br><span class=\"line\">            for (int j = n - 2; j &gt;= i; j--) &#123;</span><br><span class=\"line\">                if (A[j + 1] &lt; A[j]) &#123;</span><br><span class=\"line\">                    swap(A, j, j + 1);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        long endTime = System.nanoTime();</span><br><span class=\"line\">        System.out.println(&quot;优化前运行时间为：&quot;+(endTime-startTime)+&quot;纳秒&quot;);</span><br><span class=\"line\">        return A;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 排序算法优化</span><br><span class=\"line\">    public static int[] newBubbleSort(int[] A, int n) &#123;</span><br><span class=\"line\">        long startTime = System.nanoTime();</span><br><span class=\"line\">        // i控制比较次数</span><br><span class=\"line\">        boolean flag = true;</span><br><span class=\"line\">        for (int i = 0; i &lt; n &amp;&amp; flag; i++) &#123;</span><br><span class=\"line\">            flag = false;</span><br><span class=\"line\">            for (int j = n - 2; j &gt;= i; j--) &#123;</span><br><span class=\"line\">                if (A[j + 1] &lt; A[j]) &#123;</span><br><span class=\"line\">                    swap(A, j, j + 1);</span><br><span class=\"line\">                    flag = true;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        long endTime = System.nanoTime();</span><br><span class=\"line\">        System.out.println(&quot;优化后运行时间为：&quot;+(endTime-startTime)+&quot;纳秒&quot;);</span><br><span class=\"line\">        return A;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 交换算法</span><br><span class=\"line\">    private static void swap(int[] arr, int current, int next) &#123;</span><br><span class=\"line\">        int temp = arr[current];</span><br><span class=\"line\">        arr[current] = arr[next];</span><br><span class=\"line\">        arr[next] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 测试</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        int arr[] = &#123; 54, 35, 48, 36, 27, 12, 44, 44, 8, 14, 26, 17, 28 &#125;;</span><br><span class=\"line\">        int arr1[] = &#123;54, 35, 48, 36, 27, 12, 44, 44, 8, 14, 26, 17, 28&#125;;</span><br><span class=\"line\">        System.out.println(Arrays.toString(BubbleSort.bubbleSort(arr, arr.length)));</span><br><span class=\"line\">        System.out.println(&quot;-------------------------------------------------------&quot;);</span><br><span class=\"line\">        System.out.println(Arrays.toString(BubbleSort.newBubbleSort(arr1, arr1.length)));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>2.选择排序</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package pers.yijin.sort;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 选择排序</span><br><span class=\"line\"> * 时间复杂度O(n2)</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author Administrator</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class SelectionSort &#123;</span><br><span class=\"line\">    public static int[] selectionSort(int A[], int length) &#123;</span><br><span class=\"line\">        int min = -1;</span><br><span class=\"line\">        for (int i = 0; i &lt; length; i++) &#123;</span><br><span class=\"line\">            //初始化最小值的索引为i</span><br><span class=\"line\">            min = i;</span><br><span class=\"line\">            for (int j = i + 1; j &lt; length; j++) &#123;</span><br><span class=\"line\">                if (A[min] &gt; A[j]) &#123;</span><br><span class=\"line\">                    min = j;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if(min != i)&#123;</span><br><span class=\"line\">                swap(A, i, min);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return A;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 交换算法</span><br><span class=\"line\">    private static void swap(int[] arr, int current, int next) &#123;</span><br><span class=\"line\">        int temp = arr[current];</span><br><span class=\"line\">        arr[current] = arr[next];</span><br><span class=\"line\">        arr[next] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 测试</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        int arr[] = &#123; 54, 35, 48, 36, 27, 12, 44, 44, 8, 14, 26, 17, 28 &#125;;</span><br><span class=\"line\">        System.out.println(Arrays.toString(SelectionSort.selectionSort(arr, arr.length)));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>3.插入排序</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package pers.yijin.sort;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 插入排序</span><br><span class=\"line\"> * 时间复杂度O(n2)</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author Administrator</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class InsertSort &#123;</span><br><span class=\"line\">    // 排序算法</span><br><span class=\"line\">    public static int[] insertSort(int[] A, int n) &#123;</span><br><span class=\"line\">        //空出索引0，认为A[0]是有序的</span><br><span class=\"line\">        for(int i = 1; i &lt; n; i++)&#123;</span><br><span class=\"line\">            //依次用A[i]与A[i]左边的值比较，找到插入位置</span><br><span class=\"line\">            for(int j = i; j &gt; 0; j--)&#123;</span><br><span class=\"line\">                if(A[j-1] &gt; A[j])&#123;</span><br><span class=\"line\">                    swap(A, j, j-1);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return A;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 交换算法</span><br><span class=\"line\">    private static void swap(int[] arr, int current, int next) &#123;</span><br><span class=\"line\">        int temp = arr[current];</span><br><span class=\"line\">        arr[current] = arr[next];</span><br><span class=\"line\">        arr[next] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 测试</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        int arr[] = &#123; 54, 35, 48, 36, 27, 12, 44, 44, 8, 14, 26, 17, 28 &#125;;</span><br><span class=\"line\">        System.out.println(Arrays.toString(InsertSort.insertSort(arr, arr.length)));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>4.插入排序的进阶–希尔排序</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package pers.yijin.sort;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 希尔排序</span><br><span class=\"line\"> * 时间复杂度为O(N*logN)</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author Administrator</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class ShellSort &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static int[] shellSort(int arr[], int length) &#123;</span><br><span class=\"line\">        //初始化一个步长</span><br><span class=\"line\">        int step = 1;</span><br><span class=\"line\">        //获得一个最优步长</span><br><span class=\"line\">        while (step &lt; length / 3) &#123;</span><br><span class=\"line\">            step = 3*step +1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //根据步长执行插入排序</span><br><span class=\"line\">        while (step &gt;= 1) &#123;</span><br><span class=\"line\">            for (int i = step; i &lt; length ; i++) &#123;</span><br><span class=\"line\">                for (int j = i; j &gt;= step ; j = j - step) &#123;</span><br><span class=\"line\">                    if (arr[j] &lt; arr[j - step]) &#123;</span><br><span class=\"line\">                        swap(arr, j, j - step);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            //缩小步长划分的数组范围</span><br><span class=\"line\">            step = step / 3;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return arr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 交换算法</span><br><span class=\"line\">    private static void swap(int[] arr, int current, int next) &#123;</span><br><span class=\"line\">        int temp = arr[current];</span><br><span class=\"line\">        arr[current] = arr[next];</span><br><span class=\"line\">        arr[next] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        int arr[] = &#123; 255,64,108,341,217,35,263,272,49,225,229,5,184,119,200,239,126,361,333,58,145,204,322,313,141,95,190,41,5,16,139,212,281,72,302,5,178,156,33,87,116,12,69,253,178,78,95,245,260,218,131,311,175,150,370,164,350,192,373,294,239,325,25,137,147,354,287,169,37,102,232 &#125;;</span><br><span class=\"line\">        System.out.println(Arrays.toString(ShellSort.shellSort(arr, arr.length)));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>5.归并排序</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package pers.yijin.sort;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 归并排序</span><br><span class=\"line\"> * 时间复杂度O(N*logN)</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author Administrator</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class MergeSort &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 归并操作，将两个有序的子区间归并成一个有序的子区间</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param src</span><br><span class=\"line\">     * @param des</span><br><span class=\"line\">     * @param low</span><br><span class=\"line\">     * @param mid</span><br><span class=\"line\">     * @param high</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private static int[] temp;</span><br><span class=\"line\">    public static void merge(int src[], int low, int mid, int high) &#123;</span><br><span class=\"line\">        // 左边子区间的第一个索引值</span><br><span class=\"line\">        int leftIndex = low;</span><br><span class=\"line\">        // 右边子区间的第一个索引值</span><br><span class=\"line\">        int rightIndex = mid + 1;</span><br><span class=\"line\">        // 辅助数组的第一个索引值</span><br><span class=\"line\">        int startIndex = 0;</span><br><span class=\"line\">        //辅助数组</span><br><span class=\"line\">        temp = new int[high-low+1];</span><br><span class=\"line\">        // 归并操作</span><br><span class=\"line\">        while (leftIndex &lt;= mid &amp;&amp; rightIndex &lt;= high) &#123;</span><br><span class=\"line\">            if (src[leftIndex] &lt; src[rightIndex]) &#123;</span><br><span class=\"line\">                temp[startIndex++] = src[leftIndex++];</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                temp[startIndex++] = src[rightIndex++];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 如果左边的区间索引值还没到终点，则把左边区间的值依次赋给辅助数组</span><br><span class=\"line\">        while (leftIndex &lt;= mid) &#123;</span><br><span class=\"line\">            temp[startIndex++] = src[leftIndex++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 如果右边的区间索引值还没到终点，则把右边区间的值依次赋给辅助数组</span><br><span class=\"line\">        while (rightIndex &lt;= high) &#123;</span><br><span class=\"line\">            temp[startIndex++] = src[rightIndex++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //把辅助数组里的值赋给目标数组，目标数组的初始下标为传入的最左下标</span><br><span class=\"line\">        for (int i = 0; i &lt; temp.length; i++) &#123;</span><br><span class=\"line\">            src[low+i] = temp[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 分别给左右区间排序</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param src</span><br><span class=\"line\">     * @param low</span><br><span class=\"line\">     * @param high</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static void MSort(int src[], int low, int high) &#123;</span><br><span class=\"line\">        int mid = (low + high) / 2;</span><br><span class=\"line\">        // 递归的结束条件</span><br><span class=\"line\">        if (low == high) &#123;</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 给左子区间排序</span><br><span class=\"line\">        MSort(src, low, mid);</span><br><span class=\"line\">        // 给右子区间排序</span><br><span class=\"line\">        MSort(src, mid + 1, high);</span><br><span class=\"line\">        // 归并</span><br><span class=\"line\">        merge(src, low, mid, high);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 归并排序</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param arr</span><br><span class=\"line\">     * @param length</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static void mergeSort(int arr[], int length) &#123;</span><br><span class=\"line\">        MSort(arr, 0, length-1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        int arr[] = &#123; 54, 35, 48, 36, 27, 12, 44, 44, 8, 14, 26, 17, 28 &#125;;</span><br><span class=\"line\">        MergeSort.mergeSort(arr, arr.length);</span><br><span class=\"line\">        System.out.println(Arrays.toString(arr));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>6.快速排序</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package pers.yijin.sort;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 快速排序 时间复杂度O(N*logN)</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author Administrator</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class QuickSort &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 划分左右子区间，使左子区间的里的值都小于切分的，使右子区间的里的值都大于切分点。</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param arr</span><br><span class=\"line\">     * @param left</span><br><span class=\"line\">     * @param right</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static int partition(int arr[], int low, int high) &#123;</span><br><span class=\"line\">        // 得到切分点</span><br><span class=\"line\">        int pivot = arr[low];</span><br><span class=\"line\">        // 左右扫描指针</span><br><span class=\"line\">        int left = low+1;</span><br><span class=\"line\">        int right = high;</span><br><span class=\"line\">        while (true) &#123;</span><br><span class=\"line\">            while (arr[left] &lt;= pivot) &#123;</span><br><span class=\"line\">                left++;</span><br><span class=\"line\">                if (left &gt;= high) &#123;</span><br><span class=\"line\">                    break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            while (arr[right] &gt; pivot) &#123;</span><br><span class=\"line\">                right--;</span><br><span class=\"line\">                if (right == low) &#123;</span><br><span class=\"line\">                    break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if (left &gt;= right) &#123;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            swap(arr, left, right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        swap(arr, low, right);</span><br><span class=\"line\"></span><br><span class=\"line\">        return right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 递归调用</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param arr</span><br><span class=\"line\">     * @param left</span><br><span class=\"line\">     * @param right</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static void QSort(int arr[], int low, int high) &#123;</span><br><span class=\"line\">        if (low &gt;= high) &#123;</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        int pivot = partition(arr, low, high);</span><br><span class=\"line\">        QSort(arr, low, pivot - 1);</span><br><span class=\"line\">        QSort(arr, pivot + 1, high);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 快速排序</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param arr</span><br><span class=\"line\">     * @param length</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static void quickSort(int arr[], int length) &#123;</span><br><span class=\"line\">        QSort(arr, 0, length - 1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 交换算法</span><br><span class=\"line\">    private static void swap(int[] arr, int current, int next) &#123;</span><br><span class=\"line\">        int temp = arr[current];</span><br><span class=\"line\">        arr[current] = arr[next];</span><br><span class=\"line\">        arr[next] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        int arr[] = &#123; 14,313,206,53,182,215,169,148,158,272,22,80,176,200,266,301,37,234,174,163,158,158,112,281,86,14,306,137,258,27,247,33,102,5,217,254,286,255,195,234,229,225,296,158,247,42,124,96,292,71,303,144,57,297,315,44,20,111,68,92,181,187,130,167,59,156,240,75,118,184,46,94,74,142,14,313,206,53,182,215,169,148,158,272,22,80,176,200,266,301,37,234,174,163,158,158,112,281,86,14,306,137,258,27,247,33,102,5,217,254,286,255,195,234,229,225,296,158,247,42,124,96,292,71,303,144,57,297,315,44,20,111,68,92,181,187,130,167,59,156,240,75,118,184,46,94,74,142,14,313,206,53,182,215,169,148,158,272,22,80,176,200,266,301,37,234,174,163,158,158,112,281,86,14,306,137,258,27,247,33,102,5,217,254,286,255,195,234,229,225,296,158,247,42,124,96,292,71,303,144,57,297,315,44,20,111,68,92,181,187,130,167,59,156,240,75,118,184,46,94,74,142 &#125;;</span><br><span class=\"line\">        quickSort(arr, arr.length);</span><br><span class=\"line\">        System.out.println(Arrays.toString(arr));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>7.堆排序（代码有问题，只当记录。求指导。。）</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package pers.yijin.sort;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 堆排序 时间复杂度O(NlogN) 提示：使用优先队列构造堆(二叉树)</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author Administrator</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class HeapSort &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static int[] heapSort(int[] arr) &#123;</span><br><span class=\"line\">        int size = arr.length -1;</span><br><span class=\"line\">        //只需将堆元素的一半下沉，就能使堆有序</span><br><span class=\"line\">        for (int k = size / 2 -1; k &gt;= 0; k--) &#123;</span><br><span class=\"line\">            sink(arr, k, size);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        while(size &gt; 0)&#123;</span><br><span class=\"line\">            //将最大元素与最小元素交换，并把交换后的最大元素脱离</span><br><span class=\"line\">            swap(arr, 0, size--);</span><br><span class=\"line\">            //下沉最小元素，找到第二大元素，继续交换</span><br><span class=\"line\">            sink(arr, 0, size);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return arr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 下沉算法，使堆有序</span><br><span class=\"line\">     * @param arr</span><br><span class=\"line\">     * @param k</span><br><span class=\"line\">     * @param size</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private static void sink(int[] arr, int k, int size) &#123;</span><br><span class=\"line\">        while (2 * k +1  &lt;= size) &#123;</span><br><span class=\"line\">            int j = 2 * k + 1;</span><br><span class=\"line\">            if (j &lt; size &amp;&amp; arr[j] &lt; arr[j+1]) &#123;</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if (arr[k] &gt; arr[j]) &#123;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            swap(arr, k, j);</span><br><span class=\"line\">            k = j;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 交换算法</span><br><span class=\"line\">    private static void swap(int[] arr, int current, int next) &#123;</span><br><span class=\"line\">        int temp = arr[current];</span><br><span class=\"line\">        arr[current] = arr[next];</span><br><span class=\"line\">        arr[next] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        int[] arr = &#123;106,167,277,74,146,58,160,201,144,99,146,234,305,337,375,88,64,366,36,227,220,87,163,245,95,128,350,319,129,15,80,326,266,46,216,286,342,150,200,237,299,103,68,126,121,119,149,9,362,210,269,185,262,323,350,27,170,21,110,159,128,328,290,28,253,122,193,176,39,330,260,312,342,27,95,52,163,138,376,358&#125;;</span><br><span class=\"line\">        heapSort(arr);</span><br><span class=\"line\">        System.out.println(Arrays.toString(arr));</span><br><span class=\"line\">        Arrays.sort(arr);</span><br><span class=\"line\">        System.out.println(Arrays.toString(arr));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"解决this.getHibernateTemplate()的空指针异常的问题","date":"2017-07-29T13:49:27.000Z","description":"解决this.getHibernateTemplate()的空指针异常的问题","_content":"刚刚在整合SSH时碰到了这样一个问题：\n当我用junit测试时不会报任何异常，数据也都能得到\npublic class BuyerTest {\n@BeforeClass\npublic static void begin() throws Exception{}\n\n@Test\npublic void save(){\n　　Configuration config=new AnnotationConfiguration().configure();\n　　SessionFactory sf=config.buildSessionFactory();\n　　Session session=sf.openSession();\n　　Transaction tr=session.beginTransaction();\n　　try {\n　　　　tr.begin();\n　　　　Buyer b=(Buyer) session.get(Buyer.class,\"zs\");\n　　　　System.out.println(b.getUserpwd());\n　　　　tr.commit();\n　　　　} catch (HibernateException e) {\n　　　　　　e.printStackTrace();\n　　　　　　tr.rollback();\n　　　　}\n　　}\n}\n可是当我写个main方法测试dao包时，却出现空指针异常：\n\n\n\n我的代码是这样的：\ndao包：\npublic class BuyerDao extends HibernateDaoSupport {\n　　public Buyer save() {\n　　　　HibernateTemplate template=this.getHibernateTemplate();\n　　　　String hql=\"from Buyer u\";\n　　　　List<Buyer> list=template.find(hql);\n　　　　if(null==list){\n　　　　　　return null;\n　　　　}\n　　　　if(list.size()!=0){\n　　　　　　System.out.println(list.get(0).getUserpwd());\n　　　　　　return list.get(0);\n　　　　}\n　　　　return null;\n　　}\n}\n-----------------------------------------------------------------\nmain方法：\npublic class main {\n　　public static void main(String[] args) {\n　　　　BuyerDao udao=new BuyerDao();\n　　　　udao.save();\n　　　}\n}\n-----------------------------------------------------------------\n搞了好长时间，在网上找了下答案，没怎么看明白，但我发现有人说看看this.getHibernateTemplate()是否为空，我调试了下，发现我的代码中this.getHibernateTemplate()确实为null！！！\nps：我的applicationContext.xml文件没有错误。\n\n这里我们需要想一下为什么要用spring？或者说使用spring要用到它的什么思想等等。\n---使用spring是要用到它的依赖注入的，而直接new出来的是没有依赖注入的，故对象没有初始化。\n也就是说\nBuyerDao udao=new BuyerDao();\nudao.save();\n这里不存在依赖注入，也就自然而然地报空指针异常。\n解决办法：在main方法中，不要对BuyerDao 进行初始化，而是通过配置文件applicationContext.xml来获取。\nClassPathXmlApplicationContext resource  = new  ClassPathXmlApplicationContext(\"applicationContext.xml\");;\nBuyerDao dao=(BuyerDao) resource.getBean(\"userDao\");\ndao.save();\n\n注：userDao是配置文件applicationContext.xml中bean的id值\n<bean id=\"userDao\" class=\"jnuit.test.BuyerDao\">\n<property name=\"sessionFactory\" ref=\"sessionFactory\"></property>\n</bean>\n这样，this.getHibernateTemplate()==null的问题就解决了。\n","source":"_posts/解决this-getHibernateTemplate-的空指针异常的问题.md","raw":"---\ntitle: 解决this.getHibernateTemplate()的空指针异常的问题\ndate: 2017-07-29 21:49:27\ncategories: 遇到的坑\ntags:\n     - 填坑经验\ndescription: 解决this.getHibernateTemplate()的空指针异常的问题\n---\n刚刚在整合SSH时碰到了这样一个问题：\n当我用junit测试时不会报任何异常，数据也都能得到\npublic class BuyerTest {\n@BeforeClass\npublic static void begin() throws Exception{}\n\n@Test\npublic void save(){\n　　Configuration config=new AnnotationConfiguration().configure();\n　　SessionFactory sf=config.buildSessionFactory();\n　　Session session=sf.openSession();\n　　Transaction tr=session.beginTransaction();\n　　try {\n　　　　tr.begin();\n　　　　Buyer b=(Buyer) session.get(Buyer.class,\"zs\");\n　　　　System.out.println(b.getUserpwd());\n　　　　tr.commit();\n　　　　} catch (HibernateException e) {\n　　　　　　e.printStackTrace();\n　　　　　　tr.rollback();\n　　　　}\n　　}\n}\n可是当我写个main方法测试dao包时，却出现空指针异常：\n\n\n\n我的代码是这样的：\ndao包：\npublic class BuyerDao extends HibernateDaoSupport {\n　　public Buyer save() {\n　　　　HibernateTemplate template=this.getHibernateTemplate();\n　　　　String hql=\"from Buyer u\";\n　　　　List<Buyer> list=template.find(hql);\n　　　　if(null==list){\n　　　　　　return null;\n　　　　}\n　　　　if(list.size()!=0){\n　　　　　　System.out.println(list.get(0).getUserpwd());\n　　　　　　return list.get(0);\n　　　　}\n　　　　return null;\n　　}\n}\n-----------------------------------------------------------------\nmain方法：\npublic class main {\n　　public static void main(String[] args) {\n　　　　BuyerDao udao=new BuyerDao();\n　　　　udao.save();\n　　　}\n}\n-----------------------------------------------------------------\n搞了好长时间，在网上找了下答案，没怎么看明白，但我发现有人说看看this.getHibernateTemplate()是否为空，我调试了下，发现我的代码中this.getHibernateTemplate()确实为null！！！\nps：我的applicationContext.xml文件没有错误。\n\n这里我们需要想一下为什么要用spring？或者说使用spring要用到它的什么思想等等。\n---使用spring是要用到它的依赖注入的，而直接new出来的是没有依赖注入的，故对象没有初始化。\n也就是说\nBuyerDao udao=new BuyerDao();\nudao.save();\n这里不存在依赖注入，也就自然而然地报空指针异常。\n解决办法：在main方法中，不要对BuyerDao 进行初始化，而是通过配置文件applicationContext.xml来获取。\nClassPathXmlApplicationContext resource  = new  ClassPathXmlApplicationContext(\"applicationContext.xml\");;\nBuyerDao dao=(BuyerDao) resource.getBean(\"userDao\");\ndao.save();\n\n注：userDao是配置文件applicationContext.xml中bean的id值\n<bean id=\"userDao\" class=\"jnuit.test.BuyerDao\">\n<property name=\"sessionFactory\" ref=\"sessionFactory\"></property>\n</bean>\n这样，this.getHibernateTemplate()==null的问题就解决了。\n","slug":"解决this-getHibernateTemplate-的空指针异常的问题","published":1,"updated":"2017-07-29T13:50:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjksf3cxl003dh8ef90i7cezp","content":"<p>刚刚在整合SSH时碰到了这样一个问题：<br>当我用junit测试时不会报任何异常，数据也都能得到<br>public class BuyerTest {<br>@BeforeClass<br>public static void begin() throws Exception{}</p>\n<p>@Test<br>public void save(){<br>　　Configuration config=new AnnotationConfiguration().configure();<br>　　SessionFactory sf=config.buildSessionFactory();<br>　　Session session=sf.openSession();<br>　　Transaction tr=session.beginTransaction();<br>　　try {<br>　　　　tr.begin();<br>　　　　Buyer b=(Buyer) session.get(Buyer.class,”zs”);<br>　　　　System.out.println(b.getUserpwd());<br>　　　　tr.commit();<br>　　　　} catch (HibernateException e) {<br>　　　　　　e.printStackTrace();<br>　　　　　　tr.rollback();<br>　　　　}<br>　　}<br>}<br>可是当我写个main方法测试dao包时，却出现空指针异常：</p>\n<p>我的代码是这样的：<br>dao包：<br>public class BuyerDao extends HibernateDaoSupport {<br>　　public Buyer save() {<br>　　　　HibernateTemplate template=this.getHibernateTemplate();<br>　　　　String hql=”from Buyer u”;<br>　　　　List<buyer> list=template.find(hql);<br>　　　　if(null==list){<br>　　　　　　return null;<br>　　　　}<br>　　　　if(list.size()!=0){<br>　　　　　　System.out.println(list.get(0).getUserpwd());<br>　　　　　　return list.get(0);<br>　　　　}<br>　　　　return null;<br>　　}</buyer></p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"}\"></a>}</h2><p>main方法：<br>public class main {<br>　　public static void main(String[] args) {<br>　　　　BuyerDao udao=new BuyerDao();<br>　　　　udao.save();<br>　　　}</p>\n<h2 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"}\"></a>}</h2><p>搞了好长时间，在网上找了下答案，没怎么看明白，但我发现有人说看看this.getHibernateTemplate()是否为空，我调试了下，发现我的代码中this.getHibernateTemplate()确实为null！！！<br>ps：我的applicationContext.xml文件没有错误。</p>\n<p>这里我们需要想一下为什么要用spring？或者说使用spring要用到它的什么思想等等。<br>—使用spring是要用到它的依赖注入的，而直接new出来的是没有依赖注入的，故对象没有初始化。<br>也就是说<br>BuyerDao udao=new BuyerDao();<br>udao.save();<br>这里不存在依赖注入，也就自然而然地报空指针异常。<br>解决办法：在main方法中，不要对BuyerDao 进行初始化，而是通过配置文件applicationContext.xml来获取。<br>ClassPathXmlApplicationContext resource  = new  ClassPathXmlApplicationContext(“applicationContext.xml”);;<br>BuyerDao dao=(BuyerDao) resource.getBean(“userDao”);<br>dao.save();</p>\n<p>注：userDao是配置文件applicationContext.xml中bean的id值</p>\n<p><bean id=\"userDao\" class=\"jnuit.test.BuyerDao\"></bean></p>\n<p><property name=\"sessionFactory\" ref=\"sessionFactory\"></property><br><br>这样，this.getHibernateTemplate()==null的问题就解决了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>刚刚在整合SSH时碰到了这样一个问题：<br>当我用junit测试时不会报任何异常，数据也都能得到<br>public class BuyerTest {<br>@BeforeClass<br>public static void begin() throws Exception{}</p>\n<p>@Test<br>public void save(){<br>　　Configuration config=new AnnotationConfiguration().configure();<br>　　SessionFactory sf=config.buildSessionFactory();<br>　　Session session=sf.openSession();<br>　　Transaction tr=session.beginTransaction();<br>　　try {<br>　　　　tr.begin();<br>　　　　Buyer b=(Buyer) session.get(Buyer.class,”zs”);<br>　　　　System.out.println(b.getUserpwd());<br>　　　　tr.commit();<br>　　　　} catch (HibernateException e) {<br>　　　　　　e.printStackTrace();<br>　　　　　　tr.rollback();<br>　　　　}<br>　　}<br>}<br>可是当我写个main方法测试dao包时，却出现空指针异常：</p>\n<p>我的代码是这样的：<br>dao包：<br>public class BuyerDao extends HibernateDaoSupport {<br>　　public Buyer save() {<br>　　　　HibernateTemplate template=this.getHibernateTemplate();<br>　　　　String hql=”from Buyer u”;<br>　　　　List<buyer> list=template.find(hql);<br>　　　　if(null==list){<br>　　　　　　return null;<br>　　　　}<br>　　　　if(list.size()!=0){<br>　　　　　　System.out.println(list.get(0).getUserpwd());<br>　　　　　　return list.get(0);<br>　　　　}<br>　　　　return null;<br>　　}</buyer></p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"}\"></a>}</h2><p>main方法：<br>public class main {<br>　　public static void main(String[] args) {<br>　　　　BuyerDao udao=new BuyerDao();<br>　　　　udao.save();<br>　　　}</p>\n<h2 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"}\"></a>}</h2><p>搞了好长时间，在网上找了下答案，没怎么看明白，但我发现有人说看看this.getHibernateTemplate()是否为空，我调试了下，发现我的代码中this.getHibernateTemplate()确实为null！！！<br>ps：我的applicationContext.xml文件没有错误。</p>\n<p>这里我们需要想一下为什么要用spring？或者说使用spring要用到它的什么思想等等。<br>—使用spring是要用到它的依赖注入的，而直接new出来的是没有依赖注入的，故对象没有初始化。<br>也就是说<br>BuyerDao udao=new BuyerDao();<br>udao.save();<br>这里不存在依赖注入，也就自然而然地报空指针异常。<br>解决办法：在main方法中，不要对BuyerDao 进行初始化，而是通过配置文件applicationContext.xml来获取。<br>ClassPathXmlApplicationContext resource  = new  ClassPathXmlApplicationContext(“applicationContext.xml”);;<br>BuyerDao dao=(BuyerDao) resource.getBean(“userDao”);<br>dao.save();</p>\n<p>注：userDao是配置文件applicationContext.xml中bean的id值</p>\n<p><bean id=\"userDao\" class=\"jnuit.test.BuyerDao\"></bean></p>\n<p><property name=\"sessionFactory\" ref=\"sessionFactory\"></property><br><br>这样，this.getHibernateTemplate()==null的问题就解决了。</p>\n"},{"title":"详解圣杯和双飞翼布局","date":"2017-12-22T13:17:03.000Z","description":"CSS经典布局之圣杯和双飞翼布局","_content":"# 前言\n首先，圣杯布局和双飞翼布局都是要解决同一个问题，它们实现的都是两边固定，中间自适应的三栏布局，也就是**固-比-固**布局。圣杯布局和双飞翼布局的主要差别在于其各自实现的思想不同，最终所实现的效果都是一样的。\n\n# 圣杯布局\n实现代码如下：\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>圣杯布局示例</title>\n</head>\n<style>\n    /*防止浏览器屏幕过小而破坏布局*/\n\n    body {\n        min-width: 600px;\n    }\n\n    .header,\n    .footer {\n        height: 50px;\n        background-color: gray;\n    }\n\n    .wrapper {\n        padding-left: 210px;\n        padding-right: 190px;\n        overflow: hidden;\n        zoom: 1;\n    }\n\n    .wrapper .main {\n        float: left;\n        width: 100%;\n        height: 300px;\n        background-color: yellow;\n    }\n\n    .wrapper .left {\n        position: relative;\n        left: -210px;\n        float: left;\n        width: 200px;\n        height: 300px;\n        margin-left: -100%;\n        background-color: skyblue;\n    }\n\n    .wrapper .right {\n        position: relative;\n        right: -190px;\n        float: left;\n        width: 180px;\n        height: 300px;\n        margin-left: -180px;\n        background-color: red;\n    }\n</style>\n\n<body>\n    <header class=\"header\">header</header>\n    <div class=\"wrapper\">\n        <div class=\"main\">main</div>\n        <div class=\"left\">left</div>\n        <div class=\"right\">right</div>\n    </div>\n    <footer class=\"footer\">footer</footer>\n</body>\n\n</html>\n```\n实现思路：子元素统一左浮动，左右两栏通过负的外边距来与中间一栏保持对齐，然后通过父元素的内边距和左右两栏的相对定位实现三栏布局。\n优点：主要内容优先加载，没有多余div，允许任何列是最高的，兼容性好。\n\n# 双飞翼布局\n\n实现代码如下：\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>淘宝双飞翼布局示例</title>\n</head>\n<style>\n    .header,\n    .footer {\n        height: 50px;\n        background-color: gray;\n    }\n\n    .wrapper {\n        overflow: hidden;\n        zoom: 1;\n    }\n\n    .wrapper .main-wrapper {\n        float: left;\n        width: 100%;\n    }\n\n    .wrapper .main-wrapper .main {\n        height: 300px;\n        margin: 0 190px 0 210px;\n        background-color: yellow;\n    }\n\n    .wrapper .left {\n        float: left;\n        width: 200px;\n        height: 300px;\n        margin-left: -100%;\n        background-color: skyblue;\n    }\n\n    .wrapper .right {\n        float: right;\n        width: 180px;\n        height: 300px;\n        margin-left: -180px;\n        background-color: hotpink;\n    }\n</style>\n\n<body>\n    <header class=\"header\">header</header>\n    <div class=\"wrapper\">\n        <div class=\"main-wrapper\">\n            <div class=\"main\">main</div>\n        </div>\n        <div class=\"left\">left</div>\n        <div class=\"right\">right</div>\n    </div>\n    <footer class=\"footer\">footer</footer>\n</body>\n\n</html>\n```\n实现原理：子元素统一左浮动，左右两栏通过负的外边距来与中间一栏保持对齐，中间栏增加父容器，然后利用中间栏的外边距进行定位。\n优点：主要内容优先加载，兼容性比圣杯布局好，实现了内容与布局的分离，主元素宽度自适应，减少了相对定位。\n","source":"_posts/详解圣杯和双飞翼布局.md","raw":"---\ntitle: 详解圣杯和双飞翼布局\ndate: 2017-12-22 21:17:03\ncategories: css\ntags:\n     - css\n     - 经典布局\ndescription: CSS经典布局之圣杯和双飞翼布局\n---\n# 前言\n首先，圣杯布局和双飞翼布局都是要解决同一个问题，它们实现的都是两边固定，中间自适应的三栏布局，也就是**固-比-固**布局。圣杯布局和双飞翼布局的主要差别在于其各自实现的思想不同，最终所实现的效果都是一样的。\n\n# 圣杯布局\n实现代码如下：\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>圣杯布局示例</title>\n</head>\n<style>\n    /*防止浏览器屏幕过小而破坏布局*/\n\n    body {\n        min-width: 600px;\n    }\n\n    .header,\n    .footer {\n        height: 50px;\n        background-color: gray;\n    }\n\n    .wrapper {\n        padding-left: 210px;\n        padding-right: 190px;\n        overflow: hidden;\n        zoom: 1;\n    }\n\n    .wrapper .main {\n        float: left;\n        width: 100%;\n        height: 300px;\n        background-color: yellow;\n    }\n\n    .wrapper .left {\n        position: relative;\n        left: -210px;\n        float: left;\n        width: 200px;\n        height: 300px;\n        margin-left: -100%;\n        background-color: skyblue;\n    }\n\n    .wrapper .right {\n        position: relative;\n        right: -190px;\n        float: left;\n        width: 180px;\n        height: 300px;\n        margin-left: -180px;\n        background-color: red;\n    }\n</style>\n\n<body>\n    <header class=\"header\">header</header>\n    <div class=\"wrapper\">\n        <div class=\"main\">main</div>\n        <div class=\"left\">left</div>\n        <div class=\"right\">right</div>\n    </div>\n    <footer class=\"footer\">footer</footer>\n</body>\n\n</html>\n```\n实现思路：子元素统一左浮动，左右两栏通过负的外边距来与中间一栏保持对齐，然后通过父元素的内边距和左右两栏的相对定位实现三栏布局。\n优点：主要内容优先加载，没有多余div，允许任何列是最高的，兼容性好。\n\n# 双飞翼布局\n\n实现代码如下：\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>淘宝双飞翼布局示例</title>\n</head>\n<style>\n    .header,\n    .footer {\n        height: 50px;\n        background-color: gray;\n    }\n\n    .wrapper {\n        overflow: hidden;\n        zoom: 1;\n    }\n\n    .wrapper .main-wrapper {\n        float: left;\n        width: 100%;\n    }\n\n    .wrapper .main-wrapper .main {\n        height: 300px;\n        margin: 0 190px 0 210px;\n        background-color: yellow;\n    }\n\n    .wrapper .left {\n        float: left;\n        width: 200px;\n        height: 300px;\n        margin-left: -100%;\n        background-color: skyblue;\n    }\n\n    .wrapper .right {\n        float: right;\n        width: 180px;\n        height: 300px;\n        margin-left: -180px;\n        background-color: hotpink;\n    }\n</style>\n\n<body>\n    <header class=\"header\">header</header>\n    <div class=\"wrapper\">\n        <div class=\"main-wrapper\">\n            <div class=\"main\">main</div>\n        </div>\n        <div class=\"left\">left</div>\n        <div class=\"right\">right</div>\n    </div>\n    <footer class=\"footer\">footer</footer>\n</body>\n\n</html>\n```\n实现原理：子元素统一左浮动，左右两栏通过负的外边距来与中间一栏保持对齐，中间栏增加父容器，然后利用中间栏的外边距进行定位。\n优点：主要内容优先加载，兼容性比圣杯布局好，实现了内容与布局的分离，主元素宽度自适应，减少了相对定位。\n","slug":"详解圣杯和双飞翼布局","published":1,"updated":"2017-12-22T13:47:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjksf3cxm003hh8ef12aqf6yw","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>首先，圣杯布局和双飞翼布局都是要解决同一个问题，它们实现的都是两边固定，中间自适应的三栏布局，也就是<strong>固-比-固</strong>布局。圣杯布局和双飞翼布局的主要差别在于其各自实现的思想不同，最终所实现的效果都是一样的。</p>\n<h1 id=\"圣杯布局\"><a href=\"#圣杯布局\" class=\"headerlink\" title=\"圣杯布局\"></a>圣杯布局</h1><p>实现代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>圣杯布局示例<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"comment\">/*防止浏览器屏幕过小而破坏布局*/</span></span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    body &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        min-width: 600px;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.header</span>,</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.footer</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        height: 50px;</span></span><br><span class=\"line\"><span class=\"undefined\">        background-color: gray;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.wrapper</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        padding-left: 210px;</span></span><br><span class=\"line\"><span class=\"undefined\">        padding-right: 190px;</span></span><br><span class=\"line\"><span class=\"undefined\">        overflow: hidden;</span></span><br><span class=\"line\"><span class=\"undefined\">        zoom: 1;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.wrapper</span> <span class=\"selector-class\">.main</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">        width: 100%;</span></span><br><span class=\"line\"><span class=\"undefined\">        height: 300px;</span></span><br><span class=\"line\"><span class=\"undefined\">        background-color: yellow;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.wrapper</span> <span class=\"selector-class\">.left</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        position: relative;</span></span><br><span class=\"line\"><span class=\"undefined\">        left: -210px;</span></span><br><span class=\"line\"><span class=\"undefined\">        float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">        width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">        height: 300px;</span></span><br><span class=\"line\"><span class=\"undefined\">        margin-left: -100%;</span></span><br><span class=\"line\"><span class=\"undefined\">        background-color: skyblue;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.wrapper</span> <span class=\"selector-class\">.right</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        position: relative;</span></span><br><span class=\"line\"><span class=\"undefined\">        right: -190px;</span></span><br><span class=\"line\"><span class=\"undefined\">        float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">        width: 180px;</span></span><br><span class=\"line\"><span class=\"undefined\">        height: 300px;</span></span><br><span class=\"line\"><span class=\"undefined\">        margin-left: -180px;</span></span><br><span class=\"line\"><span class=\"undefined\">        background-color: red;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">header</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header\"</span>&gt;</span>header<span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrapper\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span>main<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left\"</span>&gt;</span>left<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right\"</span>&gt;</span>right<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">footer</span> <span class=\"attr\">class</span>=<span class=\"string\">\"footer\"</span>&gt;</span>footer<span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>实现思路：子元素统一左浮动，左右两栏通过负的外边距来与中间一栏保持对齐，然后通过父元素的内边距和左右两栏的相对定位实现三栏布局。<br>优点：主要内容优先加载，没有多余div，允许任何列是最高的，兼容性好。</p>\n<h1 id=\"双飞翼布局\"><a href=\"#双飞翼布局\" class=\"headerlink\" title=\"双飞翼布局\"></a>双飞翼布局</h1><p>实现代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>淘宝双飞翼布局示例<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.header</span>,</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.footer</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        height: 50px;</span></span><br><span class=\"line\"><span class=\"undefined\">        background-color: gray;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.wrapper</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        overflow: hidden;</span></span><br><span class=\"line\"><span class=\"undefined\">        zoom: 1;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.wrapper</span> <span class=\"selector-class\">.main-wrapper</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">        width: 100%;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.wrapper</span> <span class=\"selector-class\">.main-wrapper</span> <span class=\"selector-class\">.main</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        height: 300px;</span></span><br><span class=\"line\"><span class=\"undefined\">        margin: 0 190px 0 210px;</span></span><br><span class=\"line\"><span class=\"undefined\">        background-color: yellow;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.wrapper</span> <span class=\"selector-class\">.left</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">        width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">        height: 300px;</span></span><br><span class=\"line\"><span class=\"undefined\">        margin-left: -100%;</span></span><br><span class=\"line\"><span class=\"undefined\">        background-color: skyblue;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.wrapper</span> <span class=\"selector-class\">.right</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        float: right;</span></span><br><span class=\"line\"><span class=\"undefined\">        width: 180px;</span></span><br><span class=\"line\"><span class=\"undefined\">        height: 300px;</span></span><br><span class=\"line\"><span class=\"undefined\">        margin-left: -180px;</span></span><br><span class=\"line\"><span class=\"undefined\">        background-color: hotpink;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">header</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header\"</span>&gt;</span>header<span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrapper\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main-wrapper\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span>main<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left\"</span>&gt;</span>left<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right\"</span>&gt;</span>right<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">footer</span> <span class=\"attr\">class</span>=<span class=\"string\">\"footer\"</span>&gt;</span>footer<span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>实现原理：子元素统一左浮动，左右两栏通过负的外边距来与中间一栏保持对齐，中间栏增加父容器，然后利用中间栏的外边距进行定位。<br>优点：主要内容优先加载，兼容性比圣杯布局好，实现了内容与布局的分离，主元素宽度自适应，减少了相对定位。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>首先，圣杯布局和双飞翼布局都是要解决同一个问题，它们实现的都是两边固定，中间自适应的三栏布局，也就是<strong>固-比-固</strong>布局。圣杯布局和双飞翼布局的主要差别在于其各自实现的思想不同，最终所实现的效果都是一样的。</p>\n<h1 id=\"圣杯布局\"><a href=\"#圣杯布局\" class=\"headerlink\" title=\"圣杯布局\"></a>圣杯布局</h1><p>实现代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>圣杯布局示例<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"comment\">/*防止浏览器屏幕过小而破坏布局*/</span></span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    body &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        min-width: 600px;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.header</span>,</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.footer</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        height: 50px;</span></span><br><span class=\"line\"><span class=\"undefined\">        background-color: gray;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.wrapper</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        padding-left: 210px;</span></span><br><span class=\"line\"><span class=\"undefined\">        padding-right: 190px;</span></span><br><span class=\"line\"><span class=\"undefined\">        overflow: hidden;</span></span><br><span class=\"line\"><span class=\"undefined\">        zoom: 1;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.wrapper</span> <span class=\"selector-class\">.main</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">        width: 100%;</span></span><br><span class=\"line\"><span class=\"undefined\">        height: 300px;</span></span><br><span class=\"line\"><span class=\"undefined\">        background-color: yellow;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.wrapper</span> <span class=\"selector-class\">.left</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        position: relative;</span></span><br><span class=\"line\"><span class=\"undefined\">        left: -210px;</span></span><br><span class=\"line\"><span class=\"undefined\">        float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">        width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">        height: 300px;</span></span><br><span class=\"line\"><span class=\"undefined\">        margin-left: -100%;</span></span><br><span class=\"line\"><span class=\"undefined\">        background-color: skyblue;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.wrapper</span> <span class=\"selector-class\">.right</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        position: relative;</span></span><br><span class=\"line\"><span class=\"undefined\">        right: -190px;</span></span><br><span class=\"line\"><span class=\"undefined\">        float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">        width: 180px;</span></span><br><span class=\"line\"><span class=\"undefined\">        height: 300px;</span></span><br><span class=\"line\"><span class=\"undefined\">        margin-left: -180px;</span></span><br><span class=\"line\"><span class=\"undefined\">        background-color: red;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">header</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header\"</span>&gt;</span>header<span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrapper\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span>main<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left\"</span>&gt;</span>left<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right\"</span>&gt;</span>right<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">footer</span> <span class=\"attr\">class</span>=<span class=\"string\">\"footer\"</span>&gt;</span>footer<span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>实现思路：子元素统一左浮动，左右两栏通过负的外边距来与中间一栏保持对齐，然后通过父元素的内边距和左右两栏的相对定位实现三栏布局。<br>优点：主要内容优先加载，没有多余div，允许任何列是最高的，兼容性好。</p>\n<h1 id=\"双飞翼布局\"><a href=\"#双飞翼布局\" class=\"headerlink\" title=\"双飞翼布局\"></a>双飞翼布局</h1><p>实现代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>淘宝双飞翼布局示例<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.header</span>,</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.footer</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        height: 50px;</span></span><br><span class=\"line\"><span class=\"undefined\">        background-color: gray;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.wrapper</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        overflow: hidden;</span></span><br><span class=\"line\"><span class=\"undefined\">        zoom: 1;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.wrapper</span> <span class=\"selector-class\">.main-wrapper</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">        width: 100%;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.wrapper</span> <span class=\"selector-class\">.main-wrapper</span> <span class=\"selector-class\">.main</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        height: 300px;</span></span><br><span class=\"line\"><span class=\"undefined\">        margin: 0 190px 0 210px;</span></span><br><span class=\"line\"><span class=\"undefined\">        background-color: yellow;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.wrapper</span> <span class=\"selector-class\">.left</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">        width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">        height: 300px;</span></span><br><span class=\"line\"><span class=\"undefined\">        margin-left: -100%;</span></span><br><span class=\"line\"><span class=\"undefined\">        background-color: skyblue;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.wrapper</span> <span class=\"selector-class\">.right</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        float: right;</span></span><br><span class=\"line\"><span class=\"undefined\">        width: 180px;</span></span><br><span class=\"line\"><span class=\"undefined\">        height: 300px;</span></span><br><span class=\"line\"><span class=\"undefined\">        margin-left: -180px;</span></span><br><span class=\"line\"><span class=\"undefined\">        background-color: hotpink;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">header</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header\"</span>&gt;</span>header<span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrapper\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main-wrapper\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span>main<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left\"</span>&gt;</span>left<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right\"</span>&gt;</span>right<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">footer</span> <span class=\"attr\">class</span>=<span class=\"string\">\"footer\"</span>&gt;</span>footer<span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>实现原理：子元素统一左浮动，左右两栏通过负的外边距来与中间一栏保持对齐，中间栏增加父容器，然后利用中间栏的外边距进行定位。<br>优点：主要内容优先加载，兼容性比圣杯布局好，实现了内容与布局的分离，主元素宽度自适应，减少了相对定位。</p>\n"},{"title":"面试准备","date":"2017-11-05T14:36:48.000Z","description":"面试准备大纲","_content":"# 技术栈准备\n1. jquery源码博客阅读\n2. Vue源码博客阅读\n3. sass和less\n4. gulp工程化\n5. npm准备，常用命令\n6. webpack准备\n\n# 自我介绍准备\n\n# 页面布局知识点\n题目：假设高度已知，请写出三栏布局，其中左栏、右栏宽度各300px，中间自适应\n答案：\n浮动布局\n绝对定位布局\nflex布局\n网格grid布局\n### 一级延伸:\n5种方案的优缺点\n去掉高度已知，如何解决\n5种方案的兼容性\n### 页面布局的变通:\n三栏布局：上下高度固定，中间自适应(移动端)\n两栏布局：左宽度固定，右自适应\n两栏布局：右宽度固定，左自适应\n两栏布局：上宽度固定，下自适应\n两栏布局：下宽度固定，上自适应\n\n# CSS盒模型知识点\n题目：谈谈你对CSS盒模型的认识\n基本概念：标准模型+IE模型\n标准模型和IE模型的区别\nCSS如何设置这两种模型\nJS如何设置获取盒模型对应的宽和高(4个)\n实例题(根据盒模型解释边距重叠)\nBFC(边距重叠解决方案)\n    基本概念\n    原理\n    如何创建\n    使用场景\n\n# DOM事件知识点\n基本概念：DOM事件的级别\nDOM事件模型\nDOM事件流\n描述DOM事件捕获的具体流程\nEvent对象的常见应用\n自定义事件\n\n# HTTP协议类知识点\nHTTP协议的主要特点\nHTTP报文的组成部分\nHTTP方法\nPOST和GET的区别\nHTTP状态码\n什么是持久连接\n什么是管线化\n","source":"_posts/面试准备.md","raw":"---\ntitle: 面试准备\ndate: 2017-11-05 22:36:48\ncategories: 面试\ntags:\n     - 面试\ndescription: 面试准备大纲\n---\n# 技术栈准备\n1. jquery源码博客阅读\n2. Vue源码博客阅读\n3. sass和less\n4. gulp工程化\n5. npm准备，常用命令\n6. webpack准备\n\n# 自我介绍准备\n\n# 页面布局知识点\n题目：假设高度已知，请写出三栏布局，其中左栏、右栏宽度各300px，中间自适应\n答案：\n浮动布局\n绝对定位布局\nflex布局\n网格grid布局\n### 一级延伸:\n5种方案的优缺点\n去掉高度已知，如何解决\n5种方案的兼容性\n### 页面布局的变通:\n三栏布局：上下高度固定，中间自适应(移动端)\n两栏布局：左宽度固定，右自适应\n两栏布局：右宽度固定，左自适应\n两栏布局：上宽度固定，下自适应\n两栏布局：下宽度固定，上自适应\n\n# CSS盒模型知识点\n题目：谈谈你对CSS盒模型的认识\n基本概念：标准模型+IE模型\n标准模型和IE模型的区别\nCSS如何设置这两种模型\nJS如何设置获取盒模型对应的宽和高(4个)\n实例题(根据盒模型解释边距重叠)\nBFC(边距重叠解决方案)\n    基本概念\n    原理\n    如何创建\n    使用场景\n\n# DOM事件知识点\n基本概念：DOM事件的级别\nDOM事件模型\nDOM事件流\n描述DOM事件捕获的具体流程\nEvent对象的常见应用\n自定义事件\n\n# HTTP协议类知识点\nHTTP协议的主要特点\nHTTP报文的组成部分\nHTTP方法\nPOST和GET的区别\nHTTP状态码\n什么是持久连接\n什么是管线化\n","slug":"面试准备","published":1,"updated":"2017-11-05T14:47:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjksf3cxo003lh8efqg5c8odj","content":"<h1 id=\"技术栈准备\"><a href=\"#技术栈准备\" class=\"headerlink\" title=\"技术栈准备\"></a>技术栈准备</h1><ol>\n<li>jquery源码博客阅读</li>\n<li>Vue源码博客阅读</li>\n<li>sass和less</li>\n<li>gulp工程化</li>\n<li>npm准备，常用命令</li>\n<li>webpack准备</li>\n</ol>\n<h1 id=\"自我介绍准备\"><a href=\"#自我介绍准备\" class=\"headerlink\" title=\"自我介绍准备\"></a>自我介绍准备</h1><h1 id=\"页面布局知识点\"><a href=\"#页面布局知识点\" class=\"headerlink\" title=\"页面布局知识点\"></a>页面布局知识点</h1><p>题目：假设高度已知，请写出三栏布局，其中左栏、右栏宽度各300px，中间自适应<br>答案：<br>浮动布局<br>绝对定位布局<br>flex布局<br>网格grid布局</p>\n<h3 id=\"一级延伸\"><a href=\"#一级延伸\" class=\"headerlink\" title=\"一级延伸:\"></a>一级延伸:</h3><p>5种方案的优缺点<br>去掉高度已知，如何解决<br>5种方案的兼容性</p>\n<h3 id=\"页面布局的变通\"><a href=\"#页面布局的变通\" class=\"headerlink\" title=\"页面布局的变通:\"></a>页面布局的变通:</h3><p>三栏布局：上下高度固定，中间自适应(移动端)<br>两栏布局：左宽度固定，右自适应<br>两栏布局：右宽度固定，左自适应<br>两栏布局：上宽度固定，下自适应<br>两栏布局：下宽度固定，上自适应</p>\n<h1 id=\"CSS盒模型知识点\"><a href=\"#CSS盒模型知识点\" class=\"headerlink\" title=\"CSS盒模型知识点\"></a>CSS盒模型知识点</h1><p>题目：谈谈你对CSS盒模型的认识<br>基本概念：标准模型+IE模型<br>标准模型和IE模型的区别<br>CSS如何设置这两种模型<br>JS如何设置获取盒模型对应的宽和高(4个)<br>实例题(根据盒模型解释边距重叠)<br>BFC(边距重叠解决方案)<br>    基本概念<br>    原理<br>    如何创建<br>    使用场景</p>\n<h1 id=\"DOM事件知识点\"><a href=\"#DOM事件知识点\" class=\"headerlink\" title=\"DOM事件知识点\"></a>DOM事件知识点</h1><p>基本概念：DOM事件的级别<br>DOM事件模型<br>DOM事件流<br>描述DOM事件捕获的具体流程<br>Event对象的常见应用<br>自定义事件</p>\n<h1 id=\"HTTP协议类知识点\"><a href=\"#HTTP协议类知识点\" class=\"headerlink\" title=\"HTTP协议类知识点\"></a>HTTP协议类知识点</h1><p>HTTP协议的主要特点<br>HTTP报文的组成部分<br>HTTP方法<br>POST和GET的区别<br>HTTP状态码<br>什么是持久连接<br>什么是管线化</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"技术栈准备\"><a href=\"#技术栈准备\" class=\"headerlink\" title=\"技术栈准备\"></a>技术栈准备</h1><ol>\n<li>jquery源码博客阅读</li>\n<li>Vue源码博客阅读</li>\n<li>sass和less</li>\n<li>gulp工程化</li>\n<li>npm准备，常用命令</li>\n<li>webpack准备</li>\n</ol>\n<h1 id=\"自我介绍准备\"><a href=\"#自我介绍准备\" class=\"headerlink\" title=\"自我介绍准备\"></a>自我介绍准备</h1><h1 id=\"页面布局知识点\"><a href=\"#页面布局知识点\" class=\"headerlink\" title=\"页面布局知识点\"></a>页面布局知识点</h1><p>题目：假设高度已知，请写出三栏布局，其中左栏、右栏宽度各300px，中间自适应<br>答案：<br>浮动布局<br>绝对定位布局<br>flex布局<br>网格grid布局</p>\n<h3 id=\"一级延伸\"><a href=\"#一级延伸\" class=\"headerlink\" title=\"一级延伸:\"></a>一级延伸:</h3><p>5种方案的优缺点<br>去掉高度已知，如何解决<br>5种方案的兼容性</p>\n<h3 id=\"页面布局的变通\"><a href=\"#页面布局的变通\" class=\"headerlink\" title=\"页面布局的变通:\"></a>页面布局的变通:</h3><p>三栏布局：上下高度固定，中间自适应(移动端)<br>两栏布局：左宽度固定，右自适应<br>两栏布局：右宽度固定，左自适应<br>两栏布局：上宽度固定，下自适应<br>两栏布局：下宽度固定，上自适应</p>\n<h1 id=\"CSS盒模型知识点\"><a href=\"#CSS盒模型知识点\" class=\"headerlink\" title=\"CSS盒模型知识点\"></a>CSS盒模型知识点</h1><p>题目：谈谈你对CSS盒模型的认识<br>基本概念：标准模型+IE模型<br>标准模型和IE模型的区别<br>CSS如何设置这两种模型<br>JS如何设置获取盒模型对应的宽和高(4个)<br>实例题(根据盒模型解释边距重叠)<br>BFC(边距重叠解决方案)<br>    基本概念<br>    原理<br>    如何创建<br>    使用场景</p>\n<h1 id=\"DOM事件知识点\"><a href=\"#DOM事件知识点\" class=\"headerlink\" title=\"DOM事件知识点\"></a>DOM事件知识点</h1><p>基本概念：DOM事件的级别<br>DOM事件模型<br>DOM事件流<br>描述DOM事件捕获的具体流程<br>Event对象的常见应用<br>自定义事件</p>\n<h1 id=\"HTTP协议类知识点\"><a href=\"#HTTP协议类知识点\" class=\"headerlink\" title=\"HTTP协议类知识点\"></a>HTTP协议类知识点</h1><p>HTTP协议的主要特点<br>HTTP报文的组成部分<br>HTTP方法<br>POST和GET的区别<br>HTTP状态码<br>什么是持久连接<br>什么是管线化</p>\n"},{"title":"面试算法题系列(1)","date":"2017-07-29T03:50:55.000Z","description":"9个基础面试算法题，未完待续...","_content":"1.统计字符串中，字符出现的次数\n\n```\npackage pers.yijin.demo;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * 统计字符串中，字符出现的次数\n *\n * @author Administrator\n *\n */\npublic class CountWords {\n    /**\n     * 利用map的键不能重复的特性来实现\n     *\n     * @param str\n     */\n    public static void count(String str) {\n        Map<Character, Integer> map = new HashMap<Character, Integer>();\n        for (int i = 0; i < str.length(); i++) {\n            char key = str.charAt(i);\n            if (!map.containsKey(key)) {\n                map.put(key, 1);\n            } else {\n                int value = map.get(key);\n                map.put(key, value + 1);\n            }\n        }\n        for (Map.Entry<Character, Integer> m : map.entrySet()) {\n            System.out.println(m.getKey() + \"的次数为：\" + m.getValue());\n        }\n    }\n\n    public static void main(String[] args) {\n        CountWords.count(\"askadklfjalkjflfaflkdnmcnvkjfklasdj\");\n    }\n\n}\n\n```\n2.递归调用系列（不完整。。。）\n\n```\npackage pers.yijin.demo;\n\nimport java.math.BigInteger;\n\n/**\n * 递归调用\n *\n * @author Administrator\n *\n */\npublic class Fibonacci {\n    /**\n     * 斐波那契数列：求1,1,2,3,5,8,13....的第100位的值\n     *\n     * @param n\n     * @return\n     */\n    public static int fibonacci(int n) {\n        if (n <= 2) {\n            return 1;\n        } else {\n            return fibonacci(n - 1) + fibonacci(n - 2);\n        }\n    }\n\n    /**\n     * 求N的阶乘\n     *\n     * @param n\n     * @return\n     */\n    public static int factorial(int n) {\n        if (n <= 1) {\n            return 1;\n        }\n        return n * factorial(n - 1);\n    }\n\n    /**\n     * 求最大公约数\n     *\n     * @param p\n     * @param q\n     * @return\n     */\n    public static int gcb(int p, int q) {\n        if (q == 0) {\n            return p;\n        }\n        int r = p % q;\n        return gcb(q, r);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(BigInteger.valueOf(fibonacci(10)));\n        System.out.println(factorial(10));\n        System.out.println(gcb(5, 10));\n\n    }\n\n}\n\n```\n3.荷兰国旗问题\n\n```\npackage pers.yijin.demo;\n\nimport java.util.Arrays;\n\n/**\n * 荷兰国旗问题\n *  将0、1、2三个数排列，0在左边，1在中间，2在右边\n *\n * @author Administrator\n *\n */\npublic class FlagOfNetherland {\n\n    public static void sort(int[] arr, int low, int high) {\n        int begin = low;//开始索引\n        int end = high;//结尾索引\n        int current = low;//遍历索引\n        while (current <= end) {\n            if (arr[current] < 1) {\n                //当前值==0则与开始索引交换，遍历索引和开始索引+1，则开始索引左边的数据就固定好了(除了开始时，begin永远指向1)\n                swap(arr, begin, current);\n                begin++;\n                current++;\n            } else if (arr[current] > 1) {\n                swap(arr, current, end);\n                end--;\n            } else {\n                current++;\n            }\n        }\n    }\n\n    // 交换算法\n    private static void swap(int[] arr, int current, int next) {\n        int temp = arr[current];\n        arr[current] = arr[next];\n        arr[next] = temp;\n    }\n\n    public static void main(String[] args) {\n\n        int[] arr = { 0, 1, 2, 1, 2, 0, 2, 1, 0, 2, 0, 1, 2, 1, 2, 0, 2, 1, 0, 2, 0, 1, 2, 1, 2, 0, 2, 1, 0, 2, 0, 1, 2,\n                1, 2, 0, 2, 1, 0, 2, 0, 1, 2, 1, 2, 0, 2, 1, 0, 2 };\n        sort(arr, 0, arr.length - 1);\n        System.out.println(Arrays.toString(arr));\n    }\n\n}\n\n```\n4.判断一个数是否为素数\n\n```\npackage pers.yijin.demo;\n/**\n * 判断一个数是否为素数\n * @author Administrator\n *\n */\npublic class IsPrime {\n\n    /**\n     * Math.sqrt()求一个数的非负平方根\n     * 以平方为界\n     * @param num\n     * @return\n     */\n    public static boolean isPrime(int num) {\n        // 素数最小为2\n        if (num < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        for (int i = 101; i < 201; i++) {\n            if(isPrime(i)){\n                System.out.println(i);\n            }\n        }\n    }\n\n}\n\n```\n5.约瑟环问题\n\n```\npackage pers.yijin.demo;\n\n/**\n * 约瑟环问题 实现30个人轮流报数，9出局，循环，剩下15个人。\n *\n * @author Administrator\n *\n */\npublic class JosephRing {\n\n    public static void main(String[] args) {\n        // 创建一个约瑟环\n        boolean[] people = new boolean[30];\n        for (int i = 0; i < people.length; i++) {\n            people[i] = true;\n        }\n        //用于循环的人数\n        int personSum = people.length;\n        //计数的个数\n        int countNum = 0;\n        //索引数\n        int index = 0;\n        while (personSum > 15) {\n            //如果当前index已经出局，则让下一个出局\n            if(people[index]){\n                countNum++;\n                //如果数到9，则9出局\n                if (countNum == 9) {\n                    countNum = 0;\n                    people[index] = false;//index=8时people[index]是第九个人\n                    personSum--;\n                }\n            }\n            index++;\n            //循环结束，重新开始\n            if (index == people.length) {\n                index = 0;\n            }\n        }\n\n        for (int i = 0; i < people.length; i++) {\n            System.out.println(\"第\" + i + \"个的状态是：\" + people[i]);\n        }\n    }\n\n}\n\n```\n6.给定一串数字，把它以中文的形式输出\n\n```\npackage pers.yijin.demo;\n/**\n * 给定一串数字，把它以中文的形式输出\n * @author Administrator\n *\n */\npublic class NumberParseString {\n\n    public static void convert(int number) {\n        //数字对应的汉字\n        String[] num = {\"零\",\"一\",\"二\",\"三\",\"四\",\"五\",\"六\",\"七\",\"八\",\"九\"};\n        //单位\n        String[] unit = {\"\",\"十\",\"百\",\"千\",\"万\",\"十万\",\"百万\",\"千万\",\"亿\",\"十\",\"百\",\"千\",\"万亿\"};\n        //将输入数字转换为字符串\n        String strNum = String.valueOf(number);\n        //判断0出现了几次\n        boolean zeroFlag = true;\n        //结果 字符串\n        String str = \"\";\n        int length = strNum.length();\n        for (int i = 0; i < length; i++) {\n            //两个字符做运算，自动转换为数字\n            int c = strNum.charAt(i)-'0';\n            if(c != 0) {\n                str += num[c]+unit[length-i-1];\n                zeroFlag = true;\n            }\n            if(c==0 && zeroFlag && i!=length-1){\n                str += num[c];\n                zeroFlag = false;\n            }\n        }\n        System.out.println(str);\n    }\n    public static void main(String[] args) {\n        convert(120);\n    }\n\n}\n\n```\n7.不使用parseInt把字符串转换为数字\n\n```\npackage pers.yijin.demo;\n\n/**\n * 不使用parseInt把字符串转换为数字\n *\n * @author Administrator\n *\n */\npublic class ParseInt {\n    /**\n     * 利用两个char型运算自动转换为int的特性\n     *\n     * @param str\n     * @return\n     */\n    public static int parseInt(String str) {\n        int res = 0;\n        for (int i = 0; i < str.length(); i++) {\n            char c = str.charAt(i);\n            if ((c >= '0') && (c <= '9')) {\n                res = res * 10 + (c - '0');\n            }\n        }\n        return res;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(parseInt(\"123456789\"));\n    }\n\n}\n\n```\n8.数字反转\n\n```\npackage pers.yijin.demo;\n\n/**\n * 数字反转\n *\n * @author Administrator\n *\n */\npublic class Reverse {\n\n    public static int reverse(int num) {\n        StringBuilder builder = new StringBuilder();\n        String str = builder.append(num).reverse().toString();\n        return Integer.parseInt(str);\n\n    }\n\n    public static void main(String[] args) {\n        System.out.println(reverse(852147963));\n    }\n}\n\n```\n9.水仙花数问题\n\n```\npackage pers.yijin.demo;\n/**\n * 求100~999之间的水仙花数\n * 水仙花数：例如153是1的3次方+5的3次方+3的3次方的和。\n * @author Administrator\n *\n */\npublic class Shuixianhuashu {\n    /**\n     * 分解出个位，十位，和百位\n     * @param num\n     * @return\n     */\n    public static boolean isShuiXianHuaShu(int num) {\n        int i = num / 100;\n        int j = (num % 100) / 10;\n        int k = num % 10;\n        if (num == i * i * i + j * j * j + k * k * k) {\n            return true;\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        for (int i = 100; i < 1000; i++) {\n            if(isShuiXianHuaShu(i)){\n                System.out.println(i);\n            }\n        }\n    }\n\n}\n\n```\n","source":"_posts/面试算法题系列(1).md","raw":"---\ntitle: 面试算法题系列(1)\ndate: 2017-07-29 11:50:55\ncategories: 面试算法题\ntags:\n     - 面试\n     - 算法\ndescription: 9个基础面试算法题，未完待续...\n---\n1.统计字符串中，字符出现的次数\n\n```\npackage pers.yijin.demo;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * 统计字符串中，字符出现的次数\n *\n * @author Administrator\n *\n */\npublic class CountWords {\n    /**\n     * 利用map的键不能重复的特性来实现\n     *\n     * @param str\n     */\n    public static void count(String str) {\n        Map<Character, Integer> map = new HashMap<Character, Integer>();\n        for (int i = 0; i < str.length(); i++) {\n            char key = str.charAt(i);\n            if (!map.containsKey(key)) {\n                map.put(key, 1);\n            } else {\n                int value = map.get(key);\n                map.put(key, value + 1);\n            }\n        }\n        for (Map.Entry<Character, Integer> m : map.entrySet()) {\n            System.out.println(m.getKey() + \"的次数为：\" + m.getValue());\n        }\n    }\n\n    public static void main(String[] args) {\n        CountWords.count(\"askadklfjalkjflfaflkdnmcnvkjfklasdj\");\n    }\n\n}\n\n```\n2.递归调用系列（不完整。。。）\n\n```\npackage pers.yijin.demo;\n\nimport java.math.BigInteger;\n\n/**\n * 递归调用\n *\n * @author Administrator\n *\n */\npublic class Fibonacci {\n    /**\n     * 斐波那契数列：求1,1,2,3,5,8,13....的第100位的值\n     *\n     * @param n\n     * @return\n     */\n    public static int fibonacci(int n) {\n        if (n <= 2) {\n            return 1;\n        } else {\n            return fibonacci(n - 1) + fibonacci(n - 2);\n        }\n    }\n\n    /**\n     * 求N的阶乘\n     *\n     * @param n\n     * @return\n     */\n    public static int factorial(int n) {\n        if (n <= 1) {\n            return 1;\n        }\n        return n * factorial(n - 1);\n    }\n\n    /**\n     * 求最大公约数\n     *\n     * @param p\n     * @param q\n     * @return\n     */\n    public static int gcb(int p, int q) {\n        if (q == 0) {\n            return p;\n        }\n        int r = p % q;\n        return gcb(q, r);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(BigInteger.valueOf(fibonacci(10)));\n        System.out.println(factorial(10));\n        System.out.println(gcb(5, 10));\n\n    }\n\n}\n\n```\n3.荷兰国旗问题\n\n```\npackage pers.yijin.demo;\n\nimport java.util.Arrays;\n\n/**\n * 荷兰国旗问题\n *  将0、1、2三个数排列，0在左边，1在中间，2在右边\n *\n * @author Administrator\n *\n */\npublic class FlagOfNetherland {\n\n    public static void sort(int[] arr, int low, int high) {\n        int begin = low;//开始索引\n        int end = high;//结尾索引\n        int current = low;//遍历索引\n        while (current <= end) {\n            if (arr[current] < 1) {\n                //当前值==0则与开始索引交换，遍历索引和开始索引+1，则开始索引左边的数据就固定好了(除了开始时，begin永远指向1)\n                swap(arr, begin, current);\n                begin++;\n                current++;\n            } else if (arr[current] > 1) {\n                swap(arr, current, end);\n                end--;\n            } else {\n                current++;\n            }\n        }\n    }\n\n    // 交换算法\n    private static void swap(int[] arr, int current, int next) {\n        int temp = arr[current];\n        arr[current] = arr[next];\n        arr[next] = temp;\n    }\n\n    public static void main(String[] args) {\n\n        int[] arr = { 0, 1, 2, 1, 2, 0, 2, 1, 0, 2, 0, 1, 2, 1, 2, 0, 2, 1, 0, 2, 0, 1, 2, 1, 2, 0, 2, 1, 0, 2, 0, 1, 2,\n                1, 2, 0, 2, 1, 0, 2, 0, 1, 2, 1, 2, 0, 2, 1, 0, 2 };\n        sort(arr, 0, arr.length - 1);\n        System.out.println(Arrays.toString(arr));\n    }\n\n}\n\n```\n4.判断一个数是否为素数\n\n```\npackage pers.yijin.demo;\n/**\n * 判断一个数是否为素数\n * @author Administrator\n *\n */\npublic class IsPrime {\n\n    /**\n     * Math.sqrt()求一个数的非负平方根\n     * 以平方为界\n     * @param num\n     * @return\n     */\n    public static boolean isPrime(int num) {\n        // 素数最小为2\n        if (num < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        for (int i = 101; i < 201; i++) {\n            if(isPrime(i)){\n                System.out.println(i);\n            }\n        }\n    }\n\n}\n\n```\n5.约瑟环问题\n\n```\npackage pers.yijin.demo;\n\n/**\n * 约瑟环问题 实现30个人轮流报数，9出局，循环，剩下15个人。\n *\n * @author Administrator\n *\n */\npublic class JosephRing {\n\n    public static void main(String[] args) {\n        // 创建一个约瑟环\n        boolean[] people = new boolean[30];\n        for (int i = 0; i < people.length; i++) {\n            people[i] = true;\n        }\n        //用于循环的人数\n        int personSum = people.length;\n        //计数的个数\n        int countNum = 0;\n        //索引数\n        int index = 0;\n        while (personSum > 15) {\n            //如果当前index已经出局，则让下一个出局\n            if(people[index]){\n                countNum++;\n                //如果数到9，则9出局\n                if (countNum == 9) {\n                    countNum = 0;\n                    people[index] = false;//index=8时people[index]是第九个人\n                    personSum--;\n                }\n            }\n            index++;\n            //循环结束，重新开始\n            if (index == people.length) {\n                index = 0;\n            }\n        }\n\n        for (int i = 0; i < people.length; i++) {\n            System.out.println(\"第\" + i + \"个的状态是：\" + people[i]);\n        }\n    }\n\n}\n\n```\n6.给定一串数字，把它以中文的形式输出\n\n```\npackage pers.yijin.demo;\n/**\n * 给定一串数字，把它以中文的形式输出\n * @author Administrator\n *\n */\npublic class NumberParseString {\n\n    public static void convert(int number) {\n        //数字对应的汉字\n        String[] num = {\"零\",\"一\",\"二\",\"三\",\"四\",\"五\",\"六\",\"七\",\"八\",\"九\"};\n        //单位\n        String[] unit = {\"\",\"十\",\"百\",\"千\",\"万\",\"十万\",\"百万\",\"千万\",\"亿\",\"十\",\"百\",\"千\",\"万亿\"};\n        //将输入数字转换为字符串\n        String strNum = String.valueOf(number);\n        //判断0出现了几次\n        boolean zeroFlag = true;\n        //结果 字符串\n        String str = \"\";\n        int length = strNum.length();\n        for (int i = 0; i < length; i++) {\n            //两个字符做运算，自动转换为数字\n            int c = strNum.charAt(i)-'0';\n            if(c != 0) {\n                str += num[c]+unit[length-i-1];\n                zeroFlag = true;\n            }\n            if(c==0 && zeroFlag && i!=length-1){\n                str += num[c];\n                zeroFlag = false;\n            }\n        }\n        System.out.println(str);\n    }\n    public static void main(String[] args) {\n        convert(120);\n    }\n\n}\n\n```\n7.不使用parseInt把字符串转换为数字\n\n```\npackage pers.yijin.demo;\n\n/**\n * 不使用parseInt把字符串转换为数字\n *\n * @author Administrator\n *\n */\npublic class ParseInt {\n    /**\n     * 利用两个char型运算自动转换为int的特性\n     *\n     * @param str\n     * @return\n     */\n    public static int parseInt(String str) {\n        int res = 0;\n        for (int i = 0; i < str.length(); i++) {\n            char c = str.charAt(i);\n            if ((c >= '0') && (c <= '9')) {\n                res = res * 10 + (c - '0');\n            }\n        }\n        return res;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(parseInt(\"123456789\"));\n    }\n\n}\n\n```\n8.数字反转\n\n```\npackage pers.yijin.demo;\n\n/**\n * 数字反转\n *\n * @author Administrator\n *\n */\npublic class Reverse {\n\n    public static int reverse(int num) {\n        StringBuilder builder = new StringBuilder();\n        String str = builder.append(num).reverse().toString();\n        return Integer.parseInt(str);\n\n    }\n\n    public static void main(String[] args) {\n        System.out.println(reverse(852147963));\n    }\n}\n\n```\n9.水仙花数问题\n\n```\npackage pers.yijin.demo;\n/**\n * 求100~999之间的水仙花数\n * 水仙花数：例如153是1的3次方+5的3次方+3的3次方的和。\n * @author Administrator\n *\n */\npublic class Shuixianhuashu {\n    /**\n     * 分解出个位，十位，和百位\n     * @param num\n     * @return\n     */\n    public static boolean isShuiXianHuaShu(int num) {\n        int i = num / 100;\n        int j = (num % 100) / 10;\n        int k = num % 10;\n        if (num == i * i * i + j * j * j + k * k * k) {\n            return true;\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        for (int i = 100; i < 1000; i++) {\n            if(isShuiXianHuaShu(i)){\n                System.out.println(i);\n            }\n        }\n    }\n\n}\n\n```\n","slug":"面试算法题系列(1)","published":1,"updated":"2017-07-29T06:12:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjksf3cxp003ph8ef9st5aolg","content":"<p>1.统计字符串中，字符出现的次数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package pers.yijin.demo;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.HashMap;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 统计字符串中，字符出现的次数</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author Administrator</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class CountWords &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 利用map的键不能重复的特性来实现</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param str</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static void count(String str) &#123;</span><br><span class=\"line\">        Map&lt;Character, Integer&gt; map = new HashMap&lt;Character, Integer&gt;();</span><br><span class=\"line\">        for (int i = 0; i &lt; str.length(); i++) &#123;</span><br><span class=\"line\">            char key = str.charAt(i);</span><br><span class=\"line\">            if (!map.containsKey(key)) &#123;</span><br><span class=\"line\">                map.put(key, 1);</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                int value = map.get(key);</span><br><span class=\"line\">                map.put(key, value + 1);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        for (Map.Entry&lt;Character, Integer&gt; m : map.entrySet()) &#123;</span><br><span class=\"line\">            System.out.println(m.getKey() + &quot;的次数为：&quot; + m.getValue());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        CountWords.count(&quot;askadklfjalkjflfaflkdnmcnvkjfklasdj&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.递归调用系列（不完整。。。）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package pers.yijin.demo;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.math.BigInteger;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 递归调用</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author Administrator</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class Fibonacci &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 斐波那契数列：求1,1,2,3,5,8,13....的第100位的值</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param n</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static int fibonacci(int n) &#123;</span><br><span class=\"line\">        if (n &lt;= 2) &#123;</span><br><span class=\"line\">            return 1;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            return fibonacci(n - 1) + fibonacci(n - 2);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 求N的阶乘</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param n</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static int factorial(int n) &#123;</span><br><span class=\"line\">        if (n &lt;= 1) &#123;</span><br><span class=\"line\">            return 1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return n * factorial(n - 1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 求最大公约数</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param p</span><br><span class=\"line\">     * @param q</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static int gcb(int p, int q) &#123;</span><br><span class=\"line\">        if (q == 0) &#123;</span><br><span class=\"line\">            return p;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        int r = p % q;</span><br><span class=\"line\">        return gcb(q, r);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        System.out.println(BigInteger.valueOf(fibonacci(10)));</span><br><span class=\"line\">        System.out.println(factorial(10));</span><br><span class=\"line\">        System.out.println(gcb(5, 10));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3.荷兰国旗问题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package pers.yijin.demo;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 荷兰国旗问题</span><br><span class=\"line\"> *  将0、1、2三个数排列，0在左边，1在中间，2在右边</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author Administrator</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class FlagOfNetherland &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void sort(int[] arr, int low, int high) &#123;</span><br><span class=\"line\">        int begin = low;//开始索引</span><br><span class=\"line\">        int end = high;//结尾索引</span><br><span class=\"line\">        int current = low;//遍历索引</span><br><span class=\"line\">        while (current &lt;= end) &#123;</span><br><span class=\"line\">            if (arr[current] &lt; 1) &#123;</span><br><span class=\"line\">                //当前值==0则与开始索引交换，遍历索引和开始索引+1，则开始索引左边的数据就固定好了(除了开始时，begin永远指向1)</span><br><span class=\"line\">                swap(arr, begin, current);</span><br><span class=\"line\">                begin++;</span><br><span class=\"line\">                current++;</span><br><span class=\"line\">            &#125; else if (arr[current] &gt; 1) &#123;</span><br><span class=\"line\">                swap(arr, current, end);</span><br><span class=\"line\">                end--;</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                current++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 交换算法</span><br><span class=\"line\">    private static void swap(int[] arr, int current, int next) &#123;</span><br><span class=\"line\">        int temp = arr[current];</span><br><span class=\"line\">        arr[current] = arr[next];</span><br><span class=\"line\">        arr[next] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        int[] arr = &#123; 0, 1, 2, 1, 2, 0, 2, 1, 0, 2, 0, 1, 2, 1, 2, 0, 2, 1, 0, 2, 0, 1, 2, 1, 2, 0, 2, 1, 0, 2, 0, 1, 2,</span><br><span class=\"line\">                1, 2, 0, 2, 1, 0, 2, 0, 1, 2, 1, 2, 0, 2, 1, 0, 2 &#125;;</span><br><span class=\"line\">        sort(arr, 0, arr.length - 1);</span><br><span class=\"line\">        System.out.println(Arrays.toString(arr));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>4.判断一个数是否为素数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package pers.yijin.demo;</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 判断一个数是否为素数</span><br><span class=\"line\"> * @author Administrator</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class IsPrime &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Math.sqrt()求一个数的非负平方根</span><br><span class=\"line\">     * 以平方为界</span><br><span class=\"line\">     * @param num</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static boolean isPrime(int num) &#123;</span><br><span class=\"line\">        // 素数最小为2</span><br><span class=\"line\">        if (num &lt; 2) &#123;</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        for (int i = 2; i &lt;= Math.sqrt(num); i++) &#123;</span><br><span class=\"line\">            if (num % i == 0) &#123;</span><br><span class=\"line\">                return false;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        for (int i = 101; i &lt; 201; i++) &#123;</span><br><span class=\"line\">            if(isPrime(i))&#123;</span><br><span class=\"line\">                System.out.println(i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>5.约瑟环问题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package pers.yijin.demo;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 约瑟环问题 实现30个人轮流报数，9出局，循环，剩下15个人。</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author Administrator</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class JosephRing &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        // 创建一个约瑟环</span><br><span class=\"line\">        boolean[] people = new boolean[30];</span><br><span class=\"line\">        for (int i = 0; i &lt; people.length; i++) &#123;</span><br><span class=\"line\">            people[i] = true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //用于循环的人数</span><br><span class=\"line\">        int personSum = people.length;</span><br><span class=\"line\">        //计数的个数</span><br><span class=\"line\">        int countNum = 0;</span><br><span class=\"line\">        //索引数</span><br><span class=\"line\">        int index = 0;</span><br><span class=\"line\">        while (personSum &gt; 15) &#123;</span><br><span class=\"line\">            //如果当前index已经出局，则让下一个出局</span><br><span class=\"line\">            if(people[index])&#123;</span><br><span class=\"line\">                countNum++;</span><br><span class=\"line\">                //如果数到9，则9出局</span><br><span class=\"line\">                if (countNum == 9) &#123;</span><br><span class=\"line\">                    countNum = 0;</span><br><span class=\"line\">                    people[index] = false;//index=8时people[index]是第九个人</span><br><span class=\"line\">                    personSum--;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            index++;</span><br><span class=\"line\">            //循环结束，重新开始</span><br><span class=\"line\">            if (index == people.length) &#123;</span><br><span class=\"line\">                index = 0;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        for (int i = 0; i &lt; people.length; i++) &#123;</span><br><span class=\"line\">            System.out.println(&quot;第&quot; + i + &quot;个的状态是：&quot; + people[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>6.给定一串数字，把它以中文的形式输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package pers.yijin.demo;</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 给定一串数字，把它以中文的形式输出</span><br><span class=\"line\"> * @author Administrator</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class NumberParseString &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void convert(int number) &#123;</span><br><span class=\"line\">        //数字对应的汉字</span><br><span class=\"line\">        String[] num = &#123;&quot;零&quot;,&quot;一&quot;,&quot;二&quot;,&quot;三&quot;,&quot;四&quot;,&quot;五&quot;,&quot;六&quot;,&quot;七&quot;,&quot;八&quot;,&quot;九&quot;&#125;;</span><br><span class=\"line\">        //单位</span><br><span class=\"line\">        String[] unit = &#123;&quot;&quot;,&quot;十&quot;,&quot;百&quot;,&quot;千&quot;,&quot;万&quot;,&quot;十万&quot;,&quot;百万&quot;,&quot;千万&quot;,&quot;亿&quot;,&quot;十&quot;,&quot;百&quot;,&quot;千&quot;,&quot;万亿&quot;&#125;;</span><br><span class=\"line\">        //将输入数字转换为字符串</span><br><span class=\"line\">        String strNum = String.valueOf(number);</span><br><span class=\"line\">        //判断0出现了几次</span><br><span class=\"line\">        boolean zeroFlag = true;</span><br><span class=\"line\">        //结果 字符串</span><br><span class=\"line\">        String str = &quot;&quot;;</span><br><span class=\"line\">        int length = strNum.length();</span><br><span class=\"line\">        for (int i = 0; i &lt; length; i++) &#123;</span><br><span class=\"line\">            //两个字符做运算，自动转换为数字</span><br><span class=\"line\">            int c = strNum.charAt(i)-&apos;0&apos;;</span><br><span class=\"line\">            if(c != 0) &#123;</span><br><span class=\"line\">                str += num[c]+unit[length-i-1];</span><br><span class=\"line\">                zeroFlag = true;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if(c==0 &amp;&amp; zeroFlag &amp;&amp; i!=length-1)&#123;</span><br><span class=\"line\">                str += num[c];</span><br><span class=\"line\">                zeroFlag = false;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(str);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        convert(120);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>7.不使用parseInt把字符串转换为数字</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package pers.yijin.demo;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 不使用parseInt把字符串转换为数字</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author Administrator</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class ParseInt &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 利用两个char型运算自动转换为int的特性</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param str</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static int parseInt(String str) &#123;</span><br><span class=\"line\">        int res = 0;</span><br><span class=\"line\">        for (int i = 0; i &lt; str.length(); i++) &#123;</span><br><span class=\"line\">            char c = str.charAt(i);</span><br><span class=\"line\">            if ((c &gt;= &apos;0&apos;) &amp;&amp; (c &lt;= &apos;9&apos;)) &#123;</span><br><span class=\"line\">                res = res * 10 + (c - &apos;0&apos;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        System.out.println(parseInt(&quot;123456789&quot;));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>8.数字反转</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package pers.yijin.demo;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 数字反转</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author Administrator</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class Reverse &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static int reverse(int num) &#123;</span><br><span class=\"line\">        StringBuilder builder = new StringBuilder();</span><br><span class=\"line\">        String str = builder.append(num).reverse().toString();</span><br><span class=\"line\">        return Integer.parseInt(str);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        System.out.println(reverse(852147963));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>9.水仙花数问题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package pers.yijin.demo;</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 求100~999之间的水仙花数</span><br><span class=\"line\"> * 水仙花数：例如153是1的3次方+5的3次方+3的3次方的和。</span><br><span class=\"line\"> * @author Administrator</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class Shuixianhuashu &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 分解出个位，十位，和百位</span><br><span class=\"line\">     * @param num</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static boolean isShuiXianHuaShu(int num) &#123;</span><br><span class=\"line\">        int i = num / 100;</span><br><span class=\"line\">        int j = (num % 100) / 10;</span><br><span class=\"line\">        int k = num % 10;</span><br><span class=\"line\">        if (num == i * i * i + j * j * j + k * k * k) &#123;</span><br><span class=\"line\">            return true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        for (int i = 100; i &lt; 1000; i++) &#123;</span><br><span class=\"line\">            if(isShuiXianHuaShu(i))&#123;</span><br><span class=\"line\">                System.out.println(i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>1.统计字符串中，字符出现的次数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package pers.yijin.demo;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.HashMap;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 统计字符串中，字符出现的次数</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author Administrator</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class CountWords &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 利用map的键不能重复的特性来实现</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param str</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static void count(String str) &#123;</span><br><span class=\"line\">        Map&lt;Character, Integer&gt; map = new HashMap&lt;Character, Integer&gt;();</span><br><span class=\"line\">        for (int i = 0; i &lt; str.length(); i++) &#123;</span><br><span class=\"line\">            char key = str.charAt(i);</span><br><span class=\"line\">            if (!map.containsKey(key)) &#123;</span><br><span class=\"line\">                map.put(key, 1);</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                int value = map.get(key);</span><br><span class=\"line\">                map.put(key, value + 1);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        for (Map.Entry&lt;Character, Integer&gt; m : map.entrySet()) &#123;</span><br><span class=\"line\">            System.out.println(m.getKey() + &quot;的次数为：&quot; + m.getValue());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        CountWords.count(&quot;askadklfjalkjflfaflkdnmcnvkjfklasdj&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.递归调用系列（不完整。。。）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package pers.yijin.demo;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.math.BigInteger;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 递归调用</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author Administrator</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class Fibonacci &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 斐波那契数列：求1,1,2,3,5,8,13....的第100位的值</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param n</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static int fibonacci(int n) &#123;</span><br><span class=\"line\">        if (n &lt;= 2) &#123;</span><br><span class=\"line\">            return 1;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            return fibonacci(n - 1) + fibonacci(n - 2);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 求N的阶乘</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param n</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static int factorial(int n) &#123;</span><br><span class=\"line\">        if (n &lt;= 1) &#123;</span><br><span class=\"line\">            return 1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return n * factorial(n - 1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 求最大公约数</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param p</span><br><span class=\"line\">     * @param q</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static int gcb(int p, int q) &#123;</span><br><span class=\"line\">        if (q == 0) &#123;</span><br><span class=\"line\">            return p;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        int r = p % q;</span><br><span class=\"line\">        return gcb(q, r);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        System.out.println(BigInteger.valueOf(fibonacci(10)));</span><br><span class=\"line\">        System.out.println(factorial(10));</span><br><span class=\"line\">        System.out.println(gcb(5, 10));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3.荷兰国旗问题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package pers.yijin.demo;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 荷兰国旗问题</span><br><span class=\"line\"> *  将0、1、2三个数排列，0在左边，1在中间，2在右边</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author Administrator</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class FlagOfNetherland &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void sort(int[] arr, int low, int high) &#123;</span><br><span class=\"line\">        int begin = low;//开始索引</span><br><span class=\"line\">        int end = high;//结尾索引</span><br><span class=\"line\">        int current = low;//遍历索引</span><br><span class=\"line\">        while (current &lt;= end) &#123;</span><br><span class=\"line\">            if (arr[current] &lt; 1) &#123;</span><br><span class=\"line\">                //当前值==0则与开始索引交换，遍历索引和开始索引+1，则开始索引左边的数据就固定好了(除了开始时，begin永远指向1)</span><br><span class=\"line\">                swap(arr, begin, current);</span><br><span class=\"line\">                begin++;</span><br><span class=\"line\">                current++;</span><br><span class=\"line\">            &#125; else if (arr[current] &gt; 1) &#123;</span><br><span class=\"line\">                swap(arr, current, end);</span><br><span class=\"line\">                end--;</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                current++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 交换算法</span><br><span class=\"line\">    private static void swap(int[] arr, int current, int next) &#123;</span><br><span class=\"line\">        int temp = arr[current];</span><br><span class=\"line\">        arr[current] = arr[next];</span><br><span class=\"line\">        arr[next] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        int[] arr = &#123; 0, 1, 2, 1, 2, 0, 2, 1, 0, 2, 0, 1, 2, 1, 2, 0, 2, 1, 0, 2, 0, 1, 2, 1, 2, 0, 2, 1, 0, 2, 0, 1, 2,</span><br><span class=\"line\">                1, 2, 0, 2, 1, 0, 2, 0, 1, 2, 1, 2, 0, 2, 1, 0, 2 &#125;;</span><br><span class=\"line\">        sort(arr, 0, arr.length - 1);</span><br><span class=\"line\">        System.out.println(Arrays.toString(arr));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>4.判断一个数是否为素数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package pers.yijin.demo;</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 判断一个数是否为素数</span><br><span class=\"line\"> * @author Administrator</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class IsPrime &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Math.sqrt()求一个数的非负平方根</span><br><span class=\"line\">     * 以平方为界</span><br><span class=\"line\">     * @param num</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static boolean isPrime(int num) &#123;</span><br><span class=\"line\">        // 素数最小为2</span><br><span class=\"line\">        if (num &lt; 2) &#123;</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        for (int i = 2; i &lt;= Math.sqrt(num); i++) &#123;</span><br><span class=\"line\">            if (num % i == 0) &#123;</span><br><span class=\"line\">                return false;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        for (int i = 101; i &lt; 201; i++) &#123;</span><br><span class=\"line\">            if(isPrime(i))&#123;</span><br><span class=\"line\">                System.out.println(i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>5.约瑟环问题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package pers.yijin.demo;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 约瑟环问题 实现30个人轮流报数，9出局，循环，剩下15个人。</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author Administrator</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class JosephRing &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        // 创建一个约瑟环</span><br><span class=\"line\">        boolean[] people = new boolean[30];</span><br><span class=\"line\">        for (int i = 0; i &lt; people.length; i++) &#123;</span><br><span class=\"line\">            people[i] = true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //用于循环的人数</span><br><span class=\"line\">        int personSum = people.length;</span><br><span class=\"line\">        //计数的个数</span><br><span class=\"line\">        int countNum = 0;</span><br><span class=\"line\">        //索引数</span><br><span class=\"line\">        int index = 0;</span><br><span class=\"line\">        while (personSum &gt; 15) &#123;</span><br><span class=\"line\">            //如果当前index已经出局，则让下一个出局</span><br><span class=\"line\">            if(people[index])&#123;</span><br><span class=\"line\">                countNum++;</span><br><span class=\"line\">                //如果数到9，则9出局</span><br><span class=\"line\">                if (countNum == 9) &#123;</span><br><span class=\"line\">                    countNum = 0;</span><br><span class=\"line\">                    people[index] = false;//index=8时people[index]是第九个人</span><br><span class=\"line\">                    personSum--;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            index++;</span><br><span class=\"line\">            //循环结束，重新开始</span><br><span class=\"line\">            if (index == people.length) &#123;</span><br><span class=\"line\">                index = 0;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        for (int i = 0; i &lt; people.length; i++) &#123;</span><br><span class=\"line\">            System.out.println(&quot;第&quot; + i + &quot;个的状态是：&quot; + people[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>6.给定一串数字，把它以中文的形式输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package pers.yijin.demo;</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 给定一串数字，把它以中文的形式输出</span><br><span class=\"line\"> * @author Administrator</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class NumberParseString &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void convert(int number) &#123;</span><br><span class=\"line\">        //数字对应的汉字</span><br><span class=\"line\">        String[] num = &#123;&quot;零&quot;,&quot;一&quot;,&quot;二&quot;,&quot;三&quot;,&quot;四&quot;,&quot;五&quot;,&quot;六&quot;,&quot;七&quot;,&quot;八&quot;,&quot;九&quot;&#125;;</span><br><span class=\"line\">        //单位</span><br><span class=\"line\">        String[] unit = &#123;&quot;&quot;,&quot;十&quot;,&quot;百&quot;,&quot;千&quot;,&quot;万&quot;,&quot;十万&quot;,&quot;百万&quot;,&quot;千万&quot;,&quot;亿&quot;,&quot;十&quot;,&quot;百&quot;,&quot;千&quot;,&quot;万亿&quot;&#125;;</span><br><span class=\"line\">        //将输入数字转换为字符串</span><br><span class=\"line\">        String strNum = String.valueOf(number);</span><br><span class=\"line\">        //判断0出现了几次</span><br><span class=\"line\">        boolean zeroFlag = true;</span><br><span class=\"line\">        //结果 字符串</span><br><span class=\"line\">        String str = &quot;&quot;;</span><br><span class=\"line\">        int length = strNum.length();</span><br><span class=\"line\">        for (int i = 0; i &lt; length; i++) &#123;</span><br><span class=\"line\">            //两个字符做运算，自动转换为数字</span><br><span class=\"line\">            int c = strNum.charAt(i)-&apos;0&apos;;</span><br><span class=\"line\">            if(c != 0) &#123;</span><br><span class=\"line\">                str += num[c]+unit[length-i-1];</span><br><span class=\"line\">                zeroFlag = true;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if(c==0 &amp;&amp; zeroFlag &amp;&amp; i!=length-1)&#123;</span><br><span class=\"line\">                str += num[c];</span><br><span class=\"line\">                zeroFlag = false;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(str);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        convert(120);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>7.不使用parseInt把字符串转换为数字</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package pers.yijin.demo;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 不使用parseInt把字符串转换为数字</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author Administrator</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class ParseInt &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 利用两个char型运算自动转换为int的特性</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param str</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static int parseInt(String str) &#123;</span><br><span class=\"line\">        int res = 0;</span><br><span class=\"line\">        for (int i = 0; i &lt; str.length(); i++) &#123;</span><br><span class=\"line\">            char c = str.charAt(i);</span><br><span class=\"line\">            if ((c &gt;= &apos;0&apos;) &amp;&amp; (c &lt;= &apos;9&apos;)) &#123;</span><br><span class=\"line\">                res = res * 10 + (c - &apos;0&apos;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        System.out.println(parseInt(&quot;123456789&quot;));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>8.数字反转</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package pers.yijin.demo;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 数字反转</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author Administrator</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class Reverse &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static int reverse(int num) &#123;</span><br><span class=\"line\">        StringBuilder builder = new StringBuilder();</span><br><span class=\"line\">        String str = builder.append(num).reverse().toString();</span><br><span class=\"line\">        return Integer.parseInt(str);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        System.out.println(reverse(852147963));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>9.水仙花数问题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package pers.yijin.demo;</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 求100~999之间的水仙花数</span><br><span class=\"line\"> * 水仙花数：例如153是1的3次方+5的3次方+3的3次方的和。</span><br><span class=\"line\"> * @author Administrator</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class Shuixianhuashu &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 分解出个位，十位，和百位</span><br><span class=\"line\">     * @param num</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static boolean isShuiXianHuaShu(int num) &#123;</span><br><span class=\"line\">        int i = num / 100;</span><br><span class=\"line\">        int j = (num % 100) / 10;</span><br><span class=\"line\">        int k = num % 10;</span><br><span class=\"line\">        if (num == i * i * i + j * j * j + k * k * k) &#123;</span><br><span class=\"line\">            return true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        for (int i = 100; i &lt; 1000; i++) &#123;</span><br><span class=\"line\">            if(isShuiXianHuaShu(i))&#123;</span><br><span class=\"line\">                System.out.println(i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjksf3cw20006h8efle6vrc5s","category_id":"cjksf3cvy0003h8ef49v6ucq2","_id":"cjksf3cw6000ch8ef0knf4udh"},{"post_id":"cjksf3cvs0000h8efivqmfwy7","category_id":"cjksf3cvy0003h8ef49v6ucq2","_id":"cjksf3cwa000gh8efnnbczv3a"},{"post_id":"cjksf3cw30007h8efwup6dny4","category_id":"cjksf3cvy0003h8ef49v6ucq2","_id":"cjksf3cwb000ih8eft75shh0k"},{"post_id":"cjksf3cw4000ah8efcagkhshc","category_id":"cjksf3cvy0003h8ef49v6ucq2","_id":"cjksf3cwd000mh8efe36ehw3f"},{"post_id":"cjksf3cvw0002h8ef812vnra8","category_id":"cjksf3cw30008h8ef7djhn2y8","_id":"cjksf3cwe000ph8eftcs3co3h"},{"post_id":"cjksf3cw5000bh8efve6i9n2a","category_id":"cjksf3cvy0003h8ef49v6ucq2","_id":"cjksf3cwg000uh8ef4moe3vre"},{"post_id":"cjksf3cw00005h8ef6203eag4","category_id":"cjksf3cvy0003h8ef49v6ucq2","_id":"cjksf3cwh000xh8efta7a3an8"},{"post_id":"cjksf3cw8000fh8eflvdqvqcp","category_id":"cjksf3cwc000kh8ef25d8r8a1","_id":"cjksf3cwj0011h8ef4rc1jgla"},{"post_id":"cjksf3cwb000hh8efws6wjwem","category_id":"cjksf3cwg000th8efitbmx2jw","_id":"cjksf3cwn0018h8ef4kzv2xhb"},{"post_id":"cjksf3cwk0014h8efi38brp0e","category_id":"cjksf3cwk0012h8ef8y68i7cg","_id":"cjksf3cwp001fh8efrxa06fu9"},{"post_id":"cjksf3cwc000lh8ef7y3fvf1e","category_id":"cjksf3cwk0012h8ef8y68i7cg","_id":"cjksf3cwr001jh8efz5ci2mj7"},{"post_id":"cjksf3cwe000oh8efubkcu87i","category_id":"cjksf3cwk0012h8ef8y68i7cg","_id":"cjksf3cwt001ph8efu5cn818i"},{"post_id":"cjksf3cwf000sh8efjw462ma6","category_id":"cjksf3cwk0012h8ef8y68i7cg","_id":"cjksf3cwx001wh8efcjvda889"},{"post_id":"cjksf3cwh000wh8efbtadffsu","category_id":"cjksf3cwk0012h8ef8y68i7cg","_id":"cjksf3cx30023h8ef03i285hr"},{"post_id":"cjksf3cwi0010h8ef6yd0i5xj","category_id":"cjksf3cwk0012h8ef8y68i7cg","_id":"cjksf3cx60029h8efwmv2ekj3"},{"post_id":"cjksf3cx30024h8ef6jv4d4iz","category_id":"cjksf3cw30008h8ef7djhn2y8","_id":"cjksf3cx8002fh8ef2xoawcqv"},{"post_id":"cjksf3cwl0017h8ef7d7v0utv","category_id":"cjksf3cx30022h8ef5nnw7myc","_id":"cjksf3cx9002jh8efal2lsw68"},{"post_id":"cjksf3cx50027h8efdq407bu0","category_id":"cjksf3cwc000kh8ef25d8r8a1","_id":"cjksf3cxa002nh8efxff3kepr"},{"post_id":"cjksf3cwn001bh8efxmny3t20","category_id":"cjksf3cx30022h8ef5nnw7myc","_id":"cjksf3cxc002rh8ef2cfajp3k"},{"post_id":"cjksf3cx7002eh8efjob3v0og","category_id":"cjksf3cx30022h8ef5nnw7myc","_id":"cjksf3cxe002uh8efie0kyipc"},{"post_id":"cjksf3cx8002ih8efl22vbc8w","category_id":"cjksf3cx30022h8ef5nnw7myc","_id":"cjksf3cxg002zh8eflic12vut"},{"post_id":"cjksf3cwo001eh8ef8m0lys96","category_id":"cjksf3cx30022h8ef5nnw7myc","_id":"cjksf3cxi0032h8efjbyps4jt"},{"post_id":"cjksf3cxa002mh8efbvj8874g","category_id":"cjksf3cx30022h8ef5nnw7myc","_id":"cjksf3cxj0036h8efh5sycvww"},{"post_id":"cjksf3cxb002qh8efn62633mq","category_id":"cjksf3cwc000kh8ef25d8r8a1","_id":"cjksf3cxk003ah8efoeo394sa"},{"post_id":"cjksf3cwq001ih8efx8cuot2z","category_id":"cjksf3cx30022h8ef5nnw7myc","_id":"cjksf3cxm003eh8efwwv0uy8e"},{"post_id":"cjksf3cxd002th8efxr60bfve","category_id":"cjksf3cwc000kh8ef25d8r8a1","_id":"cjksf3cxn003ih8ef8vu6jb5c"},{"post_id":"cjksf3cxf002yh8efrw9joh1j","category_id":"cjksf3cwc000kh8ef25d8r8a1","_id":"cjksf3cxp003mh8efxpc09bto"},{"post_id":"cjksf3cxh0031h8ef05pd5khl","category_id":"cjksf3cwc000kh8ef25d8r8a1","_id":"cjksf3cxq003qh8eftqbwvseu"},{"post_id":"cjksf3cws001mh8ef6kb7pp5o","category_id":"cjksf3cxf002xh8efxl74bhfo","_id":"cjksf3cxr003th8efmskv0emj"},{"post_id":"cjksf3cxi0035h8effkohr78m","category_id":"cjksf3cwc000kh8ef25d8r8a1","_id":"cjksf3cxr003wh8efp3my7aec"},{"post_id":"cjksf3cxk0039h8efk4yjybvr","category_id":"cjksf3cwg000th8efitbmx2jw","_id":"cjksf3cxs003zh8ef9ludmguz"},{"post_id":"cjksf3cwu001qh8ef50gtj4i5","category_id":"cjksf3cx30022h8ef5nnw7myc","_id":"cjksf3cxs0042h8efzp0rgw9w"},{"post_id":"cjksf3cxl003dh8ef90i7cezp","category_id":"cjksf3cx30022h8ef5nnw7myc","_id":"cjksf3cxs0045h8efqxmv9hu2"},{"post_id":"cjksf3cxm003hh8ef12aqf6yw","category_id":"cjksf3cw30008h8ef7djhn2y8","_id":"cjksf3cxt0048h8ef8ibrya89"},{"post_id":"cjksf3cwv001th8efyac393gs","category_id":"cjksf3cx30022h8ef5nnw7myc","_id":"cjksf3cxt004bh8efhn9hycwo"},{"post_id":"cjksf3cwx001xh8efxy8yfv5z","category_id":"cjksf3cx30022h8ef5nnw7myc","_id":"cjksf3cxu004eh8ef6sojs10u"},{"post_id":"cjksf3cx20020h8efx4h8s7ul","category_id":"cjksf3cxr003uh8efe6kgmvo0","_id":"cjksf3cxu004hh8efmwh5yd9j"},{"post_id":"cjksf3cx6002bh8ef4xlpz52n","category_id":"cjksf3cxf002xh8efxl74bhfo","_id":"cjksf3cxv004jh8ef64z337wc"},{"post_id":"cjksf3cxo003lh8efqg5c8odj","category_id":"cjksf3cxt0046h8eff2khu01g","_id":"cjksf3cxv004mh8ef4ah2hub1"},{"post_id":"cjksf3cxp003ph8ef9st5aolg","category_id":"cjksf3cxu004dh8efiy22onfr","_id":"cjksf3cxw004oh8ef4hij72xc"}],"PostTag":[{"post_id":"cjksf3cvs0000h8efivqmfwy7","tag_id":"cjksf3cw00004h8efirosimfi","_id":"cjksf3cwd000nh8efjxamuvnm"},{"post_id":"cjksf3cvs0000h8efivqmfwy7","tag_id":"cjksf3cw40009h8efftvjm7em","_id":"cjksf3cwf000qh8efu4o4grba"},{"post_id":"cjksf3cvs0000h8efivqmfwy7","tag_id":"cjksf3cw7000eh8efknqm5r1v","_id":"cjksf3cwg000vh8ef9tlb8qfn"},{"post_id":"cjksf3cwc000lh8ef7y3fvf1e","tag_id":"cjksf3cw00004h8efirosimfi","_id":"cjksf3cwi000yh8efkpu64tu7"},{"post_id":"cjksf3cwc000lh8ef7y3fvf1e","tag_id":"cjksf3cw40009h8efftvjm7em","_id":"cjksf3cwk0013h8ef4no8idpi"},{"post_id":"cjksf3cvw0002h8ef812vnra8","tag_id":"cjksf3cwc000jh8ef8ekn3ejf","_id":"cjksf3cwl0015h8efekckcx1r"},{"post_id":"cjksf3cwe000oh8efubkcu87i","tag_id":"cjksf3cw00004h8efirosimfi","_id":"cjksf3cwn0019h8efrhi6w6hy"},{"post_id":"cjksf3cwe000oh8efubkcu87i","tag_id":"cjksf3cw40009h8efftvjm7em","_id":"cjksf3cwo001ch8ef8f4y5u1c"},{"post_id":"cjksf3cwf000sh8efjw462ma6","tag_id":"cjksf3cw00004h8efirosimfi","_id":"cjksf3cwq001gh8efmw4aeo0a"},{"post_id":"cjksf3cwf000sh8efjw462ma6","tag_id":"cjksf3cw40009h8efftvjm7em","_id":"cjksf3cws001kh8efn053c7ut"},{"post_id":"cjksf3cwh000wh8efbtadffsu","tag_id":"cjksf3cw00004h8efirosimfi","_id":"cjksf3cwt001nh8eftehpyn1m"},{"post_id":"cjksf3cwh000wh8efbtadffsu","tag_id":"cjksf3cw40009h8efftvjm7em","_id":"cjksf3cwv001rh8efhm0etonn"},{"post_id":"cjksf3cwi0010h8ef6yd0i5xj","tag_id":"cjksf3cw00004h8efirosimfi","_id":"cjksf3cwx001uh8efl06et8rf"},{"post_id":"cjksf3cwi0010h8ef6yd0i5xj","tag_id":"cjksf3cw40009h8efftvjm7em","_id":"cjksf3cx1001yh8ef21j4efto"},{"post_id":"cjksf3cwk0014h8efi38brp0e","tag_id":"cjksf3cw00004h8efirosimfi","_id":"cjksf3cx30021h8efo4m4jobz"},{"post_id":"cjksf3cwk0014h8efi38brp0e","tag_id":"cjksf3cw40009h8efftvjm7em","_id":"cjksf3cx40025h8efhw582e0t"},{"post_id":"cjksf3cw00005h8ef6203eag4","tag_id":"cjksf3cw00004h8efirosimfi","_id":"cjksf3cx60028h8efpjvgk9jo"},{"post_id":"cjksf3cw00005h8ef6203eag4","tag_id":"cjksf3cw40009h8efftvjm7em","_id":"cjksf3cx7002ch8efpfh2us5s"},{"post_id":"cjksf3cw00005h8ef6203eag4","tag_id":"cjksf3cw7000eh8efknqm5r1v","_id":"cjksf3cx8002gh8efw3eov0r3"},{"post_id":"cjksf3cw20006h8efle6vrc5s","tag_id":"cjksf3cw00004h8efirosimfi","_id":"cjksf3cx9002kh8eff7udabb7"},{"post_id":"cjksf3cw20006h8efle6vrc5s","tag_id":"cjksf3cw40009h8efftvjm7em","_id":"cjksf3cxb002oh8efbr57w77c"},{"post_id":"cjksf3cw20006h8efle6vrc5s","tag_id":"cjksf3cw7000eh8efknqm5r1v","_id":"cjksf3cxc002sh8efigz3ss8s"},{"post_id":"cjksf3cw30007h8efwup6dny4","tag_id":"cjksf3cw00004h8efirosimfi","_id":"cjksf3cxe002wh8efg5qeyw49"},{"post_id":"cjksf3cw30007h8efwup6dny4","tag_id":"cjksf3cw40009h8efftvjm7em","_id":"cjksf3cxh0030h8ef3n36d32s"},{"post_id":"cjksf3cw30007h8efwup6dny4","tag_id":"cjksf3cw7000eh8efknqm5r1v","_id":"cjksf3cxi0034h8efhyrqzm36"},{"post_id":"cjksf3cw4000ah8efcagkhshc","tag_id":"cjksf3cw00004h8efirosimfi","_id":"cjksf3cxk0038h8efepkjvudo"},{"post_id":"cjksf3cw4000ah8efcagkhshc","tag_id":"cjksf3cw40009h8efftvjm7em","_id":"cjksf3cxl003bh8efcwo02z99"},{"post_id":"cjksf3cw4000ah8efcagkhshc","tag_id":"cjksf3cw7000eh8efknqm5r1v","_id":"cjksf3cxm003gh8effscp02kp"},{"post_id":"cjksf3cw5000bh8efve6i9n2a","tag_id":"cjksf3cw00004h8efirosimfi","_id":"cjksf3cxn003jh8ef574dq0g9"},{"post_id":"cjksf3cw5000bh8efve6i9n2a","tag_id":"cjksf3cw40009h8efftvjm7em","_id":"cjksf3cxp003oh8ef2e6y9toa"},{"post_id":"cjksf3cw5000bh8efve6i9n2a","tag_id":"cjksf3cw7000eh8efknqm5r1v","_id":"cjksf3cxq003rh8ef9sdf48u0"},{"post_id":"cjksf3cxb002qh8efn62633mq","tag_id":"cjksf3cw40009h8efftvjm7em","_id":"cjksf3cxr003vh8efbcjf4klu"},{"post_id":"cjksf3cw8000fh8eflvdqvqcp","tag_id":"cjksf3cxa002lh8efqhz7g3ck","_id":"cjksf3cxr003xh8ef909to7fg"},{"post_id":"cjksf3cxd002th8efxr60bfve","tag_id":"cjksf3cw40009h8efftvjm7em","_id":"cjksf3cxs0041h8ef2ywjw9nr"},{"post_id":"cjksf3cxf002yh8efrw9joh1j","tag_id":"cjksf3cw40009h8efftvjm7em","_id":"cjksf3cxs0043h8efm91kgbtp"},{"post_id":"cjksf3cwb000hh8efws6wjwem","tag_id":"cjksf3cxe002vh8efvx9p3wx5","_id":"cjksf3cxt0047h8efv4so3vrj"},{"post_id":"cjksf3cwb000hh8efws6wjwem","tag_id":"cjksf3cw40009h8efftvjm7em","_id":"cjksf3cxt0049h8efbp33c71j"},{"post_id":"cjksf3cxh0031h8ef05pd5khl","tag_id":"cjksf3cxa002lh8efqhz7g3ck","_id":"cjksf3cxu004ch8efh59aadbj"},{"post_id":"cjksf3cxi0035h8effkohr78m","tag_id":"cjksf3cxa002lh8efqhz7g3ck","_id":"cjksf3cxu004fh8ef35hcdr4y"},{"post_id":"cjksf3cwl0017h8ef7d7v0utv","tag_id":"cjksf3cxi0033h8efs1t9bzem","_id":"cjksf3cxv004ih8ef368kllty"},{"post_id":"cjksf3cxk0039h8efk4yjybvr","tag_id":"cjksf3cxe002vh8efvx9p3wx5","_id":"cjksf3cxv004kh8efre2dohi7"},{"post_id":"cjksf3cxl003dh8ef90i7cezp","tag_id":"cjksf3cxi0033h8efs1t9bzem","_id":"cjksf3cxw004nh8efnnf77dkq"},{"post_id":"cjksf3cwn001bh8efxmny3t20","tag_id":"cjksf3cxi0033h8efs1t9bzem","_id":"cjksf3cxw004ph8efo7cmerag"},{"post_id":"cjksf3cwo001eh8ef8m0lys96","tag_id":"cjksf3cxi0033h8efs1t9bzem","_id":"cjksf3cxw004rh8ef4m2jg66v"},{"post_id":"cjksf3cwq001ih8efx8cuot2z","tag_id":"cjksf3cxi0033h8efs1t9bzem","_id":"cjksf3cxw004sh8efy4lkbmh3"},{"post_id":"cjksf3cws001mh8ef6kb7pp5o","tag_id":"cjksf3cxr003yh8eftxuuqd2i","_id":"cjksf3cxx004uh8efl2b5gn7z"},{"post_id":"cjksf3cwu001qh8ef50gtj4i5","tag_id":"cjksf3cxi0033h8efs1t9bzem","_id":"cjksf3cxx004vh8ef6ldwrzvt"},{"post_id":"cjksf3cwv001th8efyac393gs","tag_id":"cjksf3cxi0033h8efs1t9bzem","_id":"cjksf3cxx004xh8efcksfp5iq"},{"post_id":"cjksf3cwx001xh8efxy8yfv5z","tag_id":"cjksf3cxi0033h8efs1t9bzem","_id":"cjksf3cxy004yh8efjf3vqow8"},{"post_id":"cjksf3cx20020h8efx4h8s7ul","tag_id":"cjksf3cxv004lh8efqx4l8ukj","_id":"cjksf3cxy004zh8ef9vz5024s"},{"post_id":"cjksf3cx20020h8efx4h8s7ul","tag_id":"cjksf3cxw004qh8efybagje6v","_id":"cjksf3cxy0051h8ef0lzuutlh"},{"post_id":"cjksf3cx30024h8ef6jv4d4iz","tag_id":"cjksf3cwc000jh8ef8ekn3ejf","_id":"cjksf3cxy0052h8efqcozd26i"},{"post_id":"cjksf3cx30024h8ef6jv4d4iz","tag_id":"cjksf3cxi0033h8efs1t9bzem","_id":"cjksf3cxz0054h8ef9la1wivf"},{"post_id":"cjksf3cx50027h8efdq407bu0","tag_id":"cjksf3cxx004wh8ef39y51orc","_id":"cjksf3cxz0055h8efuobjqs0e"},{"post_id":"cjksf3cx50027h8efdq407bu0","tag_id":"cjksf3cw40009h8efftvjm7em","_id":"cjksf3cxz0057h8efhtjjn8qp"},{"post_id":"cjksf3cx6002bh8ef4xlpz52n","tag_id":"cjksf3cxy0050h8efqrvrzf4z","_id":"cjksf3cxz0058h8eflt1i05zw"},{"post_id":"cjksf3cx7002eh8efjob3v0og","tag_id":"cjksf3cxi0033h8efs1t9bzem","_id":"cjksf3cy0005ah8eftqdnhlcs"},{"post_id":"cjksf3cx8002ih8efl22vbc8w","tag_id":"cjksf3cxi0033h8efs1t9bzem","_id":"cjksf3cy0005bh8efp40z62bo"},{"post_id":"cjksf3cxa002mh8efbvj8874g","tag_id":"cjksf3cxi0033h8efs1t9bzem","_id":"cjksf3cy0005dh8efxsn3az11"},{"post_id":"cjksf3cxm003hh8ef12aqf6yw","tag_id":"cjksf3cwc000jh8ef8ekn3ejf","_id":"cjksf3cy1005fh8ef7uioabmi"},{"post_id":"cjksf3cxm003hh8ef12aqf6yw","tag_id":"cjksf3cy0005ch8efrl4zg8bh","_id":"cjksf3cy1005gh8efd09oi3a0"},{"post_id":"cjksf3cxo003lh8efqg5c8odj","tag_id":"cjksf3cy0005eh8efihyx7nw1","_id":"cjksf3cy1005ih8ef289q62ju"},{"post_id":"cjksf3cxp003ph8ef9st5aolg","tag_id":"cjksf3cy0005eh8efihyx7nw1","_id":"cjksf3cy1005jh8efown0vw0n"},{"post_id":"cjksf3cxp003ph8ef9st5aolg","tag_id":"cjksf3cxe002vh8efvx9p3wx5","_id":"cjksf3cy1005kh8efmzz1czb6"}],"Tag":[{"name":"笔记","_id":"cjksf3cw00004h8efirosimfi"},{"name":"JavaScript","_id":"cjksf3cw40009h8efftvjm7em"},{"name":"ECMAScript 2015","_id":"cjksf3cw7000eh8efknqm5r1v"},{"name":"css","_id":"cjksf3cwc000jh8ef8ekn3ejf"},{"name":"移动端","_id":"cjksf3cxa002lh8efqhz7g3ck"},{"name":"算法","_id":"cjksf3cxe002vh8efvx9p3wx5"},{"name":"填坑经验","_id":"cjksf3cxi0033h8efs1t9bzem"},{"name":"规范","_id":"cjksf3cxr003yh8eftxuuqd2i"},{"name":"框架","_id":"cjksf3cxv004lh8efqx4l8ukj"},{"name":"struts2","_id":"cjksf3cxw004qh8efybagje6v"},{"name":"实战","_id":"cjksf3cxx004wh8ef39y51orc"},{"name":"插件","_id":"cjksf3cxy0050h8efqrvrzf4z"},{"name":"经典布局","_id":"cjksf3cy0005ch8efrl4zg8bh"},{"name":"面试","_id":"cjksf3cy0005eh8efihyx7nw1"}]}}